
project/riegapp/out/riegapp.elf:     file format elf32-littlearm
project/riegapp/out/riegapp.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0008e9

Program Header:
0x70000001 off    0x00014d88 vaddr 0x1a004d88 paddr 0x1a004d88 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000001bc flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004d90 memsz 0x00004d90 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004d90 align 2**16
         filesz 0x00000140 memsz 0x00000140 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d84  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  10000000  1a004d90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020140  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020140  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020140  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020140  2**2
                  CONTENTS
  6 .bss          0000007c  10000140  10000140  00000140  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020140  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020140  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020140  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020140  2**2
                  CONTENTS
 11 .init_array   00000004  1a004d84  1a004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004d88  1a004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020140  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020140  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020140  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020140  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020140  2**2
                  CONTENTS
 18 .noinit       00000000  100001bc  100001bc  00020140  2**2
                  CONTENTS
 19 .debug_info   00025757  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005488  00000000  00000000  00045897  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000988c  00000000  00000000  0004ad1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000b70  00000000  00000000  000545ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000c20  00000000  00000000  0005511b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000deb9  00000000  00000000  00055d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000136b2  00000000  00000000  00063bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000299d6  00000000  00000000  000772a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000a0c7c  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000a0ce4  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000026a4  00000000  00000000  000a0d18  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000140 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004d84 l    d  .init_array	00000000 .init_array
1a004d88 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100001bc l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001ffc l     F .text	000000a4 uartProcessIRQ
1000016c l     O .bss	00000004 rxIsrCallbackUART0
10000170 l     O .bss	00000004 rxIsrCallbackUART2
10000174 l     O .bss	00000004 rxIsrCallbackUART3
10000178 l     O .bss	00000004 txIsrCallbackUART0
1000017c l     O .bss	00000004 txIsrCallbackUART2
10000180 l     O .bss	00000004 txIsrCallbackUART3
1a004b8c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 riegapp.c
10000140 l     O .bss	0000000a uartBuff.14266
00000000 l    df *ABS*	00000000 system.c
1000014c l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0048f4 l     O .text	00000004 InitClkStates
1a0048f8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000aec l     F .text	00000044 Board_LED_Init
1a000b30 l     F .text	00000040 Board_TEC_Init
1a000b70 l     F .text	00000040 Board_GPIO_Init
1a000bb0 l     F .text	00000030 Board_ADC_Init
1a000be0 l     F .text	00000038 Board_SPI_Init
1a000c18 l     F .text	00000024 Board_I2C_Init
1a004970 l     O .text	00000008 GpioButtons
1a004978 l     O .text	0000000c GpioLeds
1a004984 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000cdc l     F .text	00000014 Chip_SSP_GetClockIndex
1a000cf0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a000e10 l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000e60 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000e74 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00499c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001198 l     F .text	000000a0 pll_calc_divs
1a001238 l     F .text	0000010c pll_get_frac
1a001344 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0015b8 l     F .text	00000022 Chip_Clock_GetDivRate
10000150 l     O .bss	00000008 audio_usb_pll_freq
1a0049f0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001758 l     F .text	0000002c Chip_UART_GetIndex
1a004a5c l     O .text	00000008 UART_BClock
1a004a64 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001948 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001ca4 l     F .text	00000002 errorOcurred
1a001ca6 l     F .text	00000002 doNothing
10000044 l     O .data	00000040 timer_dd
1a004b5c l     O .text	00000030 timer_sd
00000000 l    df *ABS*	00000000 sapi_tick.c
10000158 l     O .bss	00000004 callBackFuncParams
10000160 l     O .bss	00000008 tickCounter
10000168 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000184 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_stdio.c
1a00233c l     F .text	0000000e uartfd_write
1a00234a l     F .text	0000002e uartfd_read
1a004bd8 l     O .text	00000010 uartfd_vtable
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a00247c l     F .text	0000009c enableGPIOIrq
1a002518 l     F .text	00000048 disableGPIOIrq
1a002560 l     F .text	00000010 clearInterrupt
1a002570 l     F .text	0000005c serveInterrupt
1a0025cc l     F .text	0000000c triggerExpired
1a0025d8 l     F .text	0000000c timerExpired
10000090 l     O .data	00000001 firstTime.11723
10000094 l     O .data	00000048 ultrasonicSensors
1a004be8 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0034a8 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fopencookie.c
1a003654 l     F .text	00000038 fccloser
1a00368c l     F .text	0000004a fcwriter
1a0036d6 l     F .text	00000038 fcreader
1a00370e l     F .text	00000036 fcseeker
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003a44 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strtol.c
1a0041c8 l     F .text	000000f0 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
100000e0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004d88 l       .init_array	00000000 __init_array_end
1a004d84 l       .bss_RAM5	00000000 __preinit_array_end
1a004d84 l       .init_array	00000000 __init_array_start
1a004d84 l       .bss_RAM5	00000000 __preinit_array_start
1a0013dc g     F .text	0000001c Chip_Clock_GetDividerSource
1a000988 g     F .text	00000012 _isatty_r
1a004040 g     F .text	000000dc _puts_r
1a001e88 g     F .text	00000044 TIMER2_IRQHandler
1a0020d0 g     F .text	00000014 uartRxRead
1a00227c g     F .text	0000001c uartWriteByteArray
1a0003fc g     F .text	00000044 initGpios
1a00099a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a000f0c g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a004458 g     F .text	0000006c __sflags
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002a10 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a002174 g     F .text	0000001e uartReadByte
1a000440 g     F .text	0000006e readCommandAndValue
1a004010 g     F .text	00000030 printf
1a000cd2 g     F .text	00000008 __stdio_init
100001b0 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a002420 g     F .text	0000003e delayRead
1a004186 g     F .text	00000024 __sseek
1a003558 g     F .text	00000070 __sinit
1a0042cc g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000300 g     F .text	00000038 sendTo
1a0034fc g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a000fd4 g     F .text	0000000c Chip_ADC_SetResolution
1a00463c g     F .text	0000000c __malloc_unlock
1a001fd0 g     F .text	0000002c SysTick_Handler
1a0017d8 g     F .text	00000040 Chip_UART_SetBaud
100001b1 g     O .bss	00000001 __lock___arc4random_mutex
1a0008e4  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000c74 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a004d90 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a00444c g     F .text	0000000c __errno
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a00097e g     F .text	0000000a _fstat_r
53ff6fa6 g       *ABS*	00000000 __valid_user_code_checksum
1a004d90 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002192 g     F .text	00000080 waitForReceiveStringOrTimeout
1a001ecc g     F .text	00000044 TIMER3_IRQHandler
1a00165a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a000e48 g     F .text	00000018 Chip_TIMER_Reset
1a002690 g     F .text	00000044 ultrasonicSensorGetDistance
1a00051c g     F .text	000001ec readSoilOnTick
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
10000190 g     O .bss	00000018 nb_delay
1a0034f0 g     F .text	0000000c _cleanup_r
1a002998 g     F .text	00000022 .hidden __floatsidf
1a002f30 g     F .text	00000000 .hidden __aeabi_uldivmod
100001bc g       .noinit	00000000 _noinit
1a00411c g     F .text	00000010 puts
1a002266 g     F .text	00000016 uartWriteString
100001a8 g     O .bss	00000004 SystemCoreClock
1a001784 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000eb4 g     F .text	00000018 readAdcVal
1a000180  w    F .text	00000002 UsageFault_Handler
1a00170c g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000a74 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00039c g     F .text	00000060 itoa
1a002978 g     F .text	0000001e .hidden __aeabi_ui2d
1a002f60 g     F .text	000002d0 .hidden __udivmoddi4
1a0026f4 g     F .text	00000000 .hidden __aeabi_drsub
1a000a1c g     F .text	00000020 _sbrk_r
1a00496c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0009a4 g     F .text	0000004e _read_r
1a003820 g     F .text	00000038 fopencookie
1a00323c g     F .text	000000d8 _fclose_r
1a0026de g     F .text	0000000a GPIO1_IRQHandler
1a0029bc g     F .text	00000042 .hidden __extendsfdf2
1a002cc0 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002700 g     F .text	00000276 .hidden __adddf3
1a0020a0 g     F .text	00000018 uartRxReady
1a004d88 g       .ARM.exidx	00000000 __exidx_start
100001b2 g     O .bss	00000001 __lock___env_recursive_mutex
1a002a6c g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a000ea6 g     F .text	0000000e setStartMode
100001b3 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a004d4c g     O .text	00000004 _global_impure_ptr
1a003894 g     F .text	00000048 __libc_init_array
1a001b94 g     F .text	000000b8 adcInit
1a002978 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000c90 g     F .text	00000030 Board_Init
1a000972  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0042b8 g     F .text	00000014 strtol
1a002e90 g     F .text	0000009e .hidden __aeabi_d2f
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100001bc g       .bss	00000000 _ebss
1a000fe0 g     F .text	0000002a Chip_ADC_EnableChannel
1a001e08 g     F .text	00000040 TIMER0_IRQHandler
1a0008e8 g     F .text	00000088 Reset_Handler
1a001f54 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000dd4 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a001390 g     F .text	0000004c Chip_Clock_EnableCrystal
100001b4 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a000f22 g     F .text	00000008 Chip_ADC_ReadValue
1a0004b0 g     F .text	00000030 hm10bleTest
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002700 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a000f82 g     F .text	00000020 Chip_ADC_SetStartMode
1a002a00 g     F .text	0000006a .hidden __aeabi_ul2d
1a001e48 g     F .text	00000040 TIMER1_IRQHandler
1a004cec g     O .text	00000020 __sf_fake_stderr
1a000db0 g     F .text	00000024 Chip_I2C_Init
10000001 g     O .data	00000001 recipient_height
1a0038e2 g     F .text	00000002 __retarget_lock_release_recursive
1a002298 g     F .text	0000000a UART2_IRQHandler
1a00154c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004a6c g     O .text	000000e6 gpioPinsInit
1a00224c g     F .text	0000001a uartWriteByte
1a000d08 g     F .text	00000012 Chip_SSP_SetClockRate
1a003a72 g     F .text	00000024 __sfputs_r
1a0026e8 g     F .text	0000000a GPIO2_IRQHandler
1a003528 g     F .text	0000000c __sfp_lock_acquire
1a004590 g     F .text	00000000 memchr
1a001ca8 g     F .text	00000120 Timer_Init
1a0038f4 g     F .text	0000009c _free_r
1a001c4c g     F .text	00000058 adcRead
1a001dc8 g     F .text	00000008 Timer_microsecondsToTicks
1a001634 g     F .text	00000026 Chip_Clock_GetBaseClock
10000140 g       .bss	00000000 _bss
1a000f2a g     F .text	00000036 Chip_ADC_ReadStatus
1a000fa2 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0026fc g     F .text	0000027a .hidden __aeabi_dsub
1a000338 g     F .text	00000064 calculateHumidityPercentage
1a002400 g     F .text	00000020 delayInit
1a002a00 g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000d1a g     F .text	0000003e Chip_SSP_SetBitRate
1a000e0c g     F .text	00000002 Chip_GPIO_Init
1a004998 g     O .text	00000004 OscRateIn
1a0020f8 g     F .text	0000007c uartInit
100001bc g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000e3c g     F .text	0000000c Chip_TIMER_Init
1a000178 g       .text	00000000 __bss_section_table_end
1a000974 g     F .text	0000000a _close_r
1a002998 g     F .text	00000022 .hidden __aeabi_i2d
1a00197c g     F .text	000001ac gpioInit
1a0038de g     F .text	00000002 __retarget_lock_close_recursive
1a004370 g     F .text	000000dc __swsetup_r
1a003230  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002cc0 g     F .text	000001d0 .hidden __divdf3
1a0035c8 g     F .text	0000008c __sfp
1a00354c g     F .text	0000000c __sinit_lock_release
1a002a6c g     F .text	00000254 .hidden __muldf3
1a00412c g     F .text	00000022 __sread
1a0022ac g     F .text	0000001c USB0_IRQHandler
1a0016d8 g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004630 g     F .text	0000000c __malloc_lock
1a000c60 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003430 g     F .text	00000078 _fflush_r
1a004d0c g     O .text	00000020 __sf_fake_stdin
1a0013f8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0038e0 g     F .text	00000002 __retarget_lock_acquire_recursive
1a0038e4 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000708 g     F .text	000001dc main
1a0038dc g     F .text	00000002 __retarget_lock_init_recursive
10000000 g     O .data	00000001 min_humidity
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0041aa g     F .text	00000008 __sclose
1a003314 g     F .text	00000010 fclose
1a002e90 g     F .text	0000009e .hidden __truncdfsf2
1a001dd0 g     F .text	00000038 Timer_EnableCompareMatch
1a003990 g     F .text	000000b4 _malloc_r
1a002a10 g     F .text	0000005a .hidden __aeabi_l2d
1a0020b8 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001668 g     F .text	0000003c Chip_Clock_EnableOpts
1a000cca g     F .text	00000008 __stdio_getchar
1a001414 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0041b2 g     F .text	00000014 strcmp
1a0014cc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003ce8 g     F .text	00000014 vfiprintf
1a0018f4 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0023c8 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001b28 g     F .text	0000006a gpioWrite
1a000970  w    F .text	00000002 _fini
1a004010 g     F .text	00000030 iprintf
1a000ecc g     F .text	00000040 Chip_ADC_Init
100001ac g     O .bss	00000004 g_pUsbApi
1a000a3c g     F .text	00000038 Board_SetupMuxing
1a001818 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001f10 g     F .text	0000000c tickRead
1a0009f2 g     F .text	00000028 _write_r
10000088 g     O .data	00000008 tickRateMS
1a00100a g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0004e0 g     F .text	0000003a turnLeds
1a0025e4 g     F .text	000000ac ultrasonicSensorInit
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a003cfc g     F .text	000000ea _printf_common
100000dc g     O .data	00000004 _impure_ptr
1a003324 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a002212 g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a0020e4 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a003744 g     F .text	000000dc _fopencookie_r
1a001f1c g     F .text	00000020 tickCallbackSet
100001bc g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000d58 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0044c4 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000c3c g     F .text	00000024 Board_Debug_Init
1a000cc0 g     F .text	0000000a __stdio_putchar
1a000f60 g     F .text	00000022 Chip_ADC_Int_SetChannelCmd
10000140 g       .data	00000000 _edata
1a000d90 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100001b5 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00102c g     F .text	00000158 Chip_SetupCoreClock
1a00414e g     F .text	00000038 __swrite
1a0026d4 g     F .text	0000000a GPIO0_IRQHandler
1a003a98 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003858 g     F .text	0000003c _fwalk_reent
1a001184 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003534 g     F .text	0000000c __sfp_lock_release
1a004d2c g     O .text	00000020 __sf_fake_stdout
1a003234 g     F .text	00000008 atoi
1a004beb g     O .text	00000101 _ctype_
1a003230  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
100001b6 g     O .bss	00000001 __lock___dd_hash_mutex
1a00450c g     F .text	00000080 __smakebuf_r
100001b7 g     O .bss	00000001 __lock___tz_mutex
1a003de8 g     F .text	00000228 _printf_i
1a0016a4 g     F .text	00000034 Chip_Clock_Enable
1a0022a2 g     F .text	0000000a UART3_IRQHandler
1000018c g     O .bss	00000004 __malloc_sbrk_start
1a002460 g     F .text	0000001c delayWrite
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0029bc g     F .text	00000042 .hidden __aeabi_f2d
1a002378 g     F .text	00000050 stdioPrintf
1a0022c8 g     F .text	00000074 boardInit
10000188 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0026fc g     F .text	0000027a .hidden __subdf3
1a003a98 g     F .text	00000250 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001f3c g     F .text	00000018 tickPowerSet
10000004 g     O .data	00000004 scan_period
1a0015dc g     F .text	00000058 Chip_Clock_SetBaseClock
1a003ce8 g     F .text	00000014 vfprintf
1a00192c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100001b8 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a003540 g     F .text	0000000c __sinit_lock_acquire
1a000ae0 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e9 08 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a a6 6f ff 53     }............o.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	d1 1f 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	ad 22 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ."..............
1a000070:	09 1e 00 1a 49 1e 00 1a 89 1e 00 1a cd 1e 00 1a     ....I...........
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 99 22 00 1a a3 22 00 1a     ........."..."..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	d5 26 00 1a df 26 00 1a e9 26 00 1a bb 01 00 1a     .&...&...&......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004d90 	.word	0x1a004d90
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000140 	.word	0x00000140
1a000120:	1a004d90 	.word	0x1a004d90
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004d90 	.word	0x1a004d90
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004d90 	.word	0x1a004d90
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004d90 	.word	0x1a004d90
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000140 	.word	0x10000140
1a000154:	0000007c 	.word	0x0000007c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 ff1c 	bl	1a001ffc <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <sendTo>:
void turnLeds(int on);

//==================[declaraciones de funciones internas]====================/

void sendTo(int pin, int distancia, int humedad, const char *estado)
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b084      	sub	sp, #16
  stdioPrintf(pin, "{\"water_level\": %d, \"humidity\": %d, \"water_pump\": %s, \"min_humidity\": %d, \"recipient_height\": %d, \"scan_period\": %d }", distancia, humedad, estado, min_humidity, recipient_height, scan_period);
1a000304:	4c08      	ldr	r4, [pc, #32]	; (1a000328 <sendTo+0x28>)
1a000306:	6824      	ldr	r4, [r4, #0]
1a000308:	9403      	str	r4, [sp, #12]
1a00030a:	4c08      	ldr	r4, [pc, #32]	; (1a00032c <sendTo+0x2c>)
1a00030c:	7824      	ldrb	r4, [r4, #0]
1a00030e:	9402      	str	r4, [sp, #8]
1a000310:	4c07      	ldr	r4, [pc, #28]	; (1a000330 <sendTo+0x30>)
1a000312:	7824      	ldrb	r4, [r4, #0]
1a000314:	9401      	str	r4, [sp, #4]
1a000316:	9300      	str	r3, [sp, #0]
1a000318:	4613      	mov	r3, r2
1a00031a:	460a      	mov	r2, r1
1a00031c:	4905      	ldr	r1, [pc, #20]	; (1a000334 <sendTo+0x34>)
1a00031e:	b2c0      	uxtb	r0, r0
1a000320:	f002 f82a 	bl	1a002378 <stdioPrintf>
}
1a000324:	b004      	add	sp, #16
1a000326:	bd10      	pop	{r4, pc}
1a000328:	10000004 	.word	0x10000004
1a00032c:	10000001 	.word	0x10000001
1a000330:	10000000 	.word	0x10000000
1a000334:	1a00487c 	.word	0x1a00487c

1a000338 <calculateHumidityPercentage>:

float calculateHumidityPercentage(uint16_t value)
{
1a000338:	b508      	push	{r3, lr}
  float percentage = (100 - ((value / 1023.00) * 100));
1a00033a:	f002 fb2d 	bl	1a002998 <__aeabi_i2d>
1a00033e:	a315      	add	r3, pc, #84	; (adr r3, 1a000394 <calculateHumidityPercentage+0x5c>)
1a000340:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000344:	f002 fcbc 	bl	1a002cc0 <__aeabi_ddiv>
1a000348:	2200      	movs	r2, #0
1a00034a:	4b0f      	ldr	r3, [pc, #60]	; (1a000388 <calculateHumidityPercentage+0x50>)
1a00034c:	f002 fb8e 	bl	1a002a6c <__aeabi_dmul>
1a000350:	4602      	mov	r2, r0
1a000352:	460b      	mov	r3, r1
1a000354:	2000      	movs	r0, #0
1a000356:	490c      	ldr	r1, [pc, #48]	; (1a000388 <calculateHumidityPercentage+0x50>)
1a000358:	f002 f9d0 	bl	1a0026fc <__aeabi_dsub>
1a00035c:	f002 fd98 	bl	1a002e90 <__aeabi_d2f>
1a000360:	ee00 0a10 	vmov	s0, r0
  if (percentage < 0)
1a000364:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
1a000368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00036c:	d409      	bmi.n	1a000382 <calculateHumidityPercentage+0x4a>
  {
    return 0.0;
  }
  else if (percentage > 100)
1a00036e:	eddf 7a07 	vldr	s15, [pc, #28]	; 1a00038c <calculateHumidityPercentage+0x54>
1a000372:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a000376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00037a:	dd01      	ble.n	1a000380 <calculateHumidityPercentage+0x48>
  {
    return 100.0;
1a00037c:	eeb0 0a67 	vmov.f32	s0, s15
  }
  else
  {
    return percentage;
  }
}
1a000380:	bd08      	pop	{r3, pc}
    return 0.0;
1a000382:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1a000390 <calculateHumidityPercentage+0x58>
1a000386:	e7fb      	b.n	1a000380 <calculateHumidityPercentage+0x48>
1a000388:	40590000 	.word	0x40590000
1a00038c:	42c80000 	.word	0x42c80000
	...
1a000398:	408ff800 	.word	0x408ff800

1a00039c <itoa>:

char *itoa(int value, char *result, int base)
{
  // check that the base if valid
  if (base < 2 || base > 36)
1a00039c:	1e93      	subs	r3, r2, #2
1a00039e:	2b22      	cmp	r3, #34	; 0x22
1a0003a0:	d802      	bhi.n	1a0003a8 <itoa+0xc>
{
1a0003a2:	b4f0      	push	{r4, r5, r6, r7}
  {
    *result = '\0';
    return result;
  }

  char *ptr = result, *ptr1 = result, tmp_char;
1a0003a4:	460e      	mov	r6, r1
1a0003a6:	e005      	b.n	1a0003b4 <itoa+0x18>
    *result = '\0';
1a0003a8:	2300      	movs	r3, #0
1a0003aa:	700b      	strb	r3, [r1, #0]
    tmp_char = *ptr;
    *ptr-- = *ptr1;
    *ptr1++ = tmp_char;
  }
  return result;
}
1a0003ac:	4608      	mov	r0, r1
1a0003ae:	4770      	bx	lr
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - value * base)];
1a0003b0:	461e      	mov	r6, r3
    value /= base;
1a0003b2:	4628      	mov	r0, r5
1a0003b4:	fb90 f5f2 	sdiv	r5, r0, r2
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - value * base)];
1a0003b8:	fb02 0415 	mls	r4, r2, r5, r0
1a0003bc:	3423      	adds	r4, #35	; 0x23
1a0003be:	4633      	mov	r3, r6
1a0003c0:	4f0d      	ldr	r7, [pc, #52]	; (1a0003f8 <itoa+0x5c>)
1a0003c2:	5d3c      	ldrb	r4, [r7, r4]
1a0003c4:	f803 4b01 	strb.w	r4, [r3], #1
  } while (value);
1a0003c8:	2d00      	cmp	r5, #0
1a0003ca:	d1f1      	bne.n	1a0003b0 <itoa+0x14>
  if (tmp_value < 0)
1a0003cc:	2800      	cmp	r0, #0
1a0003ce:	db04      	blt.n	1a0003da <itoa+0x3e>
  *ptr-- = '\0';
1a0003d0:	2200      	movs	r2, #0
1a0003d2:	f803 2901 	strb.w	r2, [r3], #-1
  char *ptr = result, *ptr1 = result, tmp_char;
1a0003d6:	460a      	mov	r2, r1
  while (ptr1 < ptr)
1a0003d8:	e009      	b.n	1a0003ee <itoa+0x52>
    *ptr++ = '-';
1a0003da:	222d      	movs	r2, #45	; 0x2d
1a0003dc:	701a      	strb	r2, [r3, #0]
1a0003de:	1cb3      	adds	r3, r6, #2
1a0003e0:	e7f6      	b.n	1a0003d0 <itoa+0x34>
    tmp_char = *ptr;
1a0003e2:	7818      	ldrb	r0, [r3, #0]
    *ptr-- = *ptr1;
1a0003e4:	7814      	ldrb	r4, [r2, #0]
1a0003e6:	f803 4901 	strb.w	r4, [r3], #-1
    *ptr1++ = tmp_char;
1a0003ea:	f802 0b01 	strb.w	r0, [r2], #1
  while (ptr1 < ptr)
1a0003ee:	4293      	cmp	r3, r2
1a0003f0:	d8f7      	bhi.n	1a0003e2 <itoa+0x46>
}
1a0003f2:	4608      	mov	r0, r1
1a0003f4:	bcf0      	pop	{r4, r5, r6, r7}
1a0003f6:	4770      	bx	lr
1a0003f8:	1a004658 	.word	0x1a004658

1a0003fc <initGpios>:
bool_t readCommandAndValue(uint8_t *command, uint8_t *value, int commandMaxLength, int valueMaxLength);
bool_t hm10bleTest(int32_t uart);
void hm10blePrintATCommands(int32_t uart);

void initGpios()
{
1a0003fc:	b508      	push	{r3, lr}
  gpioInit(GREEN_LED, GPIO_OUTPUT);
1a0003fe:	2101      	movs	r1, #1
1a000400:	200c      	movs	r0, #12
1a000402:	f001 fabb 	bl	1a00197c <gpioInit>
  gpioInit(BLUE_LED, GPIO_OUTPUT);
1a000406:	2101      	movs	r1, #1
1a000408:	200b      	movs	r0, #11
1a00040a:	f001 fab7 	bl	1a00197c <gpioInit>
  gpioInit(RED_LED, GPIO_OUTPUT);
1a00040e:	2101      	movs	r1, #1
1a000410:	200d      	movs	r0, #13
1a000412:	f001 fab3 	bl	1a00197c <gpioInit>
  gpioInit(WATER_PIN, GPIO_OUTPUT);
1a000416:	2101      	movs	r1, #1
1a000418:	200e      	movs	r0, #14
1a00041a:	f001 faaf 	bl	1a00197c <gpioInit>
  gpioWrite(GREEN_LED, ON);
1a00041e:	2101      	movs	r1, #1
1a000420:	200c      	movs	r0, #12
1a000422:	f001 fb81 	bl	1a001b28 <gpioWrite>
  gpioWrite(BLUE_LED, ON);
1a000426:	2101      	movs	r1, #1
1a000428:	200b      	movs	r0, #11
1a00042a:	f001 fb7d 	bl	1a001b28 <gpioWrite>
  gpioWrite(RED_LED, ON);
1a00042e:	2101      	movs	r1, #1
1a000430:	200d      	movs	r0, #13
1a000432:	f001 fb79 	bl	1a001b28 <gpioWrite>
  gpioWrite(WATER_PIN, OFF);
1a000436:	2100      	movs	r1, #0
1a000438:	200e      	movs	r0, #14
1a00043a:	f001 fb75 	bl	1a001b28 <gpioWrite>
}
1a00043e:	bd08      	pop	{r3, pc}

1a000440 <readCommandAndValue>:
//==================[definiciones de funciones internas]=====================/

//==================[definiciones de funciones externas]=====================/

bool_t readCommandAndValue(uint8_t *command, uint8_t *value, int commandMaxLength, int valueMaxLength)
{
1a000440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000444:	b082      	sub	sp, #8
1a000446:	4682      	mov	sl, r0
1a000448:	4689      	mov	r9, r1
1a00044a:	4690      	mov	r8, r2
1a00044c:	461f      	mov	r7, r3
  uint8_t data;
  int commandIndex = 0;
  int valueIndex = 0;
  int isReadingValue = 0;
1a00044e:	2400      	movs	r4, #0
  int valueIndex = 0;
1a000450:	4625      	mov	r5, r4
  int commandIndex = 0;
1a000452:	4626      	mov	r6, r4
1a000454:	e000      	b.n	1a000458 <readCommandAndValue+0x18>
      delay(10);
      // printf("Received: 0x%02X '%c'\r\n", data, (isprint(data) ? data : '.'));
      //  Check for '=' or ';' character
      if (data == '=')
      {
        isReadingValue = 1;
1a000456:	2401      	movs	r4, #1
    if (uartReadByte(UART_BLUETOOTH, &data))
1a000458:	f10d 0107 	add.w	r1, sp, #7
1a00045c:	2005      	movs	r0, #5
1a00045e:	f001 fe89 	bl	1a002174 <uartReadByte>
1a000462:	4603      	mov	r3, r0
1a000464:	b1b8      	cbz	r0, 1a000496 <readCommandAndValue+0x56>
      delay(10);
1a000466:	200a      	movs	r0, #10
1a000468:	2100      	movs	r1, #0
1a00046a:	f001 ffad 	bl	1a0023c8 <delay>
      if (data == '=')
1a00046e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000472:	2b3d      	cmp	r3, #61	; 0x3d
1a000474:	d0ef      	beq.n	1a000456 <readCommandAndValue+0x16>
      }
      else if (data == ';')
1a000476:	2b3b      	cmp	r3, #59	; 0x3b
1a000478:	d007      	beq.n	1a00048a <readCommandAndValue+0x4a>
        return 1; // Successfully read a command and value
      }
      else
      {
        // Append the character to the appropriate buffer
        if (isReadingValue)
1a00047a:	b184      	cbz	r4, 1a00049e <readCommandAndValue+0x5e>
        {
          if (valueIndex < valueMaxLength - 1)
1a00047c:	1e7a      	subs	r2, r7, #1
1a00047e:	42aa      	cmp	r2, r5
1a000480:	ddea      	ble.n	1a000458 <readCommandAndValue+0x18>
          {
            value[valueIndex++] = data;
1a000482:	f809 3005 	strb.w	r3, [r9, r5]
1a000486:	3501      	adds	r5, #1
1a000488:	e7e6      	b.n	1a000458 <readCommandAndValue+0x18>
        command[commandIndex] = '\0';
1a00048a:	2300      	movs	r3, #0
1a00048c:	f80a 3006 	strb.w	r3, [sl, r6]
        value[valueIndex] = '\0';
1a000490:	f809 3005 	strb.w	r3, [r9, r5]
        return 1; // Successfully read a command and value
1a000494:	2301      	movs	r3, #1
    {
      // An error occurred, return false
      return 0;
    }
  }
}
1a000496:	4618      	mov	r0, r3
1a000498:	b002      	add	sp, #8
1a00049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (commandIndex < commandMaxLength - 1)
1a00049e:	f108 32ff 	add.w	r2, r8, #4294967295
1a0004a2:	42b2      	cmp	r2, r6
1a0004a4:	ddd8      	ble.n	1a000458 <readCommandAndValue+0x18>
            command[commandIndex++] = data;
1a0004a6:	f80a 3006 	strb.w	r3, [sl, r6]
1a0004aa:	3601      	adds	r6, #1
1a0004ac:	e7d4      	b.n	1a000458 <readCommandAndValue+0x18>
1a0004ae:	Address 0x1a0004ae is out of bounds.


1a0004b0 <hm10bleTest>:

bool_t hm10bleTest(int32_t uart)
{
1a0004b0:	b510      	push	{r4, lr}
1a0004b2:	b082      	sub	sp, #8
  uartWriteString(uart, "AT\r\n");
1a0004b4:	b2c4      	uxtb	r4, r0
1a0004b6:	4908      	ldr	r1, [pc, #32]	; (1a0004d8 <hm10bleTest+0x28>)
1a0004b8:	4620      	mov	r0, r4
1a0004ba:	f001 fed4 	bl	1a002266 <uartWriteString>
  return waitForReceiveStringOrTimeoutBlocking(uart,
1a0004be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0004c2:	2300      	movs	r3, #0
1a0004c4:	e9cd 2300 	strd	r2, r3, [sp]
1a0004c8:	2204      	movs	r2, #4
1a0004ca:	4904      	ldr	r1, [pc, #16]	; (1a0004dc <hm10bleTest+0x2c>)
1a0004cc:	4620      	mov	r0, r4
1a0004ce:	f001 fea0 	bl	1a002212 <waitForReceiveStringOrTimeoutBlocking>
                                               "OK\r\n", strlen("OK\r\n"),
                                               1000);
}
1a0004d2:	b002      	add	sp, #8
1a0004d4:	bd10      	pop	{r4, pc}
1a0004d6:	bf00      	nop
1a0004d8:	1a004648 	.word	0x1a004648
1a0004dc:	1a004650 	.word	0x1a004650

1a0004e0 <turnLeds>:
{
  uartWriteString(uart, "AT+HELP?\r\n");
}

void turnLeds(int on)
{
1a0004e0:	b508      	push	{r3, lr}
  if (on == 1)
1a0004e2:	2801      	cmp	r0, #1
1a0004e4:	d00c      	beq.n	1a000500 <turnLeds+0x20>
    gpioWrite(BLUE_LED, OFF);
    gpioWrite(GREEN_LED, OFF);
  }
  else
  {
    gpioWrite(RED_LED, ON);
1a0004e6:	2101      	movs	r1, #1
1a0004e8:	200d      	movs	r0, #13
1a0004ea:	f001 fb1d 	bl	1a001b28 <gpioWrite>
    gpioWrite(BLUE_LED, ON);
1a0004ee:	2101      	movs	r1, #1
1a0004f0:	200b      	movs	r0, #11
1a0004f2:	f001 fb19 	bl	1a001b28 <gpioWrite>
    gpioWrite(GREEN_LED, ON);
1a0004f6:	2101      	movs	r1, #1
1a0004f8:	200c      	movs	r0, #12
1a0004fa:	f001 fb15 	bl	1a001b28 <gpioWrite>
  }
}
1a0004fe:	bd08      	pop	{r3, pc}
    gpioWrite(RED_LED, OFF);
1a000500:	2100      	movs	r1, #0
1a000502:	200d      	movs	r0, #13
1a000504:	f001 fb10 	bl	1a001b28 <gpioWrite>
    gpioWrite(BLUE_LED, OFF);
1a000508:	2100      	movs	r1, #0
1a00050a:	200b      	movs	r0, #11
1a00050c:	f001 fb0c 	bl	1a001b28 <gpioWrite>
    gpioWrite(GREEN_LED, OFF);
1a000510:	2100      	movs	r1, #0
1a000512:	200c      	movs	r0, #12
1a000514:	f001 fb08 	bl	1a001b28 <gpioWrite>
1a000518:	e7f1      	b.n	1a0004fe <turnLeds+0x1e>
1a00051a:	Address 0x1a00051a is out of bounds.


1a00051c <readSoilOnTick>:
{
1a00051c:	b570      	push	{r4, r5, r6, lr}
1a00051e:	ed2d 8b02 	vpush	{d8}
1a000522:	b082      	sub	sp, #8
1a000524:	4606      	mov	r6, r0
  if (delayRead(&nb_delay))
1a000526:	4871      	ldr	r0, [pc, #452]	; (1a0006ec <readSoilOnTick+0x1d0>)
1a000528:	f001 ff7a 	bl	1a002420 <delayRead>
1a00052c:	b918      	cbnz	r0, 1a000536 <readSoilOnTick+0x1a>
}
1a00052e:	b002      	add	sp, #8
1a000530:	ecbd 8b02 	vpop	{d8}
1a000534:	bd70      	pop	{r4, r5, r6, pc}
    uint16_t muestra = adcRead(adc);
1a000536:	b2f6      	uxtb	r6, r6
1a000538:	4630      	mov	r0, r6
1a00053a:	f001 fb87 	bl	1a001c4c <adcRead>
1a00053e:	4605      	mov	r5, r0
    uint32_t distanceInCms = ultrasonicSensorGetDistance(ULTRASONIC_SENSOR_0, CM);
1a000540:	2100      	movs	r1, #0
1a000542:	4608      	mov	r0, r1
1a000544:	f002 f8a4 	bl	1a002690 <ultrasonicSensorGetDistance>
1a000548:	eefc 7ac0 	vcvt.u32.f32	s15, s0
1a00054c:	ee17 4a90 	vmov	r4, s15
    itoa(muestra, uartBuff, 10); /* 10 significa decimal */
1a000550:	220a      	movs	r2, #10
1a000552:	4967      	ldr	r1, [pc, #412]	; (1a0006f0 <readSoilOnTick+0x1d4>)
1a000554:	4628      	mov	r0, r5
1a000556:	f7ff ff21 	bl	1a00039c <itoa>
    float porcentaje = calculateHumidityPercentage(muestra);
1a00055a:	4628      	mov	r0, r5
1a00055c:	f7ff feec 	bl	1a000338 <calculateHumidityPercentage>
1a000560:	eeb0 8a40 	vmov.f32	s16, s0
    sendTo(UART_BLUETOOTH, (int)distanceInCms, (int)porcentaje, "false");
1a000564:	eefd 7ac0 	vcvt.s32.f32	s15, s0
1a000568:	edcd 7a01 	vstr	s15, [sp, #4]
1a00056c:	4d61      	ldr	r5, [pc, #388]	; (1a0006f4 <readSoilOnTick+0x1d8>)
1a00056e:	462b      	mov	r3, r5
1a000570:	ee17 2a90 	vmov	r2, s15
1a000574:	4621      	mov	r1, r4
1a000576:	2005      	movs	r0, #5
1a000578:	f7ff fec2 	bl	1a000300 <sendTo>
    sendTo(UART_PC, (int)distanceInCms, (int)porcentaje, "false");
1a00057c:	462b      	mov	r3, r5
1a00057e:	9a01      	ldr	r2, [sp, #4]
1a000580:	4621      	mov	r1, r4
1a000582:	2003      	movs	r0, #3
1a000584:	f7ff febc 	bl	1a000300 <sendTo>
    uartWriteString(UART_PC, "\r\n");
1a000588:	495b      	ldr	r1, [pc, #364]	; (1a0006f8 <readSoilOnTick+0x1dc>)
1a00058a:	2003      	movs	r0, #3
1a00058c:	f001 fe6b 	bl	1a002266 <uartWriteString>
    if (porcentaje < min_humidity)
1a000590:	4b5a      	ldr	r3, [pc, #360]	; (1a0006fc <readSoilOnTick+0x1e0>)
1a000592:	781b      	ldrb	r3, [r3, #0]
1a000594:	ee07 3a90 	vmov	s15, r3
1a000598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a00059c:	eef4 7ac8 	vcmpe.f32	s15, s16
1a0005a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0005a4:	f340 8099 	ble.w	1a0006da <readSoilOnTick+0x1be>
      if (distanceInCms < recipient_height)
1a0005a8:	4b55      	ldr	r3, [pc, #340]	; (1a000700 <readSoilOnTick+0x1e4>)
1a0005aa:	781b      	ldrb	r3, [r3, #0]
1a0005ac:	42a3      	cmp	r3, r4
1a0005ae:	f240 808c 	bls.w	1a0006ca <readSoilOnTick+0x1ae>
        while (porcentaje < min_humidity && distanceInCms < recipient_height)
1a0005b2:	4b52      	ldr	r3, [pc, #328]	; (1a0006fc <readSoilOnTick+0x1e0>)
1a0005b4:	781b      	ldrb	r3, [r3, #0]
1a0005b6:	ee07 3a90 	vmov	s15, r3
1a0005ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0005be:	eef4 7ac8 	vcmpe.f32	s15, s16
1a0005c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0005c6:	dd3e      	ble.n	1a000646 <readSoilOnTick+0x12a>
1a0005c8:	4b4d      	ldr	r3, [pc, #308]	; (1a000700 <readSoilOnTick+0x1e4>)
1a0005ca:	781b      	ldrb	r3, [r3, #0]
1a0005cc:	42a3      	cmp	r3, r4
1a0005ce:	d93a      	bls.n	1a000646 <readSoilOnTick+0x12a>
          muestra = adcRead(adc);
1a0005d0:	4630      	mov	r0, r6
1a0005d2:	f001 fb3b 	bl	1a001c4c <adcRead>
1a0005d6:	4604      	mov	r4, r0
          itoa(muestra, uartBuff, 10); /* 10 significa decimal */
1a0005d8:	220a      	movs	r2, #10
1a0005da:	4945      	ldr	r1, [pc, #276]	; (1a0006f0 <readSoilOnTick+0x1d4>)
1a0005dc:	f7ff fede 	bl	1a00039c <itoa>
          porcentaje = calculateHumidityPercentage(muestra);
1a0005e0:	4620      	mov	r0, r4
1a0005e2:	f7ff fea9 	bl	1a000338 <calculateHumidityPercentage>
1a0005e6:	eeb0 8a40 	vmov.f32	s16, s0
          distanceInCms = ultrasonicSensorGetDistance(ULTRASONIC_SENSOR_0, CM);
1a0005ea:	2100      	movs	r1, #0
1a0005ec:	4608      	mov	r0, r1
1a0005ee:	f002 f84f 	bl	1a002690 <ultrasonicSensorGetDistance>
1a0005f2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
1a0005f6:	ee17 4a90 	vmov	r4, s15
          gpioWrite(WATER_PIN, ON);
1a0005fa:	2101      	movs	r1, #1
1a0005fc:	200e      	movs	r0, #14
1a0005fe:	f001 fa93 	bl	1a001b28 <gpioWrite>
          sendTo(UART_BLUETOOTH, (int)distanceInCms, (int)porcentaje, "true");
1a000602:	eefd 7ac8 	vcvt.s32.f32	s15, s16
1a000606:	edcd 7a01 	vstr	s15, [sp, #4]
1a00060a:	4d3e      	ldr	r5, [pc, #248]	; (1a000704 <readSoilOnTick+0x1e8>)
1a00060c:	462b      	mov	r3, r5
1a00060e:	ee17 2a90 	vmov	r2, s15
1a000612:	4621      	mov	r1, r4
1a000614:	2005      	movs	r0, #5
1a000616:	f7ff fe73 	bl	1a000300 <sendTo>
          sendTo(UART_PC, (int)distanceInCms, (int)porcentaje, "true");
1a00061a:	462b      	mov	r3, r5
1a00061c:	9a01      	ldr	r2, [sp, #4]
1a00061e:	4621      	mov	r1, r4
1a000620:	2003      	movs	r0, #3
1a000622:	f7ff fe6d 	bl	1a000300 <sendTo>
          uartWriteString(UART_PC, "\r\n");
1a000626:	4934      	ldr	r1, [pc, #208]	; (1a0006f8 <readSoilOnTick+0x1dc>)
1a000628:	2003      	movs	r0, #3
1a00062a:	f001 fe1c 	bl	1a002266 <uartWriteString>
          turnLeds(0);
1a00062e:	2000      	movs	r0, #0
1a000630:	f7ff ff56 	bl	1a0004e0 <turnLeds>
          gpioWrite(GREEN_LED, 0);
1a000634:	2100      	movs	r1, #0
1a000636:	200c      	movs	r0, #12
1a000638:	f001 fa76 	bl	1a001b28 <gpioWrite>
          gpioWrite(RED_LED, 0);
1a00063c:	2100      	movs	r1, #0
1a00063e:	200d      	movs	r0, #13
1a000640:	f001 fa72 	bl	1a001b28 <gpioWrite>
1a000644:	e7b5      	b.n	1a0005b2 <readSoilOnTick+0x96>
        gpioWrite(WATER_PIN, OFF);
1a000646:	2100      	movs	r1, #0
1a000648:	200e      	movs	r0, #14
1a00064a:	f001 fa6d 	bl	1a001b28 <gpioWrite>
        if (distanceInCms > 6)
1a00064e:	2c06      	cmp	r4, #6
1a000650:	d91d      	bls.n	1a00068e <readSoilOnTick+0x172>
          turnLeds(0);
1a000652:	2000      	movs	r0, #0
1a000654:	f7ff ff44 	bl	1a0004e0 <turnLeds>
          gpioWrite(GREEN_LED, 0);
1a000658:	2100      	movs	r1, #0
1a00065a:	200c      	movs	r0, #12
1a00065c:	f001 fa64 	bl	1a001b28 <gpioWrite>
          sendTo(UART_BLUETOOTH, (int)distanceInCms, (int)porcentaje, "false");
1a000660:	eefd 7ac8 	vcvt.s32.f32	s15, s16
1a000664:	edcd 7a01 	vstr	s15, [sp, #4]
1a000668:	4d22      	ldr	r5, [pc, #136]	; (1a0006f4 <readSoilOnTick+0x1d8>)
1a00066a:	462b      	mov	r3, r5
1a00066c:	ee17 2a90 	vmov	r2, s15
1a000670:	4621      	mov	r1, r4
1a000672:	2005      	movs	r0, #5
1a000674:	f7ff fe44 	bl	1a000300 <sendTo>
          sendTo(UART_PC, (int)distanceInCms, (int)porcentaje, "false");
1a000678:	462b      	mov	r3, r5
1a00067a:	9a01      	ldr	r2, [sp, #4]
1a00067c:	4621      	mov	r1, r4
1a00067e:	2003      	movs	r0, #3
1a000680:	f7ff fe3e 	bl	1a000300 <sendTo>
          uartWriteString(UART_PC, "\r\n");
1a000684:	491c      	ldr	r1, [pc, #112]	; (1a0006f8 <readSoilOnTick+0x1dc>)
1a000686:	2003      	movs	r0, #3
1a000688:	f001 fded 	bl	1a002266 <uartWriteString>
1a00068c:	e74f      	b.n	1a00052e <readSoilOnTick+0x12>
          turnLeds(0);
1a00068e:	2000      	movs	r0, #0
1a000690:	f7ff ff26 	bl	1a0004e0 <turnLeds>
          gpioWrite(RED_LED, 0);
1a000694:	2100      	movs	r1, #0
1a000696:	200d      	movs	r0, #13
1a000698:	f001 fa46 	bl	1a001b28 <gpioWrite>
          sendTo(UART_BLUETOOTH, (int)distanceInCms, (int)porcentaje, "false");
1a00069c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
1a0006a0:	edcd 7a01 	vstr	s15, [sp, #4]
1a0006a4:	4d13      	ldr	r5, [pc, #76]	; (1a0006f4 <readSoilOnTick+0x1d8>)
1a0006a6:	462b      	mov	r3, r5
1a0006a8:	ee17 2a90 	vmov	r2, s15
1a0006ac:	4621      	mov	r1, r4
1a0006ae:	2005      	movs	r0, #5
1a0006b0:	f7ff fe26 	bl	1a000300 <sendTo>
          sendTo(UART_PC, (int)distanceInCms, (int)porcentaje, "false");
1a0006b4:	462b      	mov	r3, r5
1a0006b6:	9a01      	ldr	r2, [sp, #4]
1a0006b8:	4621      	mov	r1, r4
1a0006ba:	2003      	movs	r0, #3
1a0006bc:	f7ff fe20 	bl	1a000300 <sendTo>
          uartWriteString(UART_PC, "\r\n");
1a0006c0:	490d      	ldr	r1, [pc, #52]	; (1a0006f8 <readSoilOnTick+0x1dc>)
1a0006c2:	2003      	movs	r0, #3
1a0006c4:	f001 fdcf 	bl	1a002266 <uartWriteString>
1a0006c8:	e731      	b.n	1a00052e <readSoilOnTick+0x12>
        turnLeds(0);
1a0006ca:	2000      	movs	r0, #0
1a0006cc:	f7ff ff08 	bl	1a0004e0 <turnLeds>
        gpioWrite(RED_LED, 0);
1a0006d0:	2100      	movs	r1, #0
1a0006d2:	200d      	movs	r0, #13
1a0006d4:	f001 fa28 	bl	1a001b28 <gpioWrite>
1a0006d8:	e729      	b.n	1a00052e <readSoilOnTick+0x12>
      turnLeds(0);
1a0006da:	2000      	movs	r0, #0
1a0006dc:	f7ff ff00 	bl	1a0004e0 <turnLeds>
      gpioWrite(GREEN_LED, 0);
1a0006e0:	2100      	movs	r1, #0
1a0006e2:	200c      	movs	r0, #12
1a0006e4:	f001 fa20 	bl	1a001b28 <gpioWrite>
}
1a0006e8:	e721      	b.n	1a00052e <readSoilOnTick+0x12>
1a0006ea:	bf00      	nop
1a0006ec:	10000190 	.word	0x10000190
1a0006f0:	10000140 	.word	0x10000140
1a0006f4:	1a00486c 	.word	0x1a00486c
1a0006f8:	1a0046b4 	.word	0x1a0046b4
1a0006fc:	10000000 	.word	0x10000000
1a000700:	10000001 	.word	0x10000001
1a000704:	1a004874 	.word	0x1a004874

1a000708 <main>:
{
1a000708:	b500      	push	{lr}
1a00070a:	b0b3      	sub	sp, #204	; 0xcc
  boardConfig();
1a00070c:	f001 fddc 	bl	1a0022c8 <boardInit>
  delay(1);
1a000710:	2001      	movs	r0, #1
1a000712:	2100      	movs	r1, #0
1a000714:	f001 fe58 	bl	1a0023c8 <delay>
  tickConfig(1);
1a000718:	2001      	movs	r0, #1
1a00071a:	2100      	movs	r1, #0
1a00071c:	f001 fc1a 	bl	1a001f54 <tickInit>
  adcConfig(ADC_ENABLE); /* ADC */
1a000720:	2000      	movs	r0, #0
1a000722:	f001 fa37 	bl	1a001b94 <adcInit>
  delay(50);
1a000726:	2032      	movs	r0, #50	; 0x32
1a000728:	2100      	movs	r1, #0
1a00072a:	f001 fe4d 	bl	1a0023c8 <delay>
  uartConfig(UART_PC, BAUDRATE);
1a00072e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a000732:	2003      	movs	r0, #3
1a000734:	f001 fce0 	bl	1a0020f8 <uartInit>
  delay(50);
1a000738:	2032      	movs	r0, #50	; 0x32
1a00073a:	2100      	movs	r1, #0
1a00073c:	f001 fe44 	bl	1a0023c8 <delay>
  uartWriteString(UART_PC, "UART_PC configurada.\r\n");
1a000740:	4952      	ldr	r1, [pc, #328]	; (1a00088c <main+0x184>)
1a000742:	2003      	movs	r0, #3
1a000744:	f001 fd8f 	bl	1a002266 <uartWriteString>
  delayInit(&nb_delay, 1000);
1a000748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00074c:	2300      	movs	r3, #0
1a00074e:	4850      	ldr	r0, [pc, #320]	; (1a000890 <main+0x188>)
1a000750:	f001 fe56 	bl	1a002400 <delayInit>
  initGpios();
1a000754:	f7ff fe52 	bl	1a0003fc <initGpios>
  uartConfig(UART_BLUETOOTH, BAUDRATE);
1a000758:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a00075c:	2005      	movs	r0, #5
1a00075e:	f001 fccb 	bl	1a0020f8 <uartInit>
  delay(50);
1a000762:	2032      	movs	r0, #50	; 0x32
1a000764:	2100      	movs	r1, #0
1a000766:	f001 fe2f 	bl	1a0023c8 <delay>
  uartWriteString(UART_PC, "UART_BLUETOOTH para modulo Bluetooth configurada.\r\n");
1a00076a:	494a      	ldr	r1, [pc, #296]	; (1a000894 <main+0x18c>)
1a00076c:	2003      	movs	r0, #3
1a00076e:	f001 fd7a 	bl	1a002266 <uartWriteString>
  ultrasonicSensorConfig(ULTRASONIC_SENSOR_0, ULTRASONIC_SENSOR_ENABLE);
1a000772:	2100      	movs	r1, #0
1a000774:	4608      	mov	r0, r1
1a000776:	f001 ff35 	bl	1a0025e4 <ultrasonicSensorInit>
  delay(50);
1a00077a:	2032      	movs	r0, #50	; 0x32
1a00077c:	2100      	movs	r1, #0
1a00077e:	f001 fe23 	bl	1a0023c8 <delay>
  uartWriteString(UART_PC, "Testeto si el modulo esta conectado enviando: AT\r\n");
1a000782:	4945      	ldr	r1, [pc, #276]	; (1a000898 <main+0x190>)
1a000784:	2003      	movs	r0, #3
1a000786:	f001 fd6e 	bl	1a002266 <uartWriteString>
  if (hm10bleTest(UART_BLUETOOTH))
1a00078a:	2005      	movs	r0, #5
1a00078c:	f7ff fe90 	bl	1a0004b0 <hm10bleTest>
1a000790:	b120      	cbz	r0, 1a00079c <main+0x94>
    uartWriteString(UART_PC, "Modulo conectado correctamente.\r\n");
1a000792:	4942      	ldr	r1, [pc, #264]	; (1a00089c <main+0x194>)
1a000794:	2003      	movs	r0, #3
1a000796:	f001 fd66 	bl	1a002266 <uartWriteString>
1a00079a:	e039      	b.n	1a000810 <main+0x108>
    uartWriteString(UART_PC, "No funciona.\r\n");
1a00079c:	4940      	ldr	r1, [pc, #256]	; (1a0008a0 <main+0x198>)
1a00079e:	2003      	movs	r0, #3
1a0007a0:	f001 fd61 	bl	1a002266 <uartWriteString>
1a0007a4:	e034      	b.n	1a000810 <main+0x108>
      else if (strcmp((char *)command, "TURN_OFF") == 0)
1a0007a6:	493f      	ldr	r1, [pc, #252]	; (1a0008a4 <main+0x19c>)
1a0007a8:	a819      	add	r0, sp, #100	; 0x64
1a0007aa:	f003 fd02 	bl	1a0041b2 <strcmp>
1a0007ae:	b1e8      	cbz	r0, 1a0007ec <main+0xe4>
      else if (strcmp((char *)command, "CH_T") == 0)
1a0007b0:	493d      	ldr	r1, [pc, #244]	; (1a0008a8 <main+0x1a0>)
1a0007b2:	a819      	add	r0, sp, #100	; 0x64
1a0007b4:	f003 fcfd 	bl	1a0041b2 <strcmp>
1a0007b8:	2800      	cmp	r0, #0
1a0007ba:	d047      	beq.n	1a00084c <main+0x144>
      else if (strcmp((char *)command, "CH_H") == 0)
1a0007bc:	493b      	ldr	r1, [pc, #236]	; (1a0008ac <main+0x1a4>)
1a0007be:	a819      	add	r0, sp, #100	; 0x64
1a0007c0:	f003 fcf7 	bl	1a0041b2 <strcmp>
1a0007c4:	2800      	cmp	r0, #0
1a0007c6:	d051      	beq.n	1a00086c <main+0x164>
      else if (strcmp((char *)command, "CH_D") == 0)
1a0007c8:	4939      	ldr	r1, [pc, #228]	; (1a0008b0 <main+0x1a8>)
1a0007ca:	a819      	add	r0, sp, #100	; 0x64
1a0007cc:	f003 fcf1 	bl	1a0041b2 <strcmp>
1a0007d0:	2800      	cmp	r0, #0
1a0007d2:	d156      	bne.n	1a000882 <main+0x17a>
        recipient_height = atoi((char *)value) - 3;
1a0007d4:	4668      	mov	r0, sp
1a0007d6:	f002 fd2d 	bl	1a003234 <atoi>
1a0007da:	1ec2      	subs	r2, r0, #3
1a0007dc:	b2d2      	uxtb	r2, r2
1a0007de:	4b35      	ldr	r3, [pc, #212]	; (1a0008b4 <main+0x1ac>)
1a0007e0:	701a      	strb	r2, [r3, #0]
        stdioPrintf(UART_PC, "Cambia el valor de recipient_height a: %d \r\n", recipient_height);
1a0007e2:	4935      	ldr	r1, [pc, #212]	; (1a0008b8 <main+0x1b0>)
1a0007e4:	2003      	movs	r0, #3
1a0007e6:	f001 fdc7 	bl	1a002378 <stdioPrintf>
1a0007ea:	e009      	b.n	1a000800 <main+0xf8>
        printf("Adentro de TURN OFF \r\n");
1a0007ec:	4833      	ldr	r0, [pc, #204]	; (1a0008bc <main+0x1b4>)
1a0007ee:	f003 fc95 	bl	1a00411c <puts>
        turnLeds(0);
1a0007f2:	2000      	movs	r0, #0
1a0007f4:	f7ff fe74 	bl	1a0004e0 <turnLeds>
        gpioWrite(WATER_PIN, OFF); // Apago la bomba
1a0007f8:	2100      	movs	r1, #0
1a0007fa:	200e      	movs	r0, #14
1a0007fc:	f001 f994 	bl	1a001b28 <gpioWrite>
    tickCallbackSet(readSoilOnTick, (void *)CH1);
1a000800:	2100      	movs	r1, #0
1a000802:	482f      	ldr	r0, [pc, #188]	; (1a0008c0 <main+0x1b8>)
1a000804:	f001 fb8a 	bl	1a001f1c <tickCallbackSet>
    delay(50);
1a000808:	2032      	movs	r0, #50	; 0x32
1a00080a:	2100      	movs	r1, #0
1a00080c:	f001 fddc 	bl	1a0023c8 <delay>
    if (readCommandAndValue(command, value, sizeof(command), sizeof(value)))
1a000810:	2364      	movs	r3, #100	; 0x64
1a000812:	461a      	mov	r2, r3
1a000814:	4669      	mov	r1, sp
1a000816:	eb0d 0003 	add.w	r0, sp, r3
1a00081a:	f7ff fe11 	bl	1a000440 <readCommandAndValue>
1a00081e:	2800      	cmp	r0, #0
1a000820:	d0ee      	beq.n	1a000800 <main+0xf8>
      printf("Received command: %s\r\n", command);
1a000822:	a919      	add	r1, sp, #100	; 0x64
1a000824:	4827      	ldr	r0, [pc, #156]	; (1a0008c4 <main+0x1bc>)
1a000826:	f003 fbf3 	bl	1a004010 <iprintf>
      if (strcmp((char *)command, "TURN_ON") == 0)
1a00082a:	4927      	ldr	r1, [pc, #156]	; (1a0008c8 <main+0x1c0>)
1a00082c:	a819      	add	r0, sp, #100	; 0x64
1a00082e:	f003 fcc0 	bl	1a0041b2 <strcmp>
1a000832:	2800      	cmp	r0, #0
1a000834:	d1b7      	bne.n	1a0007a6 <main+0x9e>
        printf("Adentro de TURN ON \r\n");
1a000836:	4825      	ldr	r0, [pc, #148]	; (1a0008cc <main+0x1c4>)
1a000838:	f003 fc70 	bl	1a00411c <puts>
        turnLeds(1);
1a00083c:	2001      	movs	r0, #1
1a00083e:	f7ff fe4f 	bl	1a0004e0 <turnLeds>
        gpioWrite(WATER_PIN, ON); // Prendo la bomba
1a000842:	2101      	movs	r1, #1
1a000844:	200e      	movs	r0, #14
1a000846:	f001 f96f 	bl	1a001b28 <gpioWrite>
1a00084a:	e7d9      	b.n	1a000800 <main+0xf8>
        scan_period = atoi((char *)value);
1a00084c:	4668      	mov	r0, sp
1a00084e:	f002 fcf1 	bl	1a003234 <atoi>
1a000852:	4602      	mov	r2, r0
1a000854:	4c1e      	ldr	r4, [pc, #120]	; (1a0008d0 <main+0x1c8>)
1a000856:	6020      	str	r0, [r4, #0]
        delayWrite(&nb_delay, scan_period);
1a000858:	2300      	movs	r3, #0
1a00085a:	480d      	ldr	r0, [pc, #52]	; (1a000890 <main+0x188>)
1a00085c:	f001 fe00 	bl	1a002460 <delayWrite>
        stdioPrintf(UART_PC, "Cambia el valor de scan_period a: %d \r\n", scan_period);
1a000860:	6822      	ldr	r2, [r4, #0]
1a000862:	491c      	ldr	r1, [pc, #112]	; (1a0008d4 <main+0x1cc>)
1a000864:	2003      	movs	r0, #3
1a000866:	f001 fd87 	bl	1a002378 <stdioPrintf>
1a00086a:	e7c9      	b.n	1a000800 <main+0xf8>
        min_humidity = atoi((char *)value);
1a00086c:	4668      	mov	r0, sp
1a00086e:	f002 fce1 	bl	1a003234 <atoi>
1a000872:	b2c2      	uxtb	r2, r0
1a000874:	4b18      	ldr	r3, [pc, #96]	; (1a0008d8 <main+0x1d0>)
1a000876:	701a      	strb	r2, [r3, #0]
        stdioPrintf(UART_PC, "Cambia el valor de min_humidity a: %d  \r\n", min_humidity);
1a000878:	4918      	ldr	r1, [pc, #96]	; (1a0008dc <main+0x1d4>)
1a00087a:	2003      	movs	r0, #3
1a00087c:	f001 fd7c 	bl	1a002378 <stdioPrintf>
1a000880:	e7be      	b.n	1a000800 <main+0xf8>
        printf("Received unknown command: %s\r\n", command);
1a000882:	a919      	add	r1, sp, #100	; 0x64
1a000884:	4816      	ldr	r0, [pc, #88]	; (1a0008e0 <main+0x1d8>)
1a000886:	f003 fbc3 	bl	1a004010 <iprintf>
1a00088a:	e7b9      	b.n	1a000800 <main+0xf8>
1a00088c:	1a0046a0 	.word	0x1a0046a0
1a000890:	10000190 	.word	0x10000190
1a000894:	1a0046b8 	.word	0x1a0046b8
1a000898:	1a0046ec 	.word	0x1a0046ec
1a00089c:	1a004720 	.word	0x1a004720
1a0008a0:	1a004744 	.word	0x1a004744
1a0008a4:	1a00478c 	.word	0x1a00478c
1a0008a8:	1a0047b0 	.word	0x1a0047b0
1a0008ac:	1a0047e0 	.word	0x1a0047e0
1a0008b0:	1a004814 	.word	0x1a004814
1a0008b4:	10000001 	.word	0x10000001
1a0008b8:	1a00481c 	.word	0x1a00481c
1a0008bc:	1a004798 	.word	0x1a004798
1a0008c0:	1a00051d 	.word	0x1a00051d
1a0008c4:	1a004754 	.word	0x1a004754
1a0008c8:	1a00476c 	.word	0x1a00476c
1a0008cc:	1a004774 	.word	0x1a004774
1a0008d0:	10000004 	.word	0x10000004
1a0008d4:	1a0047b8 	.word	0x1a0047b8
1a0008d8:	10000000 	.word	0x10000000
1a0008dc:	1a0047e8 	.word	0x1a0047e8
1a0008e0:	1a00484c 	.word	0x1a00484c

1a0008e4 <initialise_monitor_handles>:
}
1a0008e4:	4770      	bx	lr
1a0008e6:	Address 0x1a0008e6 is out of bounds.


1a0008e8 <Reset_Handler>:
void Reset_Handler(void) {
1a0008e8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0008ea:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0008ec:	4b19      	ldr	r3, [pc, #100]	; (1a000954 <Reset_Handler+0x6c>)
1a0008ee:	4a1a      	ldr	r2, [pc, #104]	; (1a000958 <Reset_Handler+0x70>)
1a0008f0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0008f2:	3304      	adds	r3, #4
1a0008f4:	4a19      	ldr	r2, [pc, #100]	; (1a00095c <Reset_Handler+0x74>)
1a0008f6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008f8:	2300      	movs	r3, #0
1a0008fa:	e005      	b.n	1a000908 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0008fc:	4a18      	ldr	r2, [pc, #96]	; (1a000960 <Reset_Handler+0x78>)
1a0008fe:	f04f 31ff 	mov.w	r1, #4294967295
1a000902:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000906:	3301      	adds	r3, #1
1a000908:	2b07      	cmp	r3, #7
1a00090a:	d9f7      	bls.n	1a0008fc <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00090c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00090e:	4b15      	ldr	r3, [pc, #84]	; (1a000964 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000910:	e007      	b.n	1a000922 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000912:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000916:	689a      	ldr	r2, [r3, #8]
1a000918:	6859      	ldr	r1, [r3, #4]
1a00091a:	6818      	ldr	r0, [r3, #0]
1a00091c:	f7ff fc35 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000920:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000922:	4a11      	ldr	r2, [pc, #68]	; (1a000968 <Reset_Handler+0x80>)
1a000924:	4293      	cmp	r3, r2
1a000926:	d3f4      	bcc.n	1a000912 <Reset_Handler+0x2a>
1a000928:	e006      	b.n	1a000938 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00092a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00092c:	6859      	ldr	r1, [r3, #4]
1a00092e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000932:	f7ff fc39 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000936:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000938:	4a0c      	ldr	r2, [pc, #48]	; (1a00096c <Reset_Handler+0x84>)
1a00093a:	4293      	cmp	r3, r2
1a00093c:	d3f5      	bcc.n	1a00092a <Reset_Handler+0x42>
    SystemInit();
1a00093e:	f000 ffd9 	bl	1a0018f4 <SystemInit>
    __libc_init_array();
1a000942:	f002 ffa7 	bl	1a003894 <__libc_init_array>
    initialise_monitor_handles();
1a000946:	f7ff ffcd 	bl	1a0008e4 <initialise_monitor_handles>
    main();
1a00094a:	f7ff fedd 	bl	1a000708 <main>
        __asm__ volatile("wfi");
1a00094e:	bf30      	wfi
1a000950:	e7fd      	b.n	1a00094e <Reset_Handler+0x66>
1a000952:	bf00      	nop
1a000954:	40053100 	.word	0x40053100
1a000958:	10df1000 	.word	0x10df1000
1a00095c:	01dff7ff 	.word	0x01dff7ff
1a000960:	e000e280 	.word	0xe000e280
1a000964:	1a000114 	.word	0x1a000114
1a000968:	1a000150 	.word	0x1a000150
1a00096c:	1a000178 	.word	0x1a000178

1a000970 <_fini>:
void _fini(void) {}
1a000970:	4770      	bx	lr

1a000972 <_init>:
void _init(void) {}
1a000972:	4770      	bx	lr

1a000974 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000974:	2309      	movs	r3, #9
1a000976:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000978:	f04f 30ff 	mov.w	r0, #4294967295
1a00097c:	4770      	bx	lr

1a00097e <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00097e:	2358      	movs	r3, #88	; 0x58
1a000980:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000982:	f04f 30ff 	mov.w	r0, #4294967295
1a000986:	4770      	bx	lr

1a000988 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000988:	2902      	cmp	r1, #2
1a00098a:	d904      	bls.n	1a000996 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00098c:	2309      	movs	r3, #9
1a00098e:	6003      	str	r3, [r0, #0]
       return -1;
1a000990:	f04f 30ff 	mov.w	r0, #4294967295
1a000994:	4770      	bx	lr
       return 1;
1a000996:	2001      	movs	r0, #1
   }
}
1a000998:	4770      	bx	lr

1a00099a <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00099a:	2358      	movs	r3, #88	; 0x58
1a00099c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00099e:	f04f 30ff 	mov.w	r0, #4294967295
1a0009a2:	4770      	bx	lr

1a0009a4 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0009a4:	2902      	cmp	r1, #2
1a0009a6:	d81f      	bhi.n	1a0009e8 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0009a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0009ac:	461d      	mov	r5, r3
1a0009ae:	4617      	mov	r7, r2
1a0009b0:	4606      	mov	r6, r0
  size_t i = 0;
1a0009b2:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0009b4:	42ac      	cmp	r4, r5
1a0009b6:	d211      	bcs.n	1a0009dc <_read_r+0x38>
         int c = __stdio_getchar();
1a0009b8:	f000 f987 	bl	1a000cca <__stdio_getchar>
         if( c != -1 ){
1a0009bc:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0009c0:	d0f8      	beq.n	1a0009b4 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0009c2:	f104 0801 	add.w	r8, r4, #1
1a0009c6:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0009c8:	280d      	cmp	r0, #13
1a0009ca:	d003      	beq.n	1a0009d4 <_read_r+0x30>
1a0009cc:	280a      	cmp	r0, #10
1a0009ce:	d001      	beq.n	1a0009d4 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0009d0:	4644      	mov	r4, r8
1a0009d2:	e7ef      	b.n	1a0009b4 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0009d4:	f000 f979 	bl	1a000cca <__stdio_getchar>
               return i;
1a0009d8:	4640      	mov	r0, r8
1a0009da:	e003      	b.n	1a0009e4 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0009dc:	2313      	movs	r3, #19
1a0009de:	6033      	str	r3, [r6, #0]
      return -1;
1a0009e0:	f04f 30ff 	mov.w	r0, #4294967295
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0009e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0009e8:	2313      	movs	r3, #19
1a0009ea:	6003      	str	r3, [r0, #0]
      return -1;
1a0009ec:	f04f 30ff 	mov.w	r0, #4294967295
}
1a0009f0:	4770      	bx	lr

1a0009f2 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0009f2:	2902      	cmp	r1, #2
1a0009f4:	d80c      	bhi.n	1a000a10 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0009f6:	b570      	push	{r4, r5, r6, lr}
1a0009f8:	461d      	mov	r5, r3
1a0009fa:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0009fc:	2400      	movs	r4, #0
1a0009fe:	42ac      	cmp	r4, r5
1a000a00:	d204      	bcs.n	1a000a0c <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000a02:	5d30      	ldrb	r0, [r6, r4]
1a000a04:	f000 f95c 	bl	1a000cc0 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000a08:	3401      	adds	r4, #1
1a000a0a:	e7f8      	b.n	1a0009fe <_write_r+0xc>
       return n;
1a000a0c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000a0e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000a10:	2313      	movs	r3, #19
1a000a12:	6003      	str	r3, [r0, #0]
       return -1;
1a000a14:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000a18:	4770      	bx	lr
1a000a1a:	Address 0x1a000a1a is out of bounds.


1a000a1c <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000a1c:	4b05      	ldr	r3, [pc, #20]	; (1a000a34 <_sbrk_r+0x18>)
1a000a1e:	681b      	ldr	r3, [r3, #0]
1a000a20:	b123      	cbz	r3, 1a000a2c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000a22:	4b04      	ldr	r3, [pc, #16]	; (1a000a34 <_sbrk_r+0x18>)
1a000a24:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000a26:	4401      	add	r1, r0
1a000a28:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000a2a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000a2c:	4b01      	ldr	r3, [pc, #4]	; (1a000a34 <_sbrk_r+0x18>)
1a000a2e:	4a02      	ldr	r2, [pc, #8]	; (1a000a38 <_sbrk_r+0x1c>)
1a000a30:	601a      	str	r2, [r3, #0]
1a000a32:	e7f6      	b.n	1a000a22 <_sbrk_r+0x6>
1a000a34:	1000014c 	.word	0x1000014c
1a000a38:	100001bc 	.word	0x100001bc

1a000a3c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000a3c:	2300      	movs	r3, #0
1a000a3e:	2b1c      	cmp	r3, #28
1a000a40:	d812      	bhi.n	1a000a68 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000a42:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000a44:	4a09      	ldr	r2, [pc, #36]	; (1a000a6c <Board_SetupMuxing+0x30>)
1a000a46:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000a4a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000a4e:	784a      	ldrb	r2, [r1, #1]
1a000a50:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000a52:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000a56:	4906      	ldr	r1, [pc, #24]	; (1a000a70 <Board_SetupMuxing+0x34>)
1a000a58:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000a5c:	3301      	adds	r3, #1
1a000a5e:	2b1c      	cmp	r3, #28
1a000a60:	d9f0      	bls.n	1a000a44 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000a62:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000a66:	4770      	bx	lr
1a000a68:	4770      	bx	lr
1a000a6a:	bf00      	nop
1a000a6c:	1a0048f8 	.word	0x1a0048f8
1a000a70:	40086000 	.word	0x40086000

1a000a74 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000a74:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000a76:	4a17      	ldr	r2, [pc, #92]	; (1a000ad4 <Board_SetupClocking+0x60>)
1a000a78:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000a80:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000a84:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000a88:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000a90:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000a94:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000a98:	2201      	movs	r2, #1
1a000a9a:	490f      	ldr	r1, [pc, #60]	; (1a000ad8 <Board_SetupClocking+0x64>)
1a000a9c:	2006      	movs	r0, #6
1a000a9e:	f000 fac5 	bl	1a00102c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000aa2:	2400      	movs	r4, #0
1a000aa4:	b14c      	cbz	r4, 1a000aba <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000aa6:	4b0b      	ldr	r3, [pc, #44]	; (1a000ad4 <Board_SetupClocking+0x60>)
1a000aa8:	685a      	ldr	r2, [r3, #4]
1a000aaa:	f022 020c 	bic.w	r2, r2, #12
1a000aae:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000ab0:	685a      	ldr	r2, [r3, #4]
1a000ab2:	f042 0203 	orr.w	r2, r2, #3
1a000ab6:	605a      	str	r2, [r3, #4]
}
1a000ab8:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000aba:	4808      	ldr	r0, [pc, #32]	; (1a000adc <Board_SetupClocking+0x68>)
1a000abc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000ac0:	2301      	movs	r3, #1
1a000ac2:	788a      	ldrb	r2, [r1, #2]
1a000ac4:	7849      	ldrb	r1, [r1, #1]
1a000ac6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000aca:	f000 fd87 	bl	1a0015dc <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000ace:	3401      	adds	r4, #1
1a000ad0:	e7e8      	b.n	1a000aa4 <Board_SetupClocking+0x30>
1a000ad2:	bf00      	nop
1a000ad4:	40043000 	.word	0x40043000
1a000ad8:	0c28cb00 	.word	0x0c28cb00
1a000adc:	1a0048f4 	.word	0x1a0048f4

1a000ae0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000ae0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000ae2:	f7ff ffab 	bl	1a000a3c <Board_SetupMuxing>
    Board_SetupClocking();
1a000ae6:	f7ff ffc5 	bl	1a000a74 <Board_SetupClocking>
}
1a000aea:	bd08      	pop	{r3, pc}

1a000aec <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000aec:	2200      	movs	r2, #0
1a000aee:	2a05      	cmp	r2, #5
1a000af0:	d819      	bhi.n	1a000b26 <Board_LED_Init+0x3a>
{
1a000af2:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000af4:	490c      	ldr	r1, [pc, #48]	; (1a000b28 <Board_LED_Init+0x3c>)
1a000af6:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000afa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000afe:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000b00:	4b0a      	ldr	r3, [pc, #40]	; (1a000b2c <Board_LED_Init+0x40>)
1a000b02:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000b06:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000b0a:	2001      	movs	r0, #1
1a000b0c:	40a0      	lsls	r0, r4
1a000b0e:	4301      	orrs	r1, r0
1a000b10:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000b14:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000b18:	2100      	movs	r1, #0
1a000b1a:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000b1c:	3201      	adds	r2, #1
1a000b1e:	2a05      	cmp	r2, #5
1a000b20:	d9e8      	bls.n	1a000af4 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000b22:	bc70      	pop	{r4, r5, r6}
1a000b24:	4770      	bx	lr
1a000b26:	4770      	bx	lr
1a000b28:	1a004978 	.word	0x1a004978
1a000b2c:	400f4000 	.word	0x400f4000

1a000b30 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000b30:	2300      	movs	r3, #0
1a000b32:	2b03      	cmp	r3, #3
1a000b34:	d816      	bhi.n	1a000b64 <Board_TEC_Init+0x34>
{
1a000b36:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000b38:	490b      	ldr	r1, [pc, #44]	; (1a000b68 <Board_TEC_Init+0x38>)
1a000b3a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000b3e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000b42:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000b44:	4c09      	ldr	r4, [pc, #36]	; (1a000b6c <Board_TEC_Init+0x3c>)
1a000b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000b4a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000b4e:	2001      	movs	r0, #1
1a000b50:	40a8      	lsls	r0, r5
1a000b52:	ea21 0100 	bic.w	r1, r1, r0
1a000b56:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000b5a:	3301      	adds	r3, #1
1a000b5c:	2b03      	cmp	r3, #3
1a000b5e:	d9eb      	bls.n	1a000b38 <Board_TEC_Init+0x8>
   }
}
1a000b60:	bc30      	pop	{r4, r5}
1a000b62:	4770      	bx	lr
1a000b64:	4770      	bx	lr
1a000b66:	bf00      	nop
1a000b68:	1a004970 	.word	0x1a004970
1a000b6c:	400f4000 	.word	0x400f4000

1a000b70 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000b70:	2300      	movs	r3, #0
1a000b72:	2b08      	cmp	r3, #8
1a000b74:	d816      	bhi.n	1a000ba4 <Board_GPIO_Init+0x34>
{
1a000b76:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000b78:	490b      	ldr	r1, [pc, #44]	; (1a000ba8 <Board_GPIO_Init+0x38>)
1a000b7a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000b7e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000b82:	784d      	ldrb	r5, [r1, #1]
1a000b84:	4c09      	ldr	r4, [pc, #36]	; (1a000bac <Board_GPIO_Init+0x3c>)
1a000b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000b8a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000b8e:	2001      	movs	r0, #1
1a000b90:	40a8      	lsls	r0, r5
1a000b92:	ea21 0100 	bic.w	r1, r1, r0
1a000b96:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000b9a:	3301      	adds	r3, #1
1a000b9c:	2b08      	cmp	r3, #8
1a000b9e:	d9eb      	bls.n	1a000b78 <Board_GPIO_Init+0x8>
   }
}
1a000ba0:	bc30      	pop	{r4, r5}
1a000ba2:	4770      	bx	lr
1a000ba4:	4770      	bx	lr
1a000ba6:	bf00      	nop
1a000ba8:	1a004984 	.word	0x1a004984
1a000bac:	400f4000 	.word	0x400f4000

1a000bb0 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000bb0:	b510      	push	{r4, lr}
1a000bb2:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000bb4:	4c08      	ldr	r4, [pc, #32]	; (1a000bd8 <Board_ADC_Init+0x28>)
1a000bb6:	4669      	mov	r1, sp
1a000bb8:	4620      	mov	r0, r4
1a000bba:	f000 f987 	bl	1a000ecc <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000bbe:	4a07      	ldr	r2, [pc, #28]	; (1a000bdc <Board_ADC_Init+0x2c>)
1a000bc0:	4669      	mov	r1, sp
1a000bc2:	4620      	mov	r0, r4
1a000bc4:	f000 f9ed 	bl	1a000fa2 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000bc8:	2200      	movs	r2, #0
1a000bca:	4669      	mov	r1, sp
1a000bcc:	4620      	mov	r0, r4
1a000bce:	f000 fa01 	bl	1a000fd4 <Chip_ADC_SetResolution>
}
1a000bd2:	b002      	add	sp, #8
1a000bd4:	bd10      	pop	{r4, pc}
1a000bd6:	bf00      	nop
1a000bd8:	400e3000 	.word	0x400e3000
1a000bdc:	00061a80 	.word	0x00061a80

1a000be0 <Board_SPI_Init>:
{
1a000be0:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000be2:	4c0b      	ldr	r4, [pc, #44]	; (1a000c10 <Board_SPI_Init+0x30>)
1a000be4:	4620      	mov	r0, r4
1a000be6:	f000 f8b7 	bl	1a000d58 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000bea:	6863      	ldr	r3, [r4, #4]
1a000bec:	f023 0304 	bic.w	r3, r3, #4
1a000bf0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000bf2:	6823      	ldr	r3, [r4, #0]
1a000bf4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000bf8:	f043 0307 	orr.w	r3, r3, #7
1a000bfc:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000bfe:	4905      	ldr	r1, [pc, #20]	; (1a000c14 <Board_SPI_Init+0x34>)
1a000c00:	4620      	mov	r0, r4
1a000c02:	f000 f88a 	bl	1a000d1a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000c06:	6863      	ldr	r3, [r4, #4]
1a000c08:	f043 0302 	orr.w	r3, r3, #2
1a000c0c:	6063      	str	r3, [r4, #4]
}
1a000c0e:	bd10      	pop	{r4, pc}
1a000c10:	400c5000 	.word	0x400c5000
1a000c14:	000186a0 	.word	0x000186a0

1a000c18 <Board_I2C_Init>:
{
1a000c18:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000c1a:	2000      	movs	r0, #0
1a000c1c:	f000 f8c8 	bl	1a000db0 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000c20:	4b04      	ldr	r3, [pc, #16]	; (1a000c34 <Board_I2C_Init+0x1c>)
1a000c22:	f640 0208 	movw	r2, #2056	; 0x808
1a000c26:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000c2a:	4903      	ldr	r1, [pc, #12]	; (1a000c38 <Board_I2C_Init+0x20>)
1a000c2c:	2000      	movs	r0, #0
1a000c2e:	f000 f8d1 	bl	1a000dd4 <Chip_I2C_SetClockRate>
}
1a000c32:	bd08      	pop	{r3, pc}
1a000c34:	40086000 	.word	0x40086000
1a000c38:	000f4240 	.word	0x000f4240

1a000c3c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000c3c:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000c3e:	4c07      	ldr	r4, [pc, #28]	; (1a000c5c <Board_Debug_Init+0x20>)
1a000c40:	4620      	mov	r0, r4
1a000c42:	f000 fd9f 	bl	1a001784 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000c46:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000c4a:	4620      	mov	r0, r4
1a000c4c:	f000 fde4 	bl	1a001818 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000c50:	2303      	movs	r3, #3
1a000c52:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000c54:	2301      	movs	r3, #1
1a000c56:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000c58:	bd10      	pop	{r4, pc}
1a000c5a:	bf00      	nop
1a000c5c:	400c1000 	.word	0x400c1000

1a000c60 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000c60:	4b03      	ldr	r3, [pc, #12]	; (1a000c70 <Board_UARTPutChar+0x10>)
1a000c62:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a000c64:	f013 0f20 	tst.w	r3, #32
1a000c68:	d0fa      	beq.n	1a000c60 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a000c6a:	4b01      	ldr	r3, [pc, #4]	; (1a000c70 <Board_UARTPutChar+0x10>)
1a000c6c:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a000c6e:	4770      	bx	lr
1a000c70:	400c1000 	.word	0x400c1000

1a000c74 <Board_UARTGetChar>:
	return pUART->LSR;
1a000c74:	4b05      	ldr	r3, [pc, #20]	; (1a000c8c <Board_UARTGetChar+0x18>)
1a000c76:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000c78:	f013 0f01 	tst.w	r3, #1
1a000c7c:	d003      	beq.n	1a000c86 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000c7e:	4b03      	ldr	r3, [pc, #12]	; (1a000c8c <Board_UARTGetChar+0x18>)
1a000c80:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000c82:	b2c0      	uxtb	r0, r0
1a000c84:	4770      	bx	lr
   }
   return EOF;
1a000c86:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000c8a:	4770      	bx	lr
1a000c8c:	400c1000 	.word	0x400c1000

1a000c90 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000c90:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000c92:	f7ff ffd3 	bl	1a000c3c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000c96:	4809      	ldr	r0, [pc, #36]	; (1a000cbc <Board_Init+0x2c>)
1a000c98:	f000 f8b8 	bl	1a000e0c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000c9c:	f7ff ff68 	bl	1a000b70 <Board_GPIO_Init>
   Board_ADC_Init();
1a000ca0:	f7ff ff86 	bl	1a000bb0 <Board_ADC_Init>
   Board_SPI_Init();
1a000ca4:	f7ff ff9c 	bl	1a000be0 <Board_SPI_Init>
   Board_I2C_Init();
1a000ca8:	f7ff ffb6 	bl	1a000c18 <Board_I2C_Init>

   Board_LED_Init();
1a000cac:	f7ff ff1e 	bl	1a000aec <Board_LED_Init>
   Board_TEC_Init();
1a000cb0:	f7ff ff3e 	bl	1a000b30 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000cb4:	f000 fa66 	bl	1a001184 <SystemCoreClockUpdate>
}
1a000cb8:	bd08      	pop	{r3, pc}
1a000cba:	bf00      	nop
1a000cbc:	400f4000 	.word	0x400f4000

1a000cc0 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a000cc0:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000cc2:	b2c0      	uxtb	r0, r0
1a000cc4:	f7ff ffcc 	bl	1a000c60 <Board_UARTPutChar>
}
1a000cc8:	bd08      	pop	{r3, pc}

1a000cca <__stdio_getchar>:

int __stdio_getchar()
{
1a000cca:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000ccc:	f7ff ffd2 	bl	1a000c74 <Board_UARTGetChar>
}
1a000cd0:	bd08      	pop	{r3, pc}

1a000cd2 <__stdio_init>:

void __stdio_init()
{
1a000cd2:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000cd4:	f7ff ffb2 	bl	1a000c3c <Board_Debug_Init>
1a000cd8:	bd08      	pop	{r3, pc}
1a000cda:	Address 0x1a000cda is out of bounds.


1a000cdc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000cdc:	4b03      	ldr	r3, [pc, #12]	; (1a000cec <Chip_SSP_GetClockIndex+0x10>)
1a000cde:	4298      	cmp	r0, r3
1a000ce0:	d001      	beq.n	1a000ce6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000ce2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000ce4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000ce6:	20a5      	movs	r0, #165	; 0xa5
1a000ce8:	4770      	bx	lr
1a000cea:	bf00      	nop
1a000cec:	400c5000 	.word	0x400c5000

1a000cf0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000cf0:	4b04      	ldr	r3, [pc, #16]	; (1a000d04 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000cf2:	4298      	cmp	r0, r3
1a000cf4:	d002      	beq.n	1a000cfc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000cf6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000cfa:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000cfc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000d00:	4770      	bx	lr
1a000d02:	bf00      	nop
1a000d04:	400c5000 	.word	0x400c5000

1a000d08 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000d08:	6803      	ldr	r3, [r0, #0]
1a000d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000d0e:	0209      	lsls	r1, r1, #8
1a000d10:	b289      	uxth	r1, r1
1a000d12:	4319      	orrs	r1, r3
1a000d14:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000d16:	6102      	str	r2, [r0, #16]
}
1a000d18:	4770      	bx	lr

1a000d1a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000d1a:	b570      	push	{r4, r5, r6, lr}
1a000d1c:	4606      	mov	r6, r0
1a000d1e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000d20:	f7ff ffe6 	bl	1a000cf0 <Chip_SSP_GetPeriphClockIndex>
1a000d24:	f000 fcf2 	bl	1a00170c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000d28:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000d2a:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a000d2e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000d30:	e000      	b.n	1a000d34 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000d32:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a000d34:	42ab      	cmp	r3, r5
1a000d36:	d90b      	bls.n	1a000d50 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000d38:	1c4c      	adds	r4, r1, #1
1a000d3a:	fb02 f304 	mul.w	r3, r2, r4
1a000d3e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000d42:	429d      	cmp	r5, r3
1a000d44:	d2f6      	bcs.n	1a000d34 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000d46:	2cff      	cmp	r4, #255	; 0xff
1a000d48:	d9f3      	bls.n	1a000d32 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000d4a:	3202      	adds	r2, #2
				cr0_div = 0;
1a000d4c:	2100      	movs	r1, #0
1a000d4e:	e7f1      	b.n	1a000d34 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000d50:	4630      	mov	r0, r6
1a000d52:	f7ff ffd9 	bl	1a000d08 <Chip_SSP_SetClockRate>
}
1a000d56:	bd70      	pop	{r4, r5, r6, pc}

1a000d58 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000d58:	b510      	push	{r4, lr}
1a000d5a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000d5c:	f7ff ffbe 	bl	1a000cdc <Chip_SSP_GetClockIndex>
1a000d60:	f000 fca0 	bl	1a0016a4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000d64:	4620      	mov	r0, r4
1a000d66:	f7ff ffc3 	bl	1a000cf0 <Chip_SSP_GetPeriphClockIndex>
1a000d6a:	f000 fc9b 	bl	1a0016a4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000d6e:	6863      	ldr	r3, [r4, #4]
1a000d70:	f023 0304 	bic.w	r3, r3, #4
1a000d74:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000d76:	6823      	ldr	r3, [r4, #0]
1a000d78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000d7c:	f043 0307 	orr.w	r3, r3, #7
1a000d80:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000d82:	4902      	ldr	r1, [pc, #8]	; (1a000d8c <Chip_SSP_Init+0x34>)
1a000d84:	4620      	mov	r0, r4
1a000d86:	f7ff ffc8 	bl	1a000d1a <Chip_SSP_SetBitRate>
}
1a000d8a:	bd10      	pop	{r4, pc}
1a000d8c:	000186a0 	.word	0x000186a0

1a000d90 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000d90:	2901      	cmp	r1, #1
1a000d92:	d109      	bne.n	1a000da8 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000d94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000d98:	0082      	lsls	r2, r0, #2
1a000d9a:	4b04      	ldr	r3, [pc, #16]	; (1a000dac <Chip_I2C_EventHandler+0x1c>)
1a000d9c:	4413      	add	r3, r2
1a000d9e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000da0:	7d13      	ldrb	r3, [r2, #20]
1a000da2:	b2db      	uxtb	r3, r3
1a000da4:	2b04      	cmp	r3, #4
1a000da6:	d0fb      	beq.n	1a000da0 <Chip_I2C_EventHandler+0x10>
}
1a000da8:	4770      	bx	lr
1a000daa:	bf00      	nop
1a000dac:	10000008 	.word	0x10000008

1a000db0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000db0:	b570      	push	{r4, r5, r6, lr}
1a000db2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000db4:	4e06      	ldr	r6, [pc, #24]	; (1a000dd0 <Chip_I2C_Init+0x20>)
1a000db6:	00c4      	lsls	r4, r0, #3
1a000db8:	1a22      	subs	r2, r4, r0
1a000dba:	0093      	lsls	r3, r2, #2
1a000dbc:	4433      	add	r3, r6
1a000dbe:	8898      	ldrh	r0, [r3, #4]
1a000dc0:	f000 fc70 	bl	1a0016a4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000dc4:	1b64      	subs	r4, r4, r5
1a000dc6:	00a3      	lsls	r3, r4, #2
1a000dc8:	58f3      	ldr	r3, [r6, r3]
1a000dca:	226c      	movs	r2, #108	; 0x6c
1a000dcc:	619a      	str	r2, [r3, #24]
}
1a000dce:	bd70      	pop	{r4, r5, r6, pc}
1a000dd0:	10000008 	.word	0x10000008

1a000dd4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000dd8:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000dda:	4e0b      	ldr	r6, [pc, #44]	; (1a000e08 <Chip_I2C_SetClockRate+0x34>)
1a000ddc:	00c5      	lsls	r5, r0, #3
1a000dde:	1a2b      	subs	r3, r5, r0
1a000de0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000de4:	eb06 0308 	add.w	r3, r6, r8
1a000de8:	8898      	ldrh	r0, [r3, #4]
1a000dea:	f000 fc8f 	bl	1a00170c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000dee:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000df2:	f856 3008 	ldr.w	r3, [r6, r8]
1a000df6:	0842      	lsrs	r2, r0, #1
1a000df8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000dfa:	f856 3008 	ldr.w	r3, [r6, r8]
1a000dfe:	691a      	ldr	r2, [r3, #16]
1a000e00:	1a80      	subs	r0, r0, r2
1a000e02:	6158      	str	r0, [r3, #20]
}
1a000e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000e08:	10000008 	.word	0x10000008

1a000e0c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000e0c:	4770      	bx	lr
1a000e0e:	Address 0x1a000e0e is out of bounds.


1a000e10 <Chip_TIMER_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a000e10:	4b09      	ldr	r3, [pc, #36]	; (1a000e38 <Chip_TIMER_GetClockIndex+0x28>)
1a000e12:	4298      	cmp	r0, r3
1a000e14:	d00b      	beq.n	1a000e2e <Chip_TIMER_GetClockIndex+0x1e>
		clkTMR = CLK_MX_TIMER3;
	}
    else if (pTMR == LPC_TIMER2) {
1a000e16:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a000e1a:	4298      	cmp	r0, r3
1a000e1c:	d009      	beq.n	1a000e32 <Chip_TIMER_GetClockIndex+0x22>
		clkTMR = CLK_MX_TIMER2;
	}
    else if (pTMR == LPC_TIMER1) {
1a000e1e:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a000e22:	4298      	cmp	r0, r3
1a000e24:	d001      	beq.n	1a000e2a <Chip_TIMER_GetClockIndex+0x1a>
		clkTMR = CLK_MX_TIMER1;
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a000e26:	2084      	movs	r0, #132	; 0x84
	}

	return clkTMR;
}
1a000e28:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER1;
1a000e2a:	2085      	movs	r0, #133	; 0x85
1a000e2c:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER3;
1a000e2e:	20a4      	movs	r0, #164	; 0xa4
1a000e30:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER2;
1a000e32:	20a3      	movs	r0, #163	; 0xa3
1a000e34:	4770      	bx	lr
1a000e36:	bf00      	nop
1a000e38:	400c4000 	.word	0x400c4000

1a000e3c <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a000e3c:	b508      	push	{r3, lr}
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a000e3e:	f7ff ffe7 	bl	1a000e10 <Chip_TIMER_GetClockIndex>
1a000e42:	f000 fc2f 	bl	1a0016a4 <Chip_Clock_Enable>
}
1a000e46:	bd08      	pop	{r3, pc}

1a000e48 <Chip_TIMER_Reset>:
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a000e48:	6842      	ldr	r2, [r0, #4]
	pTMR->TCR = 0;
1a000e4a:	2300      	movs	r3, #0
1a000e4c:	6043      	str	r3, [r0, #4]
	pTMR->TC = 1;
1a000e4e:	2301      	movs	r3, #1
1a000e50:	6083      	str	r3, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a000e52:	2302      	movs	r3, #2
1a000e54:	6043      	str	r3, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a000e56:	6883      	ldr	r3, [r0, #8]
1a000e58:	2b00      	cmp	r3, #0
1a000e5a:	d1fc      	bne.n	1a000e56 <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
1a000e5c:	6042      	str	r2, [r0, #4]
}
1a000e5e:	4770      	bx	lr

1a000e60 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000e60:	4b03      	ldr	r3, [pc, #12]	; (1a000e70 <Chip_ADC_GetClockIndex+0x10>)
1a000e62:	4298      	cmp	r0, r3
1a000e64:	d001      	beq.n	1a000e6a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000e66:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000e68:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000e6a:	2004      	movs	r0, #4
1a000e6c:	4770      	bx	lr
1a000e6e:	bf00      	nop
1a000e70:	400e4000 	.word	0x400e4000

1a000e74 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000e74:	b570      	push	{r4, r5, r6, lr}
1a000e76:	460d      	mov	r5, r1
1a000e78:	4614      	mov	r4, r2
1a000e7a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000e7c:	f7ff fff0 	bl	1a000e60 <Chip_ADC_GetClockIndex>
1a000e80:	f000 fc44 	bl	1a00170c <Chip_Clock_GetRate>
	if (burstMode) {
1a000e84:	b155      	cbz	r5, 1a000e9c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000e86:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000e8a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000e8e:	0064      	lsls	r4, r4, #1
1a000e90:	fbb0 f0f4 	udiv	r0, r0, r4
1a000e94:	b2c0      	uxtb	r0, r0
1a000e96:	3801      	subs	r0, #1
	return div;
}
1a000e98:	b2c0      	uxtb	r0, r0
1a000e9a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000e9c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000ea0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000ea4:	e7f1      	b.n	1a000e8a <getClkDiv+0x16>

1a000ea6 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a000ea6:	6803      	ldr	r3, [r0, #0]
1a000ea8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a000eac:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a000eb0:	6001      	str	r1, [r0, #0]
}
1a000eb2:	4770      	bx	lr

1a000eb4 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a000eb4:	3104      	adds	r1, #4
1a000eb6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a000eba:	2b00      	cmp	r3, #0
1a000ebc:	da04      	bge.n	1a000ec8 <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a000ebe:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a000ec2:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a000ec4:	2001      	movs	r0, #1
1a000ec6:	4770      	bx	lr
		return ERROR;
1a000ec8:	2000      	movs	r0, #0
}
1a000eca:	4770      	bx	lr

1a000ecc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000ecc:	b538      	push	{r3, r4, r5, lr}
1a000ece:	4605      	mov	r5, r0
1a000ed0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000ed2:	f7ff ffc5 	bl	1a000e60 <Chip_ADC_GetClockIndex>
1a000ed6:	2301      	movs	r3, #1
1a000ed8:	461a      	mov	r2, r3
1a000eda:	4619      	mov	r1, r3
1a000edc:	f000 fbc4 	bl	1a001668 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000ee0:	2100      	movs	r1, #0
1a000ee2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000ee4:	4a08      	ldr	r2, [pc, #32]	; (1a000f08 <Chip_ADC_Init+0x3c>)
1a000ee6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000ee8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000eea:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000eec:	230b      	movs	r3, #11
1a000eee:	4628      	mov	r0, r5
1a000ef0:	f7ff ffc0 	bl	1a000e74 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000ef4:	0200      	lsls	r0, r0, #8
1a000ef6:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000efa:	7920      	ldrb	r0, [r4, #4]
1a000efc:	0440      	lsls	r0, r0, #17
1a000efe:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000f02:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000f04:	6028      	str	r0, [r5, #0]
}
1a000f06:	bd38      	pop	{r3, r4, r5, pc}
1a000f08:	00061a80 	.word	0x00061a80

1a000f0c <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a000f0c:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a000f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
1a000f12:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a000f14:	2200      	movs	r2, #0
1a000f16:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a000f18:	f7ff ffa2 	bl	1a000e60 <Chip_ADC_GetClockIndex>
1a000f1c:	f000 fbdc 	bl	1a0016d8 <Chip_Clock_Disable>
}
1a000f20:	bd08      	pop	{r3, pc}

1a000f22 <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a000f22:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a000f24:	f7ff ffc6 	bl	1a000eb4 <readAdcVal>
}
1a000f28:	bd08      	pop	{r3, pc}

1a000f2a <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a000f2a:	2a01      	cmp	r2, #1
1a000f2c:	d00a      	beq.n	1a000f44 <Chip_ADC_ReadStatus+0x1a>
1a000f2e:	b11a      	cbz	r2, 1a000f38 <Chip_ADC_ReadStatus+0xe>
1a000f30:	2a02      	cmp	r2, #2
1a000f32:	d00f      	beq.n	1a000f54 <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a000f34:	2000      	movs	r0, #0
1a000f36:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a000f38:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000f3a:	40c8      	lsrs	r0, r1
1a000f3c:	f000 0001 	and.w	r0, r0, #1
1a000f40:	b2c0      	uxtb	r0, r0
1a000f42:	4770      	bx	lr
		channel += 8;
1a000f44:	3108      	adds	r1, #8
1a000f46:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a000f48:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000f4a:	40c8      	lsrs	r0, r1
1a000f4c:	f000 0001 	and.w	r0, r0, #1
1a000f50:	b2c0      	uxtb	r0, r0
1a000f52:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a000f54:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000f56:	0c1b      	lsrs	r3, r3, #16
1a000f58:	bf14      	ite	ne
1a000f5a:	2001      	movne	r0, #1
1a000f5c:	2000      	moveq	r0, #0
}
1a000f5e:	4770      	bx	lr

1a000f60 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000f60:	2a01      	cmp	r2, #1
1a000f62:	d006      	beq.n	1a000f72 <Chip_ADC_Int_SetChannelCmd+0x12>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a000f64:	68c3      	ldr	r3, [r0, #12]
1a000f66:	2201      	movs	r2, #1
1a000f68:	408a      	lsls	r2, r1
1a000f6a:	ea23 0302 	bic.w	r3, r3, r2
1a000f6e:	60c3      	str	r3, [r0, #12]
1a000f70:	4770      	bx	lr
{
1a000f72:	b410      	push	{r4}
		pADC->INTEN |= (1UL << channel);
1a000f74:	68c4      	ldr	r4, [r0, #12]
1a000f76:	408a      	lsls	r2, r1
1a000f78:	4314      	orrs	r4, r2
1a000f7a:	60c4      	str	r4, [r0, #12]
	}
}
1a000f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000f80:	4770      	bx	lr

1a000f82 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a000f82:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a000f84:	2901      	cmp	r1, #1
1a000f86:	d904      	bls.n	1a000f92 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a000f88:	b132      	cbz	r2, 1a000f98 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
1a000f8a:	6803      	ldr	r3, [r0, #0]
1a000f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a000f90:	6003      	str	r3, [r0, #0]
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a000f92:	f7ff ff88 	bl	1a000ea6 <setStartMode>
}
1a000f96:	bd08      	pop	{r3, pc}
			pADC->CR &= ~ADC_CR_EDGE;
1a000f98:	6803      	ldr	r3, [r0, #0]
1a000f9a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a000f9e:	6003      	str	r3, [r0, #0]
1a000fa0:	e7f7      	b.n	1a000f92 <Chip_ADC_SetStartMode+0x10>

1a000fa2 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000fa2:	b570      	push	{r4, r5, r6, lr}
1a000fa4:	4605      	mov	r5, r0
1a000fa6:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000fa8:	6804      	ldr	r4, [r0, #0]
1a000faa:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000fae:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000fb2:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000fb4:	790b      	ldrb	r3, [r1, #4]
1a000fb6:	f1c3 030b 	rsb	r3, r3, #11
1a000fba:	b2db      	uxtb	r3, r3
1a000fbc:	7949      	ldrb	r1, [r1, #5]
1a000fbe:	f7ff ff59 	bl	1a000e74 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000fc2:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000fc6:	7933      	ldrb	r3, [r6, #4]
1a000fc8:	045b      	lsls	r3, r3, #17
1a000fca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000fce:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000fd0:	602b      	str	r3, [r5, #0]
}
1a000fd2:	bd70      	pop	{r4, r5, r6, pc}

1a000fd4 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000fd4:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000fd6:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000fd8:	680a      	ldr	r2, [r1, #0]
1a000fda:	f7ff ffe2 	bl	1a000fa2 <Chip_ADC_SetSampleRate>
}
1a000fde:	bd08      	pop	{r3, pc}

1a000fe0 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000fe0:	2a01      	cmp	r2, #1
1a000fe2:	d00a      	beq.n	1a000ffa <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a000fe4:	6802      	ldr	r2, [r0, #0]
1a000fe6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
1a000fea:	6002      	str	r2, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a000fec:	6803      	ldr	r3, [r0, #0]
1a000fee:	2201      	movs	r2, #1
1a000ff0:	408a      	lsls	r2, r1
1a000ff2:	ea23 0302 	bic.w	r3, r3, r2
1a000ff6:	6003      	str	r3, [r0, #0]
1a000ff8:	4770      	bx	lr
{
1a000ffa:	b410      	push	{r4}
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a000ffc:	6804      	ldr	r4, [r0, #0]
1a000ffe:	408a      	lsls	r2, r1
1a001000:	4314      	orrs	r4, r2
1a001002:	6004      	str	r4, [r0, #0]
	}
}
1a001004:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001008:	4770      	bx	lr

1a00100a <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a00100a:	b538      	push	{r3, r4, r5, lr}
1a00100c:	4604      	mov	r4, r0
1a00100e:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a001010:	2100      	movs	r1, #0
1a001012:	f7ff ff48 	bl	1a000ea6 <setStartMode>
	
    if (NewState == DISABLE) {
1a001016:	b925      	cbnz	r5, 1a001022 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a001018:	6823      	ldr	r3, [r4, #0]
1a00101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00101e:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a001020:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a001022:	6823      	ldr	r3, [r4, #0]
1a001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a001028:	6023      	str	r3, [r4, #0]
}
1a00102a:	e7f9      	b.n	1a001020 <Chip_ADC_SetBurstCmd+0x16>

1a00102c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00102c:	b570      	push	{r4, r5, r6, lr}
1a00102e:	b08a      	sub	sp, #40	; 0x28
1a001030:	4605      	mov	r5, r0
1a001032:	460e      	mov	r6, r1
1a001034:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001036:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00103a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00103c:	2806      	cmp	r0, #6
1a00103e:	d018      	beq.n	1a001072 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001040:	2300      	movs	r3, #0
1a001042:	2201      	movs	r2, #1
1a001044:	4629      	mov	r1, r5
1a001046:	2004      	movs	r0, #4
1a001048:	f000 fac8 	bl	1a0015dc <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00104c:	4a4a      	ldr	r2, [pc, #296]	; (1a001178 <Chip_SetupCoreClock+0x14c>)
1a00104e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001050:	f043 0301 	orr.w	r3, r3, #1
1a001054:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001056:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00105a:	a901      	add	r1, sp, #4
1a00105c:	4630      	mov	r0, r6
1a00105e:	f000 fa35 	bl	1a0014cc <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001062:	4b46      	ldr	r3, [pc, #280]	; (1a00117c <Chip_SetupCoreClock+0x150>)
1a001064:	429e      	cmp	r6, r3
1a001066:	d916      	bls.n	1a001096 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001068:	9b01      	ldr	r3, [sp, #4]
1a00106a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00106e:	d003      	beq.n	1a001078 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001070:	e7fe      	b.n	1a001070 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001072:	f000 f98d 	bl	1a001390 <Chip_Clock_EnableCrystal>
1a001076:	e7e3      	b.n	1a001040 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001078:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00107c:	d005      	beq.n	1a00108a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00107e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001082:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001084:	2500      	movs	r5, #0
			direct = 1;
1a001086:	2601      	movs	r6, #1
1a001088:	e007      	b.n	1a00109a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00108a:	9b04      	ldr	r3, [sp, #16]
1a00108c:	3301      	adds	r3, #1
1a00108e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001090:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001092:	2600      	movs	r6, #0
1a001094:	e001      	b.n	1a00109a <Chip_SetupCoreClock+0x6e>
1a001096:	2500      	movs	r5, #0
1a001098:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00109a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00109e:	9b01      	ldr	r3, [sp, #4]
1a0010a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0010a4:	9a05      	ldr	r2, [sp, #20]
1a0010a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0010aa:	9a03      	ldr	r2, [sp, #12]
1a0010ac:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0010b0:	9a04      	ldr	r2, [sp, #16]
1a0010b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0010b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0010ba:	4a2f      	ldr	r2, [pc, #188]	; (1a001178 <Chip_SetupCoreClock+0x14c>)
1a0010bc:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0010be:	4b2e      	ldr	r3, [pc, #184]	; (1a001178 <Chip_SetupCoreClock+0x14c>)
1a0010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0010c2:	f013 0f01 	tst.w	r3, #1
1a0010c6:	d0fa      	beq.n	1a0010be <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0010c8:	2300      	movs	r3, #0
1a0010ca:	2201      	movs	r2, #1
1a0010cc:	2109      	movs	r1, #9
1a0010ce:	2004      	movs	r0, #4
1a0010d0:	f000 fa84 	bl	1a0015dc <Chip_Clock_SetBaseClock>

	if (direct) {
1a0010d4:	b306      	cbz	r6, 1a001118 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0010d6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0010da:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0010dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0010de:	1e5a      	subs	r2, r3, #1
1a0010e0:	9209      	str	r2, [sp, #36]	; 0x24
1a0010e2:	2b00      	cmp	r3, #0
1a0010e4:	d1fa      	bne.n	1a0010dc <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0010e6:	9b01      	ldr	r3, [sp, #4]
1a0010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0010ec:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0010ee:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0010f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0010f6:	9a05      	ldr	r2, [sp, #20]
1a0010f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0010fc:	9a03      	ldr	r2, [sp, #12]
1a0010fe:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001102:	9a04      	ldr	r2, [sp, #16]
1a001104:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001108:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00110c:	4a1a      	ldr	r2, [pc, #104]	; (1a001178 <Chip_SetupCoreClock+0x14c>)
1a00110e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001110:	2c00      	cmp	r4, #0
1a001112:	d12e      	bne.n	1a001172 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001114:	b00a      	add	sp, #40	; 0x28
1a001116:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001118:	2d00      	cmp	r5, #0
1a00111a:	d0f9      	beq.n	1a001110 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00111c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001120:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001122:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001124:	1e5a      	subs	r2, r3, #1
1a001126:	9209      	str	r2, [sp, #36]	; 0x24
1a001128:	2b00      	cmp	r3, #0
1a00112a:	d1fa      	bne.n	1a001122 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a00112c:	9b04      	ldr	r3, [sp, #16]
1a00112e:	1e5a      	subs	r2, r3, #1
1a001130:	9204      	str	r2, [sp, #16]
1a001132:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001136:	9b01      	ldr	r3, [sp, #4]
1a001138:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00113c:	9905      	ldr	r1, [sp, #20]
1a00113e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001142:	9903      	ldr	r1, [sp, #12]
1a001144:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001148:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00114c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001150:	4a09      	ldr	r2, [pc, #36]	; (1a001178 <Chip_SetupCoreClock+0x14c>)
1a001152:	6453      	str	r3, [r2, #68]	; 0x44
1a001154:	e7dc      	b.n	1a001110 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001156:	480a      	ldr	r0, [pc, #40]	; (1a001180 <Chip_SetupCoreClock+0x154>)
1a001158:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00115c:	78cb      	ldrb	r3, [r1, #3]
1a00115e:	788a      	ldrb	r2, [r1, #2]
1a001160:	7849      	ldrb	r1, [r1, #1]
1a001162:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001166:	f000 fa39 	bl	1a0015dc <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00116a:	3401      	adds	r4, #1
1a00116c:	2c11      	cmp	r4, #17
1a00116e:	d9f2      	bls.n	1a001156 <Chip_SetupCoreClock+0x12a>
1a001170:	e7d0      	b.n	1a001114 <Chip_SetupCoreClock+0xe8>
1a001172:	2400      	movs	r4, #0
1a001174:	e7fa      	b.n	1a00116c <Chip_SetupCoreClock+0x140>
1a001176:	bf00      	nop
1a001178:	40050000 	.word	0x40050000
1a00117c:	068e7780 	.word	0x068e7780
1a001180:	1a00499c 	.word	0x1a00499c

1a001184 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001184:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001186:	2069      	movs	r0, #105	; 0x69
1a001188:	f000 fac0 	bl	1a00170c <Chip_Clock_GetRate>
1a00118c:	4b01      	ldr	r3, [pc, #4]	; (1a001194 <SystemCoreClockUpdate+0x10>)
1a00118e:	6018      	str	r0, [r3, #0]
}
1a001190:	bd08      	pop	{r3, pc}
1a001192:	bf00      	nop
1a001194:	100001a8 	.word	0x100001a8

1a001198 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001198:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00119a:	680b      	ldr	r3, [r1, #0]
1a00119c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0011a0:	d002      	beq.n	1a0011a8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0011a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0011a6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0011a8:	4607      	mov	r7, r0
1a0011aa:	2501      	movs	r5, #1
1a0011ac:	e03a      	b.n	1a001224 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0011ae:	694b      	ldr	r3, [r1, #20]
1a0011b0:	fb03 f302 	mul.w	r3, r3, r2
1a0011b4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0011b8:	e01c      	b.n	1a0011f4 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0011ba:	461c      	mov	r4, r3
	if (val < 0)
1a0011bc:	ebb0 0c04 	subs.w	ip, r0, r4
1a0011c0:	d427      	bmi.n	1a001212 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0011c2:	4567      	cmp	r7, ip
1a0011c4:	d906      	bls.n	1a0011d4 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0011c6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0011c8:	1c77      	adds	r7, r6, #1
1a0011ca:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0011cc:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0011ce:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0011d0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0011d2:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0011d4:	3201      	adds	r2, #1
1a0011d6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0011da:	dc1d      	bgt.n	1a001218 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0011dc:	680c      	ldr	r4, [r1, #0]
1a0011de:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0011e2:	d0e4      	beq.n	1a0011ae <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0011e4:	1c73      	adds	r3, r6, #1
1a0011e6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0011ea:	694b      	ldr	r3, [r1, #20]
1a0011ec:	fb03 f30c 	mul.w	r3, r3, ip
1a0011f0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0011f4:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001230 <pll_calc_divs+0x98>
1a0011f8:	4563      	cmp	r3, ip
1a0011fa:	d9eb      	bls.n	1a0011d4 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0011fc:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001234 <pll_calc_divs+0x9c>
1a001200:	4563      	cmp	r3, ip
1a001202:	d809      	bhi.n	1a001218 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001204:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001208:	d1d7      	bne.n	1a0011ba <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00120a:	1c74      	adds	r4, r6, #1
1a00120c:	fa23 f404 	lsr.w	r4, r3, r4
1a001210:	e7d4      	b.n	1a0011bc <pll_calc_divs+0x24>
		return -val;
1a001212:	f1cc 0c00 	rsb	ip, ip, #0
1a001216:	e7d4      	b.n	1a0011c2 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001218:	3601      	adds	r6, #1
1a00121a:	2e03      	cmp	r6, #3
1a00121c:	dc01      	bgt.n	1a001222 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00121e:	2201      	movs	r2, #1
1a001220:	e7d9      	b.n	1a0011d6 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a001222:	3501      	adds	r5, #1
1a001224:	2d04      	cmp	r5, #4
1a001226:	dc01      	bgt.n	1a00122c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001228:	2600      	movs	r6, #0
1a00122a:	e7f6      	b.n	1a00121a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00122c:	bcf0      	pop	{r4, r5, r6, r7}
1a00122e:	4770      	bx	lr
1a001230:	094c5eff 	.word	0x094c5eff
1a001234:	1312d000 	.word	0x1312d000

1a001238 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001238:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00123a:	b099      	sub	sp, #100	; 0x64
1a00123c:	4605      	mov	r5, r0
1a00123e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001240:	225c      	movs	r2, #92	; 0x5c
1a001242:	2100      	movs	r1, #0
1a001244:	a801      	add	r0, sp, #4
1a001246:	f002 fb4d 	bl	1a0038e4 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00124a:	2380      	movs	r3, #128	; 0x80
1a00124c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00124e:	6963      	ldr	r3, [r4, #20]
1a001250:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001252:	7923      	ldrb	r3, [r4, #4]
1a001254:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001258:	4669      	mov	r1, sp
1a00125a:	4628      	mov	r0, r5
1a00125c:	f7ff ff9c 	bl	1a001198 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001260:	9b06      	ldr	r3, [sp, #24]
1a001262:	42ab      	cmp	r3, r5
1a001264:	d027      	beq.n	1a0012b6 <pll_get_frac+0x7e>
	if (val < 0)
1a001266:	1aeb      	subs	r3, r5, r3
1a001268:	d42e      	bmi.n	1a0012c8 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00126a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00126c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00126e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001272:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001274:	6963      	ldr	r3, [r4, #20]
1a001276:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001278:	7923      	ldrb	r3, [r4, #4]
1a00127a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00127e:	a910      	add	r1, sp, #64	; 0x40
1a001280:	4628      	mov	r0, r5
1a001282:	f7ff ff89 	bl	1a001198 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001286:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001288:	42ab      	cmp	r3, r5
1a00128a:	d01f      	beq.n	1a0012cc <pll_get_frac+0x94>
	if (val < 0)
1a00128c:	1aeb      	subs	r3, r5, r3
1a00128e:	d425      	bmi.n	1a0012dc <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001290:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001292:	4b2b      	ldr	r3, [pc, #172]	; (1a001340 <pll_get_frac+0x108>)
1a001294:	429d      	cmp	r5, r3
1a001296:	d923      	bls.n	1a0012e0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00129a:	1aed      	subs	r5, r5, r3
1a00129c:	d433      	bmi.n	1a001306 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00129e:	42ae      	cmp	r6, r5
1a0012a0:	dc3b      	bgt.n	1a00131a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0012a2:	42be      	cmp	r6, r7
1a0012a4:	dc31      	bgt.n	1a00130a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0012a6:	466d      	mov	r5, sp
1a0012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0012b4:	e006      	b.n	1a0012c4 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0012b6:	466d      	mov	r5, sp
1a0012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0012c4:	b019      	add	sp, #100	; 0x64
1a0012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0012c8:	425b      	negs	r3, r3
1a0012ca:	e7ce      	b.n	1a00126a <pll_get_frac+0x32>
		*ppll = pll[2];
1a0012cc:	ad10      	add	r5, sp, #64	; 0x40
1a0012ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0012da:	e7f3      	b.n	1a0012c4 <pll_get_frac+0x8c>
		return -val;
1a0012dc:	425b      	negs	r3, r3
1a0012de:	e7d7      	b.n	1a001290 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0012e0:	2340      	movs	r3, #64	; 0x40
1a0012e2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0012e4:	6963      	ldr	r3, [r4, #20]
1a0012e6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0012e8:	a908      	add	r1, sp, #32
1a0012ea:	4628      	mov	r0, r5
1a0012ec:	f7ff ff54 	bl	1a001198 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0012f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0012f2:	42ab      	cmp	r3, r5
1a0012f4:	d1d0      	bne.n	1a001298 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0012f6:	ad08      	add	r5, sp, #32
1a0012f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001304:	e7de      	b.n	1a0012c4 <pll_get_frac+0x8c>
		return -val;
1a001306:	426d      	negs	r5, r5
1a001308:	e7c9      	b.n	1a00129e <pll_get_frac+0x66>
			*ppll = pll[2];
1a00130a:	ad10      	add	r5, sp, #64	; 0x40
1a00130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001310:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001318:	e7d4      	b.n	1a0012c4 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00131a:	42af      	cmp	r7, r5
1a00131c:	db07      	blt.n	1a00132e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00131e:	ad08      	add	r5, sp, #32
1a001320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001324:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00132c:	e7ca      	b.n	1a0012c4 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00132e:	ad10      	add	r5, sp, #64	; 0x40
1a001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001334:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00133c:	e7c2      	b.n	1a0012c4 <pll_get_frac+0x8c>
1a00133e:	bf00      	nop
1a001340:	068e7780 	.word	0x068e7780

1a001344 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001344:	b430      	push	{r4, r5}
1a001346:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001348:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00134a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00134c:	e000      	b.n	1a001350 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00134e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001350:	281c      	cmp	r0, #28
1a001352:	d118      	bne.n	1a001386 <Chip_Clock_FindBaseClock+0x42>
1a001354:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001358:	0051      	lsls	r1, r2, #1
1a00135a:	4a0c      	ldr	r2, [pc, #48]	; (1a00138c <Chip_Clock_FindBaseClock+0x48>)
1a00135c:	440a      	add	r2, r1
1a00135e:	7914      	ldrb	r4, [r2, #4]
1a001360:	4284      	cmp	r4, r0
1a001362:	d010      	beq.n	1a001386 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001364:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001368:	004a      	lsls	r2, r1, #1
1a00136a:	4908      	ldr	r1, [pc, #32]	; (1a00138c <Chip_Clock_FindBaseClock+0x48>)
1a00136c:	5a8a      	ldrh	r2, [r1, r2]
1a00136e:	42aa      	cmp	r2, r5
1a001370:	d8ed      	bhi.n	1a00134e <Chip_Clock_FindBaseClock+0xa>
1a001372:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001376:	0051      	lsls	r1, r2, #1
1a001378:	4a04      	ldr	r2, [pc, #16]	; (1a00138c <Chip_Clock_FindBaseClock+0x48>)
1a00137a:	440a      	add	r2, r1
1a00137c:	8852      	ldrh	r2, [r2, #2]
1a00137e:	42aa      	cmp	r2, r5
1a001380:	d3e5      	bcc.n	1a00134e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001382:	4620      	mov	r0, r4
1a001384:	e7e4      	b.n	1a001350 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001386:	bc30      	pop	{r4, r5}
1a001388:	4770      	bx	lr
1a00138a:	bf00      	nop
1a00138c:	1a0049f0 	.word	0x1a0049f0

1a001390 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001390:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001396:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001398:	4a0d      	ldr	r2, [pc, #52]	; (1a0013d0 <Chip_Clock_EnableCrystal+0x40>)
1a00139a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00139c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0013a0:	6992      	ldr	r2, [r2, #24]
1a0013a2:	428a      	cmp	r2, r1
1a0013a4:	d001      	beq.n	1a0013aa <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0013a6:	4a0a      	ldr	r2, [pc, #40]	; (1a0013d0 <Chip_Clock_EnableCrystal+0x40>)
1a0013a8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0013aa:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0013ae:	4a09      	ldr	r2, [pc, #36]	; (1a0013d4 <Chip_Clock_EnableCrystal+0x44>)
1a0013b0:	6811      	ldr	r1, [r2, #0]
1a0013b2:	4a09      	ldr	r2, [pc, #36]	; (1a0013d8 <Chip_Clock_EnableCrystal+0x48>)
1a0013b4:	4291      	cmp	r1, r2
1a0013b6:	d901      	bls.n	1a0013bc <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0013b8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0013bc:	4a04      	ldr	r2, [pc, #16]	; (1a0013d0 <Chip_Clock_EnableCrystal+0x40>)
1a0013be:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0013c0:	9b01      	ldr	r3, [sp, #4]
1a0013c2:	1e5a      	subs	r2, r3, #1
1a0013c4:	9201      	str	r2, [sp, #4]
1a0013c6:	2b00      	cmp	r3, #0
1a0013c8:	d1fa      	bne.n	1a0013c0 <Chip_Clock_EnableCrystal+0x30>
}
1a0013ca:	b002      	add	sp, #8
1a0013cc:	4770      	bx	lr
1a0013ce:	bf00      	nop
1a0013d0:	40050000 	.word	0x40050000
1a0013d4:	1a004998 	.word	0x1a004998
1a0013d8:	01312cff 	.word	0x01312cff

1a0013dc <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0013dc:	3012      	adds	r0, #18
1a0013de:	4b05      	ldr	r3, [pc, #20]	; (1a0013f4 <Chip_Clock_GetDividerSource+0x18>)
1a0013e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0013e4:	f010 0f01 	tst.w	r0, #1
1a0013e8:	d102      	bne.n	1a0013f0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0013ea:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0013ee:	4770      	bx	lr
		return CLKINPUT_PD;
1a0013f0:	2011      	movs	r0, #17
}
1a0013f2:	4770      	bx	lr
1a0013f4:	40050000 	.word	0x40050000

1a0013f8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0013f8:	f100 0212 	add.w	r2, r0, #18
1a0013fc:	4b03      	ldr	r3, [pc, #12]	; (1a00140c <Chip_Clock_GetDividerDivisor+0x14>)
1a0013fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001402:	4b03      	ldr	r3, [pc, #12]	; (1a001410 <Chip_Clock_GetDividerDivisor+0x18>)
1a001404:	5c18      	ldrb	r0, [r3, r0]
}
1a001406:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00140a:	4770      	bx	lr
1a00140c:	40050000 	.word	0x40050000
1a001410:	1a0049e8 	.word	0x1a0049e8

1a001414 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001414:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001416:	2810      	cmp	r0, #16
1a001418:	d80a      	bhi.n	1a001430 <Chip_Clock_GetClockInputHz+0x1c>
1a00141a:	e8df f000 	tbb	[pc, r0]
1a00141e:	0b44      	.short	0x0b44
1a001420:	0921180d 	.word	0x0921180d
1a001424:	2d2a2724 	.word	0x2d2a2724
1a001428:	34300909 	.word	0x34300909
1a00142c:	3c38      	.short	0x3c38
1a00142e:	40          	.byte	0x40
1a00142f:	00          	.byte	0x00
	uint32_t rate = 0;
1a001430:	2000      	movs	r0, #0
1a001432:	e03a      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001434:	481e      	ldr	r0, [pc, #120]	; (1a0014b0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001436:	e038      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001438:	4b1e      	ldr	r3, [pc, #120]	; (1a0014b4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00143a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00143e:	f003 0307 	and.w	r3, r3, #7
1a001442:	2b04      	cmp	r3, #4
1a001444:	d001      	beq.n	1a00144a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001446:	481c      	ldr	r0, [pc, #112]	; (1a0014b8 <Chip_Clock_GetClockInputHz+0xa4>)
1a001448:	e02f      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00144a:	2000      	movs	r0, #0
1a00144c:	e02d      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00144e:	4b19      	ldr	r3, [pc, #100]	; (1a0014b4 <Chip_Clock_GetClockInputHz+0xa0>)
1a001450:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001454:	f003 0307 	and.w	r3, r3, #7
1a001458:	2b04      	cmp	r3, #4
1a00145a:	d027      	beq.n	1a0014ac <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00145c:	4816      	ldr	r0, [pc, #88]	; (1a0014b8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00145e:	e024      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001460:	4b16      	ldr	r3, [pc, #88]	; (1a0014bc <Chip_Clock_GetClockInputHz+0xa8>)
1a001462:	6818      	ldr	r0, [r3, #0]
		break;
1a001464:	e021      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001466:	4b16      	ldr	r3, [pc, #88]	; (1a0014c0 <Chip_Clock_GetClockInputHz+0xac>)
1a001468:	6818      	ldr	r0, [r3, #0]
		break;
1a00146a:	e01e      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00146c:	4b15      	ldr	r3, [pc, #84]	; (1a0014c4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00146e:	6818      	ldr	r0, [r3, #0]
		break;
1a001470:	e01b      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001472:	4b14      	ldr	r3, [pc, #80]	; (1a0014c4 <Chip_Clock_GetClockInputHz+0xb0>)
1a001474:	6858      	ldr	r0, [r3, #4]
		break;
1a001476:	e018      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001478:	f000 f868 	bl	1a00154c <Chip_Clock_GetMainPLLHz>
		break;
1a00147c:	e015      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00147e:	2100      	movs	r1, #0
1a001480:	f000 f89a 	bl	1a0015b8 <Chip_Clock_GetDivRate>
		break;
1a001484:	e011      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001486:	2101      	movs	r1, #1
1a001488:	f000 f896 	bl	1a0015b8 <Chip_Clock_GetDivRate>
		break;
1a00148c:	e00d      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00148e:	2102      	movs	r1, #2
1a001490:	f000 f892 	bl	1a0015b8 <Chip_Clock_GetDivRate>
		break;
1a001494:	e009      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001496:	2103      	movs	r1, #3
1a001498:	f000 f88e 	bl	1a0015b8 <Chip_Clock_GetDivRate>
		break;
1a00149c:	e005      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00149e:	2104      	movs	r1, #4
1a0014a0:	f000 f88a 	bl	1a0015b8 <Chip_Clock_GetDivRate>
		break;
1a0014a4:	e001      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0014a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0014aa:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0014ac:	4806      	ldr	r0, [pc, #24]	; (1a0014c8 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0014ae:	e7fc      	b.n	1a0014aa <Chip_Clock_GetClockInputHz+0x96>
1a0014b0:	00b71b00 	.word	0x00b71b00
1a0014b4:	40043000 	.word	0x40043000
1a0014b8:	017d7840 	.word	0x017d7840
1a0014bc:	1a00496c 	.word	0x1a00496c
1a0014c0:	1a004998 	.word	0x1a004998
1a0014c4:	10000150 	.word	0x10000150
1a0014c8:	02faf080 	.word	0x02faf080

1a0014cc <Chip_Clock_CalcMainPLLValue>:
{
1a0014cc:	b538      	push	{r3, r4, r5, lr}
1a0014ce:	4605      	mov	r5, r0
1a0014d0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0014d2:	7908      	ldrb	r0, [r1, #4]
1a0014d4:	f7ff ff9e 	bl	1a001414 <Chip_Clock_GetClockInputHz>
1a0014d8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0014da:	4b19      	ldr	r3, [pc, #100]	; (1a001540 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0014dc:	442b      	add	r3, r5
1a0014de:	4a19      	ldr	r2, [pc, #100]	; (1a001544 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0014e0:	4293      	cmp	r3, r2
1a0014e2:	d821      	bhi.n	1a001528 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0014e4:	b318      	cbz	r0, 1a00152e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0014e6:	2380      	movs	r3, #128	; 0x80
1a0014e8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0014ea:	2300      	movs	r3, #0
1a0014ec:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0014ee:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0014f0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0014f4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0014f6:	4a14      	ldr	r2, [pc, #80]	; (1a001548 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0014f8:	4295      	cmp	r5, r2
1a0014fa:	d903      	bls.n	1a001504 <Chip_Clock_CalcMainPLLValue+0x38>
1a0014fc:	fb03 f000 	mul.w	r0, r3, r0
1a001500:	42a8      	cmp	r0, r5
1a001502:	d007      	beq.n	1a001514 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001504:	4621      	mov	r1, r4
1a001506:	4628      	mov	r0, r5
1a001508:	f7ff fe96 	bl	1a001238 <pll_get_frac>
		if (!ppll->nsel) {
1a00150c:	68a3      	ldr	r3, [r4, #8]
1a00150e:	b18b      	cbz	r3, 1a001534 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001510:	3b01      	subs	r3, #1
1a001512:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001514:	6923      	ldr	r3, [r4, #16]
1a001516:	b183      	cbz	r3, 1a00153a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001518:	68e2      	ldr	r2, [r4, #12]
1a00151a:	b10a      	cbz	r2, 1a001520 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00151c:	3a01      	subs	r2, #1
1a00151e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001520:	3b01      	subs	r3, #1
1a001522:	6123      	str	r3, [r4, #16]
	return 0;
1a001524:	2000      	movs	r0, #0
}
1a001526:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001528:	f04f 30ff 	mov.w	r0, #4294967295
1a00152c:	e7fb      	b.n	1a001526 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00152e:	f04f 30ff 	mov.w	r0, #4294967295
1a001532:	e7f8      	b.n	1a001526 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001534:	f04f 30ff 	mov.w	r0, #4294967295
1a001538:	e7f5      	b.n	1a001526 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00153a:	f04f 30ff 	mov.w	r0, #4294967295
1a00153e:	e7f2      	b.n	1a001526 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001540:	ff6b3a10 	.word	0xff6b3a10
1a001544:	0b940510 	.word	0x0b940510
1a001548:	094c5eff 	.word	0x094c5eff

1a00154c <Chip_Clock_GetMainPLLHz>:
{
1a00154c:	b530      	push	{r4, r5, lr}
1a00154e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001550:	4d17      	ldr	r5, [pc, #92]	; (1a0015b0 <Chip_Clock_GetMainPLLHz+0x64>)
1a001552:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001554:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001558:	f7ff ff5c 	bl	1a001414 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00155c:	4b15      	ldr	r3, [pc, #84]	; (1a0015b4 <Chip_Clock_GetMainPLLHz+0x68>)
1a00155e:	681b      	ldr	r3, [r3, #0]
1a001560:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001562:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001564:	f013 0f01 	tst.w	r3, #1
1a001568:	d020      	beq.n	1a0015ac <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a00156a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00156e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001572:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001576:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00157a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00157c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00157e:	f10d 0c08 	add.w	ip, sp, #8
1a001582:	4461      	add	r1, ip
1a001584:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001588:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00158c:	d108      	bne.n	1a0015a0 <Chip_Clock_GetMainPLLHz+0x54>
1a00158e:	b93d      	cbnz	r5, 1a0015a0 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001590:	0049      	lsls	r1, r1, #1
1a001592:	fbb3 f3f1 	udiv	r3, r3, r1
1a001596:	fbb0 f0f2 	udiv	r0, r0, r2
1a00159a:	fb00 f003 	mul.w	r0, r0, r3
1a00159e:	e003      	b.n	1a0015a8 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0015a0:	fbb0 f0f2 	udiv	r0, r0, r2
1a0015a4:	fb03 f000 	mul.w	r0, r3, r0
}
1a0015a8:	b003      	add	sp, #12
1a0015aa:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0015ac:	2000      	movs	r0, #0
1a0015ae:	e7fb      	b.n	1a0015a8 <Chip_Clock_GetMainPLLHz+0x5c>
1a0015b0:	40050000 	.word	0x40050000
1a0015b4:	1a0049e4 	.word	0x1a0049e4

1a0015b8 <Chip_Clock_GetDivRate>:
{
1a0015b8:	b538      	push	{r3, r4, r5, lr}
1a0015ba:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0015bc:	4608      	mov	r0, r1
1a0015be:	f7ff ff0d 	bl	1a0013dc <Chip_Clock_GetDividerSource>
1a0015c2:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0015c4:	4620      	mov	r0, r4
1a0015c6:	f7ff ff17 	bl	1a0013f8 <Chip_Clock_GetDividerDivisor>
1a0015ca:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0015cc:	4628      	mov	r0, r5
1a0015ce:	f7ff ff21 	bl	1a001414 <Chip_Clock_GetClockInputHz>
1a0015d2:	3401      	adds	r4, #1
}
1a0015d4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0015d8:	bd38      	pop	{r3, r4, r5, pc}
1a0015da:	Address 0x1a0015da is out of bounds.


1a0015dc <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0015dc:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0015de:	f100 0416 	add.w	r4, r0, #22
1a0015e2:	00a4      	lsls	r4, r4, #2
1a0015e4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0015e8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0015ec:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0015ee:	281b      	cmp	r0, #27
1a0015f0:	d813      	bhi.n	1a00161a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0015f2:	2911      	cmp	r1, #17
1a0015f4:	d01a      	beq.n	1a00162c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0015f6:	4d0e      	ldr	r5, [pc, #56]	; (1a001630 <Chip_Clock_SetBaseClock+0x54>)
1a0015f8:	4025      	ands	r5, r4

			if (autoblocken) {
1a0015fa:	b10a      	cbz	r2, 1a001600 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0015fc:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001600:	b10b      	cbz	r3, 1a001606 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001602:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001606:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00160a:	3016      	adds	r0, #22
1a00160c:	0080      	lsls	r0, r0, #2
1a00160e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001612:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001616:	6045      	str	r5, [r0, #4]
1a001618:	e008      	b.n	1a00162c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00161a:	f044 0401 	orr.w	r4, r4, #1
1a00161e:	3016      	adds	r0, #22
1a001620:	0080      	lsls	r0, r0, #2
1a001622:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001626:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00162a:	6044      	str	r4, [r0, #4]
	}
}
1a00162c:	bc30      	pop	{r4, r5}
1a00162e:	4770      	bx	lr
1a001630:	e0fff7fe 	.word	0xe0fff7fe

1a001634 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001634:	281b      	cmp	r0, #27
1a001636:	d80c      	bhi.n	1a001652 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001638:	3016      	adds	r0, #22
1a00163a:	0080      	lsls	r0, r0, #2
1a00163c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001640:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001644:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001646:	f010 0f01 	tst.w	r0, #1
1a00164a:	d104      	bne.n	1a001656 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00164c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001650:	4770      	bx	lr
		return CLKINPUT_PD;
1a001652:	2011      	movs	r0, #17
1a001654:	4770      	bx	lr
		return CLKINPUT_PD;
1a001656:	2011      	movs	r0, #17
}
1a001658:	4770      	bx	lr

1a00165a <Chip_Clock_GetBaseClocktHz>:
{
1a00165a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00165c:	f7ff ffea 	bl	1a001634 <Chip_Clock_GetBaseClock>
1a001660:	f7ff fed8 	bl	1a001414 <Chip_Clock_GetClockInputHz>
}
1a001664:	bd08      	pop	{r3, pc}
1a001666:	Address 0x1a001666 is out of bounds.


1a001668 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001668:	b971      	cbnz	r1, 1a001688 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00166a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00166c:	b10a      	cbz	r2, 1a001672 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00166e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001672:	2b02      	cmp	r3, #2
1a001674:	d00a      	beq.n	1a00168c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001676:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00167a:	d30a      	bcc.n	1a001692 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00167c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001680:	4b06      	ldr	r3, [pc, #24]	; (1a00169c <Chip_Clock_EnableOpts+0x34>)
1a001682:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001686:	4770      	bx	lr
		reg |= (1 << 1);
1a001688:	2103      	movs	r1, #3
1a00168a:	e7ef      	b.n	1a00166c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00168c:	f041 0120 	orr.w	r1, r1, #32
1a001690:	e7f1      	b.n	1a001676 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001692:	3020      	adds	r0, #32
1a001694:	4b02      	ldr	r3, [pc, #8]	; (1a0016a0 <Chip_Clock_EnableOpts+0x38>)
1a001696:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00169a:	4770      	bx	lr
1a00169c:	40052000 	.word	0x40052000
1a0016a0:	40051000 	.word	0x40051000

1a0016a4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0016a4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0016a8:	d309      	bcc.n	1a0016be <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0016aa:	4a09      	ldr	r2, [pc, #36]	; (1a0016d0 <Chip_Clock_Enable+0x2c>)
1a0016ac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0016b0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0016b4:	f043 0301 	orr.w	r3, r3, #1
1a0016b8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0016bc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0016be:	4a05      	ldr	r2, [pc, #20]	; (1a0016d4 <Chip_Clock_Enable+0x30>)
1a0016c0:	3020      	adds	r0, #32
1a0016c2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0016c6:	f043 0301 	orr.w	r3, r3, #1
1a0016ca:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0016ce:	4770      	bx	lr
1a0016d0:	40052000 	.word	0x40052000
1a0016d4:	40051000 	.word	0x40051000

1a0016d8 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a0016d8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0016dc:	d309      	bcc.n	1a0016f2 <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a0016de:	4a09      	ldr	r2, [pc, #36]	; (1a001704 <Chip_Clock_Disable+0x2c>)
1a0016e0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0016e4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0016e8:	f023 0301 	bic.w	r3, r3, #1
1a0016ec:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0016f0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a0016f2:	4a05      	ldr	r2, [pc, #20]	; (1a001708 <Chip_Clock_Disable+0x30>)
1a0016f4:	3020      	adds	r0, #32
1a0016f6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0016fa:	f023 0301 	bic.w	r3, r3, #1
1a0016fe:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001702:	4770      	bx	lr
1a001704:	40052000 	.word	0x40052000
1a001708:	40051000 	.word	0x40051000

1a00170c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00170c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00170e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001712:	d309      	bcc.n	1a001728 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001714:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001718:	4a0d      	ldr	r2, [pc, #52]	; (1a001750 <Chip_Clock_GetRate+0x44>)
1a00171a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00171e:	f014 0f01 	tst.w	r4, #1
1a001722:	d107      	bne.n	1a001734 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001724:	2000      	movs	r0, #0
	}

	return rate;
}
1a001726:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001728:	f100 0320 	add.w	r3, r0, #32
1a00172c:	4a09      	ldr	r2, [pc, #36]	; (1a001754 <Chip_Clock_GetRate+0x48>)
1a00172e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001732:	e7f4      	b.n	1a00171e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001734:	f7ff fe06 	bl	1a001344 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001738:	f7ff ff8f 	bl	1a00165a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00173c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001740:	d103      	bne.n	1a00174a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001742:	2301      	movs	r3, #1
		rate = rate / div;
1a001744:	fbb0 f0f3 	udiv	r0, r0, r3
1a001748:	e7ed      	b.n	1a001726 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00174a:	2302      	movs	r3, #2
1a00174c:	e7fa      	b.n	1a001744 <Chip_Clock_GetRate+0x38>
1a00174e:	bf00      	nop
1a001750:	40052000 	.word	0x40052000
1a001754:	40051000 	.word	0x40051000

1a001758 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001758:	4b09      	ldr	r3, [pc, #36]	; (1a001780 <Chip_UART_GetIndex+0x28>)
1a00175a:	4298      	cmp	r0, r3
1a00175c:	d009      	beq.n	1a001772 <Chip_UART_GetIndex+0x1a>
1a00175e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001762:	4298      	cmp	r0, r3
1a001764:	d007      	beq.n	1a001776 <Chip_UART_GetIndex+0x1e>
1a001766:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00176a:	4298      	cmp	r0, r3
1a00176c:	d005      	beq.n	1a00177a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00176e:	2000      	movs	r0, #0
1a001770:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001772:	2002      	movs	r0, #2
1a001774:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001776:	2003      	movs	r0, #3
1a001778:	4770      	bx	lr
			return 1;
1a00177a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00177c:	4770      	bx	lr
1a00177e:	bf00      	nop
1a001780:	400c1000 	.word	0x400c1000

1a001784 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001784:	b530      	push	{r4, r5, lr}
1a001786:	b083      	sub	sp, #12
1a001788:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00178a:	f7ff ffe5 	bl	1a001758 <Chip_UART_GetIndex>
1a00178e:	2301      	movs	r3, #1
1a001790:	461a      	mov	r2, r3
1a001792:	4619      	mov	r1, r3
1a001794:	4d0e      	ldr	r5, [pc, #56]	; (1a0017d0 <Chip_UART_Init+0x4c>)
1a001796:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00179a:	f7ff ff65 	bl	1a001668 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00179e:	2307      	movs	r3, #7
1a0017a0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0017a2:	2300      	movs	r3, #0
1a0017a4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0017a6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0017a8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0017aa:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0017ac:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0017ae:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0017b0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0017b2:	4b08      	ldr	r3, [pc, #32]	; (1a0017d4 <Chip_UART_Init+0x50>)
1a0017b4:	429c      	cmp	r4, r3
1a0017b6:	d006      	beq.n	1a0017c6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0017b8:	2303      	movs	r3, #3
1a0017ba:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0017bc:	2310      	movs	r3, #16
1a0017be:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0017c0:	9b01      	ldr	r3, [sp, #4]
}
1a0017c2:	b003      	add	sp, #12
1a0017c4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0017c6:	2300      	movs	r3, #0
1a0017c8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0017ca:	69a3      	ldr	r3, [r4, #24]
1a0017cc:	9301      	str	r3, [sp, #4]
1a0017ce:	e7f3      	b.n	1a0017b8 <Chip_UART_Init+0x34>
1a0017d0:	1a004a64 	.word	0x1a004a64
1a0017d4:	40082000 	.word	0x40082000

1a0017d8 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0017d8:	b538      	push	{r3, r4, r5, lr}
1a0017da:	4605      	mov	r5, r0
1a0017dc:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0017de:	f7ff ffbb 	bl	1a001758 <Chip_UART_GetIndex>
1a0017e2:	4b0c      	ldr	r3, [pc, #48]	; (1a001814 <Chip_UART_SetBaud+0x3c>)
1a0017e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0017e8:	f7ff ff90 	bl	1a00170c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0017ec:	0123      	lsls	r3, r4, #4
1a0017ee:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0017f2:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0017f4:	68ea      	ldr	r2, [r5, #12]
1a0017f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0017fa:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0017fc:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0017fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001802:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001804:	68ea      	ldr	r2, [r5, #12]
1a001806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00180a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00180c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001810:	0900      	lsrs	r0, r0, #4
1a001812:	bd38      	pop	{r3, r4, r5, pc}
1a001814:	1a004a5c 	.word	0x1a004a5c

1a001818 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00181c:	b083      	sub	sp, #12
1a00181e:	9001      	str	r0, [sp, #4]
1a001820:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001822:	f7ff ff99 	bl	1a001758 <Chip_UART_GetIndex>
1a001826:	4b32      	ldr	r3, [pc, #200]	; (1a0018f0 <Chip_UART_SetBaudFDR+0xd8>)
1a001828:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00182c:	f7ff ff6e 	bl	1a00170c <Chip_Clock_GetRate>
1a001830:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001832:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001836:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001838:	f04f 0b00 	mov.w	fp, #0
1a00183c:	46a2      	mov	sl, r4
1a00183e:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001840:	e02a      	b.n	1a001898 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001842:	4242      	negs	r2, r0
				div ++;
1a001844:	1c4b      	adds	r3, r1, #1
1a001846:	e017      	b.n	1a001878 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001848:	b30a      	cbz	r2, 1a00188e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00184a:	4617      	mov	r7, r2
			sd = d;
1a00184c:	46ab      	mov	fp, r5
			sm = m;
1a00184e:	46a2      	mov	sl, r4
			sdiv = div;
1a001850:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001852:	3501      	adds	r5, #1
1a001854:	42ac      	cmp	r4, r5
1a001856:	d91e      	bls.n	1a001896 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001858:	0933      	lsrs	r3, r6, #4
1a00185a:	0730      	lsls	r0, r6, #28
1a00185c:	fba4 0100 	umull	r0, r1, r4, r0
1a001860:	fb04 1103 	mla	r1, r4, r3, r1
1a001864:	1962      	adds	r2, r4, r5
1a001866:	fb08 f202 	mul.w	r2, r8, r2
1a00186a:	2300      	movs	r3, #0
1a00186c:	f001 fb60 	bl	1a002f30 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001870:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001872:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001874:	2800      	cmp	r0, #0
1a001876:	dbe4      	blt.n	1a001842 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001878:	4297      	cmp	r7, r2
1a00187a:	d3ea      	bcc.n	1a001852 <Chip_UART_SetBaudFDR+0x3a>
1a00187c:	2b00      	cmp	r3, #0
1a00187e:	d0e8      	beq.n	1a001852 <Chip_UART_SetBaudFDR+0x3a>
1a001880:	0c19      	lsrs	r1, r3, #16
1a001882:	d1e6      	bne.n	1a001852 <Chip_UART_SetBaudFDR+0x3a>
1a001884:	2b02      	cmp	r3, #2
1a001886:	d8df      	bhi.n	1a001848 <Chip_UART_SetBaudFDR+0x30>
1a001888:	2d00      	cmp	r5, #0
1a00188a:	d0dd      	beq.n	1a001848 <Chip_UART_SetBaudFDR+0x30>
1a00188c:	e7e1      	b.n	1a001852 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00188e:	4617      	mov	r7, r2
			sd = d;
1a001890:	46ab      	mov	fp, r5
			sm = m;
1a001892:	46a2      	mov	sl, r4
			sdiv = div;
1a001894:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001896:	3401      	adds	r4, #1
1a001898:	b11f      	cbz	r7, 1a0018a2 <Chip_UART_SetBaudFDR+0x8a>
1a00189a:	2c0f      	cmp	r4, #15
1a00189c:	d801      	bhi.n	1a0018a2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00189e:	2500      	movs	r5, #0
1a0018a0:	e7d8      	b.n	1a001854 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0018a2:	f1b9 0f00 	cmp.w	r9, #0
1a0018a6:	d01e      	beq.n	1a0018e6 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0018a8:	9a01      	ldr	r2, [sp, #4]
1a0018aa:	4611      	mov	r1, r2
1a0018ac:	68d3      	ldr	r3, [r2, #12]
1a0018ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0018b2:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0018b4:	fa5f f389 	uxtb.w	r3, r9
1a0018b8:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0018ba:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0018be:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0018c0:	68d3      	ldr	r3, [r2, #12]
1a0018c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0018c6:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0018c8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0018cc:	b2db      	uxtb	r3, r3
1a0018ce:	f00b 020f 	and.w	r2, fp, #15
1a0018d2:	4313      	orrs	r3, r2
1a0018d4:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0018d6:	0933      	lsrs	r3, r6, #4
1a0018d8:	fb0a f303 	mul.w	r3, sl, r3
1a0018dc:	44da      	add	sl, fp
1a0018de:	fb09 f90a 	mul.w	r9, r9, sl
1a0018e2:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0018e6:	4648      	mov	r0, r9
1a0018e8:	b003      	add	sp, #12
1a0018ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0018ee:	bf00      	nop
1a0018f0:	1a004a5c 	.word	0x1a004a5c

1a0018f4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0018f4:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0018f6:	4a0b      	ldr	r2, [pc, #44]	; (1a001924 <SystemInit+0x30>)
1a0018f8:	4b0b      	ldr	r3, [pc, #44]	; (1a001928 <SystemInit+0x34>)
1a0018fa:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0018fc:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001900:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001902:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001906:	2b20      	cmp	r3, #32
1a001908:	d004      	beq.n	1a001914 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00190a:	f7ff f8e9 	bl	1a000ae0 <Board_SystemInit>
   Board_Init();
1a00190e:	f7ff f9bf 	bl	1a000c90 <Board_Init>
}
1a001912:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001914:	4a04      	ldr	r2, [pc, #16]	; (1a001928 <SystemInit+0x34>)
1a001916:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00191a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00191e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001922:	e7f2      	b.n	1a00190a <SystemInit+0x16>
1a001924:	1a000000 	.word	0x1a000000
1a001928:	e000ed00 	.word	0xe000ed00

1a00192c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00192c:	4b04      	ldr	r3, [pc, #16]	; (1a001940 <cyclesCounterInit+0x14>)
1a00192e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001930:	4a04      	ldr	r2, [pc, #16]	; (1a001944 <cyclesCounterInit+0x18>)
1a001932:	6813      	ldr	r3, [r2, #0]
1a001934:	f043 0301 	orr.w	r3, r3, #1
1a001938:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00193a:	2001      	movs	r0, #1
1a00193c:	4770      	bx	lr
1a00193e:	bf00      	nop
1a001940:	10000040 	.word	0x10000040
1a001944:	e0001000 	.word	0xe0001000

1a001948 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001948:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00194a:	4d0b      	ldr	r5, [pc, #44]	; (1a001978 <gpioObtainPinInit+0x30>)
1a00194c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001950:	182c      	adds	r4, r5, r0
1a001952:	5628      	ldrsb	r0, [r5, r0]
1a001954:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001956:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00195a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00195c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001960:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001962:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001966:	9b02      	ldr	r3, [sp, #8]
1a001968:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00196a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00196e:	9b03      	ldr	r3, [sp, #12]
1a001970:	701a      	strb	r2, [r3, #0]
}
1a001972:	bc30      	pop	{r4, r5}
1a001974:	4770      	bx	lr
1a001976:	bf00      	nop
1a001978:	1a004a6c 	.word	0x1a004a6c

1a00197c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a00197c:	f110 0f02 	cmn.w	r0, #2
1a001980:	f000 80c7 	beq.w	1a001b12 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001984:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001988:	f000 80c5 	beq.w	1a001b16 <gpioInit+0x19a>
{
1a00198c:	b570      	push	{r4, r5, r6, lr}
1a00198e:	b084      	sub	sp, #16
1a001990:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001992:	2300      	movs	r3, #0
1a001994:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001998:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00199c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0019a0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0019a4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0019a8:	f10d 030b 	add.w	r3, sp, #11
1a0019ac:	9301      	str	r3, [sp, #4]
1a0019ae:	ab03      	add	r3, sp, #12
1a0019b0:	9300      	str	r3, [sp, #0]
1a0019b2:	f10d 030d 	add.w	r3, sp, #13
1a0019b6:	f10d 020e 	add.w	r2, sp, #14
1a0019ba:	f10d 010f 	add.w	r1, sp, #15
1a0019be:	f7ff ffc3 	bl	1a001948 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0019c2:	2c05      	cmp	r4, #5
1a0019c4:	f200 80a9 	bhi.w	1a001b1a <gpioInit+0x19e>
1a0019c8:	e8df f004 	tbb	[pc, r4]
1a0019cc:	45278109 	.word	0x45278109
1a0019d0:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0019d2:	4853      	ldr	r0, [pc, #332]	; (1a001b20 <gpioInit+0x1a4>)
1a0019d4:	f7ff fa1a 	bl	1a000e0c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0019d8:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0019da:	b004      	add	sp, #16
1a0019dc:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0019de:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0019e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0019e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0019ea:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0019ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0019f2:	494c      	ldr	r1, [pc, #304]	; (1a001b24 <gpioInit+0x1a8>)
1a0019f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0019f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0019fc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a00:	2001      	movs	r0, #1
1a001a02:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001a06:	4c46      	ldr	r4, [pc, #280]	; (1a001b20 <gpioInit+0x1a4>)
1a001a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a0c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a10:	ea22 0201 	bic.w	r2, r2, r1
1a001a14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a18:	e7df      	b.n	1a0019da <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001a1a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a1e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a22:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a26:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001a2a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a2e:	493d      	ldr	r1, [pc, #244]	; (1a001b24 <gpioInit+0x1a8>)
1a001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a34:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a38:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a3c:	2001      	movs	r0, #1
1a001a3e:	fa00 f102 	lsl.w	r1, r0, r2
1a001a42:	4c37      	ldr	r4, [pc, #220]	; (1a001b20 <gpioInit+0x1a4>)
1a001a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a48:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a4c:	ea22 0201 	bic.w	r2, r2, r1
1a001a50:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a54:	e7c1      	b.n	1a0019da <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001a56:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a5e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a62:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001a66:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a6a:	492e      	ldr	r1, [pc, #184]	; (1a001b24 <gpioInit+0x1a8>)
1a001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a70:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a74:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a78:	2001      	movs	r0, #1
1a001a7a:	fa00 f102 	lsl.w	r1, r0, r2
1a001a7e:	4c28      	ldr	r4, [pc, #160]	; (1a001b20 <gpioInit+0x1a4>)
1a001a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a84:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a88:	ea22 0201 	bic.w	r2, r2, r1
1a001a8c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a90:	e7a3      	b.n	1a0019da <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001a92:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a96:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a9a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a9e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001aa2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001aa6:	491f      	ldr	r1, [pc, #124]	; (1a001b24 <gpioInit+0x1a8>)
1a001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001aac:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001ab0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ab4:	2001      	movs	r0, #1
1a001ab6:	fa00 f102 	lsl.w	r1, r0, r2
1a001aba:	4c19      	ldr	r4, [pc, #100]	; (1a001b20 <gpioInit+0x1a4>)
1a001abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001ac0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001ac4:	ea22 0201 	bic.w	r2, r2, r1
1a001ac8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001acc:	e785      	b.n	1a0019da <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001ace:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ad2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ad6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001ada:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001ade:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001ae2:	4910      	ldr	r1, [pc, #64]	; (1a001b24 <gpioInit+0x1a8>)
1a001ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001ae8:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001aec:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001af0:	2001      	movs	r0, #1
1a001af2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001af6:	4b0a      	ldr	r3, [pc, #40]	; (1a001b20 <gpioInit+0x1a4>)
1a001af8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001afc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001b00:	4331      	orrs	r1, r6
1a001b02:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001b06:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001b08:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001b0c:	2100      	movs	r1, #0
1a001b0e:	5499      	strb	r1, [r3, r2]
1a001b10:	e763      	b.n	1a0019da <gpioInit+0x5e>
	  return FALSE;
1a001b12:	2000      	movs	r0, #0
1a001b14:	4770      	bx	lr
	  return FALSE;
1a001b16:	2000      	movs	r0, #0
}
1a001b18:	4770      	bx	lr
      ret_val = 0;
1a001b1a:	2000      	movs	r0, #0
1a001b1c:	e75d      	b.n	1a0019da <gpioInit+0x5e>
1a001b1e:	bf00      	nop
1a001b20:	400f4000 	.word	0x400f4000
1a001b24:	40086000 	.word	0x40086000

1a001b28 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001b28:	f110 0f02 	cmn.w	r0, #2
1a001b2c:	d02d      	beq.n	1a001b8a <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001b2e:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001b32:	d02c      	beq.n	1a001b8e <gpioWrite+0x66>
{
1a001b34:	b510      	push	{r4, lr}
1a001b36:	b084      	sub	sp, #16
1a001b38:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001b3a:	2300      	movs	r3, #0
1a001b3c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001b40:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001b44:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001b48:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001b4c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001b50:	f10d 030b 	add.w	r3, sp, #11
1a001b54:	9301      	str	r3, [sp, #4]
1a001b56:	ab03      	add	r3, sp, #12
1a001b58:	9300      	str	r3, [sp, #0]
1a001b5a:	f10d 030d 	add.w	r3, sp, #13
1a001b5e:	f10d 020e 	add.w	r2, sp, #14
1a001b62:	f10d 010f 	add.w	r1, sp, #15
1a001b66:	f7ff feef 	bl	1a001948 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001b6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b6e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001b72:	1c21      	adds	r1, r4, #0
1a001b74:	bf18      	it	ne
1a001b76:	2101      	movne	r1, #1
1a001b78:	015b      	lsls	r3, r3, #5
1a001b7a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001b7e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001b82:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001b84:	2001      	movs	r0, #1
}
1a001b86:	b004      	add	sp, #16
1a001b88:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001b8a:	2000      	movs	r0, #0
1a001b8c:	4770      	bx	lr
	  return FALSE;
1a001b8e:	2000      	movs	r0, #0
}
1a001b90:	4770      	bx	lr
1a001b92:	Address 0x1a001b92 is out of bounds.


1a001b94 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a001b94:	b530      	push	{r4, r5, lr}
1a001b96:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a001b98:	b118      	cbz	r0, 1a001ba2 <adcInit+0xe>
1a001b9a:	2801      	cmp	r0, #1
1a001b9c:	d04a      	beq.n	1a001c34 <adcInit+0xa0>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a001b9e:	b003      	add	sp, #12
1a001ba0:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a001ba2:	4b26      	ldr	r3, [pc, #152]	; (1a001c3c <adcInit+0xa8>)
1a001ba4:	466d      	mov	r5, sp
1a001ba6:	e893 0003 	ldmia.w	r3, {r0, r1}
1a001baa:	e885 0003 	stmia.w	r5, {r0, r1}
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a001bae:	4c24      	ldr	r4, [pc, #144]	; (1a001c40 <adcInit+0xac>)
1a001bb0:	4629      	mov	r1, r5
1a001bb2:	4620      	mov	r0, r4
1a001bb4:	f7ff f98a 	bl	1a000ecc <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a001bb8:	2100      	movs	r1, #0
1a001bba:	4620      	mov	r0, r4
1a001bbc:	f7ff fa25 	bl	1a00100a <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a001bc0:	4a20      	ldr	r2, [pc, #128]	; (1a001c44 <adcInit+0xb0>)
1a001bc2:	4629      	mov	r1, r5
1a001bc4:	4620      	mov	r0, r4
1a001bc6:	f7ff f9ec 	bl	1a000fa2 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a001bca:	2200      	movs	r2, #0
1a001bcc:	2101      	movs	r1, #1
1a001bce:	4620      	mov	r0, r4
1a001bd0:	f7ff fa06 	bl	1a000fe0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a001bd4:	2200      	movs	r2, #0
1a001bd6:	2101      	movs	r1, #1
1a001bd8:	4620      	mov	r0, r4
1a001bda:	f7ff f9c1 	bl	1a000f60 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a001bde:	2200      	movs	r2, #0
1a001be0:	2102      	movs	r1, #2
1a001be2:	4620      	mov	r0, r4
1a001be4:	f7ff f9fc 	bl	1a000fe0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a001be8:	2200      	movs	r2, #0
1a001bea:	2102      	movs	r1, #2
1a001bec:	4620      	mov	r0, r4
1a001bee:	f7ff f9b7 	bl	1a000f60 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a001bf2:	2200      	movs	r2, #0
1a001bf4:	2103      	movs	r1, #3
1a001bf6:	4620      	mov	r0, r4
1a001bf8:	f7ff f9f2 	bl	1a000fe0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a001bfc:	2200      	movs	r2, #0
1a001bfe:	2103      	movs	r1, #3
1a001c00:	4620      	mov	r0, r4
1a001c02:	f7ff f9ad 	bl	1a000f60 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a001c06:	2200      	movs	r2, #0
1a001c08:	2104      	movs	r1, #4
1a001c0a:	4620      	mov	r0, r4
1a001c0c:	f7ff f9e8 	bl	1a000fe0 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a001c10:	2200      	movs	r2, #0
1a001c12:	2104      	movs	r1, #4
1a001c14:	4620      	mov	r0, r4
1a001c16:	f7ff f9a3 	bl	1a000f60 <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a001c1a:	4a0b      	ldr	r2, [pc, #44]	; (1a001c48 <adcInit+0xb4>)
1a001c1c:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a001c20:	f043 0310 	orr.w	r3, r3, #16
1a001c24:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a001c28:	2200      	movs	r2, #0
1a001c2a:	2105      	movs	r1, #5
1a001c2c:	4620      	mov	r0, r4
1a001c2e:	f7ff f997 	bl	1a000f60 <Chip_ADC_Int_SetChannelCmd>
      break;
1a001c32:	e7b4      	b.n	1a001b9e <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a001c34:	4802      	ldr	r0, [pc, #8]	; (1a001c40 <adcInit+0xac>)
1a001c36:	f7ff f969 	bl	1a000f0c <Chip_ADC_DeInit>
}
1a001c3a:	e7b0      	b.n	1a001b9e <adcInit+0xa>
1a001c3c:	1a004b54 	.word	0x1a004b54
1a001c40:	400e3000 	.word	0x400e3000
1a001c44:	00030d40 	.word	0x00030d40
1a001c48:	40086000 	.word	0x40086000

1a001c4c <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a001c4c:	b570      	push	{r4, r5, r6, lr}
1a001c4e:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = analogInput + 1;
1a001c50:	3001      	adds	r0, #1
1a001c52:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a001c54:	2600      	movs	r6, #0
1a001c56:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a001c5a:	4d11      	ldr	r5, [pc, #68]	; (1a001ca0 <adcRead+0x54>)
1a001c5c:	2201      	movs	r2, #1
1a001c5e:	4621      	mov	r1, r4
1a001c60:	4628      	mov	r0, r5
1a001c62:	f7ff f9bd 	bl	1a000fe0 <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a001c66:	4632      	mov	r2, r6
1a001c68:	2101      	movs	r1, #1
1a001c6a:	4628      	mov	r0, r5
1a001c6c:	f7ff f989 	bl	1a000f82 <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a001c70:	2200      	movs	r2, #0
1a001c72:	4621      	mov	r1, r4
1a001c74:	480a      	ldr	r0, [pc, #40]	; (1a001ca0 <adcRead+0x54>)
1a001c76:	f7ff f958 	bl	1a000f2a <Chip_ADC_ReadStatus>
   while(
1a001c7a:	2801      	cmp	r0, #1
1a001c7c:	d1f8      	bne.n	1a001c70 <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a001c7e:	4d08      	ldr	r5, [pc, #32]	; (1a001ca0 <adcRead+0x54>)
1a001c80:	f10d 0206 	add.w	r2, sp, #6
1a001c84:	4621      	mov	r1, r4
1a001c86:	4628      	mov	r0, r5
1a001c88:	f7ff f94b 	bl	1a000f22 <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a001c8c:	2200      	movs	r2, #0
1a001c8e:	4621      	mov	r1, r4
1a001c90:	4628      	mov	r0, r5
1a001c92:	f7ff f9a5 	bl	1a000fe0 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a001c96:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a001c9a:	b002      	add	sp, #8
1a001c9c:	bd70      	pop	{r4, r5, r6, pc}
1a001c9e:	bf00      	nop
1a001ca0:	400e3000 	.word	0x400e3000

1a001ca4 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a001ca4:	e7fe      	b.n	1a001ca4 <errorOcurred>

1a001ca6 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a001ca6:	4770      	bx	lr

1a001ca8 <Timer_Init>:
 * @return   nothing
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_Init( uint8_t timerNumber, uint32_t ticks,
                 callBackFuncPtr_t voidFunctionPointer )
{
1a001ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   /* Source:
   http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html */

   /*If timer period = CompareMatch0 Period = 0 => ERROR*/
   if (ticks==0) {
1a001cac:	2900      	cmp	r1, #0
1a001cae:	d077      	beq.n	1a001da0 <Timer_Init+0xf8>
1a001cb0:	4605      	mov	r5, r0
1a001cb2:	4617      	mov	r7, r2
1a001cb4:	460e      	mov	r6, r1
      errorOcurred(0);
   }

   /* Enable timer clock and reset it */
   Chip_TIMER_Init(timer_sd[timerNumber].name);
1a001cb6:	4604      	mov	r4, r0
1a001cb8:	493e      	ldr	r1, [pc, #248]	; (1a001db4 <Timer_Init+0x10c>)
1a001cba:	0043      	lsls	r3, r0, #1
1a001cbc:	4403      	add	r3, r0
1a001cbe:	009a      	lsls	r2, r3, #2
1a001cc0:	eb01 0802 	add.w	r8, r1, r2
1a001cc4:	5888      	ldr	r0, [r1, r2]
1a001cc6:	f7ff f8b9 	bl	1a000e3c <Chip_TIMER_Init>
   Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
1a001cca:	f898 3004 	ldrb.w	r3, [r8, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	Nothing
 */
STATIC INLINE void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
	LPC_RGU->RESET_CTRL[ResetNumber >> 5] = 1 << (ResetNumber & 31);
1a001cce:	f003 011f 	and.w	r1, r3, #31
1a001cd2:	095b      	lsrs	r3, r3, #5
1a001cd4:	2201      	movs	r2, #1
1a001cd6:	408a      	lsls	r2, r1
1a001cd8:	3340      	adds	r3, #64	; 0x40
1a001cda:	4937      	ldr	r1, [pc, #220]	; (1a001db8 <Timer_Init+0x110>)
1a001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
1a001ce0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a001ce4:	009a      	lsls	r2, r3, #2
1a001ce6:	4b33      	ldr	r3, [pc, #204]	; (1a001db4 <Timer_Init+0x10c>)
1a001ce8:	4413      	add	r3, r2
1a001cea:	791b      	ldrb	r3, [r3, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	true if the periperal is still being reset
 */
STATIC INLINE bool Chip_RGU_InReset(CHIP_RGU_RST_T ResetNumber)
{
	return !(LPC_RGU->RESET_ACTIVE_STATUS[ResetNumber >> 5] & (1 << (ResetNumber & 31)));
1a001cec:	095a      	lsrs	r2, r3, #5
1a001cee:	3254      	adds	r2, #84	; 0x54
1a001cf0:	4931      	ldr	r1, [pc, #196]	; (1a001db8 <Timer_Init+0x110>)
1a001cf2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a001cf6:	f003 031f 	and.w	r3, r3, #31
1a001cfa:	2201      	movs	r2, #1
1a001cfc:	fa02 f303 	lsl.w	r3, r2, r3
1a001d00:	4219      	tst	r1, r3
1a001d02:	d0ed      	beq.n	1a001ce0 <Timer_Init+0x38>
   Chip_TIMER_Reset(timer_sd[timerNumber].name);
1a001d04:	492b      	ldr	r1, [pc, #172]	; (1a001db4 <Timer_Init+0x10c>)
1a001d06:	fa05 f302 	lsl.w	r3, r5, r2
1a001d0a:	442b      	add	r3, r5
1a001d0c:	009a      	lsls	r2, r3, #2
1a001d0e:	eb01 0802 	add.w	r8, r1, r2
1a001d12:	588c      	ldr	r4, [r1, r2]
1a001d14:	4620      	mov	r0, r4
1a001d16:	f7ff f897 	bl	1a000e48 <Chip_TIMER_Reset>

   /* Update the defalut function pointer name of the Compare match 0*/
   timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMERCOMPAREMATCH0] = voidFunctionPointer;
1a001d1a:	012b      	lsls	r3, r5, #4
1a001d1c:	4a27      	ldr	r2, [pc, #156]	; (1a001dbc <Timer_Init+0x114>)
1a001d1e:	50d7      	str	r7, [r2, r3]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a001d20:	6963      	ldr	r3, [r4, #20]
1a001d22:	f043 0301 	orr.w	r3, r3, #1
1a001d26:	6163      	str	r3, [r4, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a001d28:	61a6      	str	r6, [r4, #24]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a001d2a:	6963      	ldr	r3, [r4, #20]
1a001d2c:	f043 0302 	orr.w	r3, r3, #2
1a001d30:	6163      	str	r3, [r4, #20]
	pTMR->TCR |= TIMER_ENABLE;
1a001d32:	6863      	ldr	r3, [r4, #4]
1a001d34:	f043 0301 	orr.w	r3, r3, #1
1a001d38:	6063      	str	r3, [r4, #4]

   /*Enable timer*/
   Chip_TIMER_Enable(timer_sd[timerNumber].name);

   /* Enable timer interrupt */
   NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
1a001d3a:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a001d3e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001d40:	2b00      	cmp	r3, #0
1a001d42:	db30      	blt.n	1a001da6 <Timer_Init+0xfe>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001d44:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a001d48:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a001d4c:	22c0      	movs	r2, #192	; 0xc0
1a001d4e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
1a001d52:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a001d56:	009a      	lsls	r2, r3, #2
1a001d58:	4b16      	ldr	r3, [pc, #88]	; (1a001db4 <Timer_Init+0x10c>)
1a001d5a:	4413      	add	r3, r2
1a001d5c:	689a      	ldr	r2, [r3, #8]
1a001d5e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001d60:	2b00      	cmp	r3, #0
1a001d62:	db08      	blt.n	1a001d76 <Timer_Init+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001d64:	f002 021f 	and.w	r2, r2, #31
1a001d68:	095b      	lsrs	r3, r3, #5
1a001d6a:	2101      	movs	r1, #1
1a001d6c:	fa01 f202 	lsl.w	r2, r1, r2
1a001d70:	4913      	ldr	r1, [pc, #76]	; (1a001dc0 <Timer_Init+0x118>)
1a001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
1a001d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a001d7a:	00aa      	lsls	r2, r5, #2
1a001d7c:	4b0d      	ldr	r3, [pc, #52]	; (1a001db4 <Timer_Init+0x10c>)
1a001d7e:	4413      	add	r3, r2
1a001d80:	689a      	ldr	r2, [r3, #8]
1a001d82:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001d84:	2b00      	cmp	r3, #0
1a001d86:	db09      	blt.n	1a001d9c <Timer_Init+0xf4>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001d88:	f002 021f 	and.w	r2, r2, #31
1a001d8c:	095b      	lsrs	r3, r3, #5
1a001d8e:	2101      	movs	r1, #1
1a001d90:	fa01 f202 	lsl.w	r2, r1, r2
1a001d94:	3360      	adds	r3, #96	; 0x60
1a001d96:	490a      	ldr	r1, [pc, #40]	; (1a001dc0 <Timer_Init+0x118>)
1a001d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a001d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      errorOcurred(0);
1a001da0:	2000      	movs	r0, #0
1a001da2:	f7ff ff7f 	bl	1a001ca4 <errorOcurred>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001da6:	f002 020f 	and.w	r2, r2, #15
1a001daa:	4b06      	ldr	r3, [pc, #24]	; (1a001dc4 <Timer_Init+0x11c>)
1a001dac:	4413      	add	r3, r2
1a001dae:	22c0      	movs	r2, #192	; 0xc0
1a001db0:	761a      	strb	r2, [r3, #24]
1a001db2:	e7ce      	b.n	1a001d52 <Timer_Init+0xaa>
1a001db4:	1a004b5c 	.word	0x1a004b5c
1a001db8:	40053000 	.word	0x40053000
1a001dbc:	10000044 	.word	0x10000044
1a001dc0:	e000e100 	.word	0xe000e100
1a001dc4:	e000ecfc 	.word	0xe000ecfc

1a001dc8 <Timer_microsecondsToTicks>:
 * @note   Can be used for the second parameter in the Timer_init
 */
uint32_t Timer_microsecondsToTicks( uint32_t uS )
{
   return (uS*(LPC4337_MAX_FREC/1000000));
}
1a001dc8:	23cc      	movs	r3, #204	; 0xcc
1a001dca:	fb03 f000 	mul.w	r0, r3, r0
1a001dce:	4770      	bx	lr

1a001dd0 <Timer_EnableCompareMatch>:
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_EnableCompareMatch( uint8_t timerNumber, uint8_t compareMatchNumber,
                               uint32_t ticks,
                               callBackFuncPtr_t voidFunctionPointer )
{
1a001dd0:	b430      	push	{r4, r5}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = voidFunctionPointer;
1a001dd2:	eb01 0580 	add.w	r5, r1, r0, lsl #2
1a001dd6:	4c0a      	ldr	r4, [pc, #40]	; (1a001e00 <Timer_EnableCompareMatch+0x30>)
1a001dd8:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

   Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, compareMatchNumber);
1a001ddc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001de0:	0083      	lsls	r3, r0, #2
1a001de2:	4808      	ldr	r0, [pc, #32]	; (1a001e04 <Timer_EnableCompareMatch+0x34>)
1a001de4:	58c3      	ldr	r3, [r0, r3]
1a001de6:	b249      	sxtb	r1, r1
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a001de8:	6958      	ldr	r0, [r3, #20]
1a001dea:	eb01 0541 	add.w	r5, r1, r1, lsl #1
1a001dee:	2401      	movs	r4, #1
1a001df0:	40ac      	lsls	r4, r5
1a001df2:	4320      	orrs	r0, r4
1a001df4:	6158      	str	r0, [r3, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a001df6:	3106      	adds	r1, #6
1a001df8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber, ticks);
}
1a001dfc:	bc30      	pop	{r4, r5}
1a001dfe:	4770      	bx	lr
1a001e00:	10000044 	.word	0x10000044
1a001e04:	1a004b5c 	.word	0x1a004b5c

1a001e08 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a001e08:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001e0a:	2400      	movs	r4, #0
1a001e0c:	e001      	b.n	1a001e12 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001e0e:	3401      	adds	r4, #1
1a001e10:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001e12:	2c03      	cmp	r4, #3
1a001e14:	d812      	bhi.n	1a001e3c <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a001e16:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001e18:	4b09      	ldr	r3, [pc, #36]	; (1a001e40 <TIMER0_IRQHandler+0x38>)
1a001e1a:	681a      	ldr	r2, [r3, #0]
1a001e1c:	f004 010f 	and.w	r1, r4, #15
1a001e20:	2301      	movs	r3, #1
1a001e22:	408b      	lsls	r3, r1
1a001e24:	421a      	tst	r2, r3
1a001e26:	d0f2      	beq.n	1a001e0e <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001e28:	4b06      	ldr	r3, [pc, #24]	; (1a001e44 <TIMER0_IRQHandler+0x3c>)
1a001e2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001e2e:	2000      	movs	r0, #0
1a001e30:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001e32:	2301      	movs	r3, #1
1a001e34:	40ab      	lsls	r3, r5
1a001e36:	4a02      	ldr	r2, [pc, #8]	; (1a001e40 <TIMER0_IRQHandler+0x38>)
1a001e38:	6013      	str	r3, [r2, #0]
1a001e3a:	e7e8      	b.n	1a001e0e <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001e3c:	bd38      	pop	{r3, r4, r5, pc}
1a001e3e:	bf00      	nop
1a001e40:	40084000 	.word	0x40084000
1a001e44:	10000044 	.word	0x10000044

1a001e48 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001e48:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001e4a:	2400      	movs	r4, #0
1a001e4c:	e001      	b.n	1a001e52 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001e4e:	3401      	adds	r4, #1
1a001e50:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001e52:	2c03      	cmp	r4, #3
1a001e54:	d813      	bhi.n	1a001e7e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001e56:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001e58:	4b09      	ldr	r3, [pc, #36]	; (1a001e80 <TIMER1_IRQHandler+0x38>)
1a001e5a:	681a      	ldr	r2, [r3, #0]
1a001e5c:	f004 010f 	and.w	r1, r4, #15
1a001e60:	2301      	movs	r3, #1
1a001e62:	408b      	lsls	r3, r1
1a001e64:	421a      	tst	r2, r3
1a001e66:	d0f2      	beq.n	1a001e4e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001e68:	1d23      	adds	r3, r4, #4
1a001e6a:	4a06      	ldr	r2, [pc, #24]	; (1a001e84 <TIMER1_IRQHandler+0x3c>)
1a001e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001e70:	2000      	movs	r0, #0
1a001e72:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001e74:	2301      	movs	r3, #1
1a001e76:	40ab      	lsls	r3, r5
1a001e78:	4a01      	ldr	r2, [pc, #4]	; (1a001e80 <TIMER1_IRQHandler+0x38>)
1a001e7a:	6013      	str	r3, [r2, #0]
1a001e7c:	e7e7      	b.n	1a001e4e <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001e7e:	bd38      	pop	{r3, r4, r5, pc}
1a001e80:	40085000 	.word	0x40085000
1a001e84:	10000044 	.word	0x10000044

1a001e88 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001e88:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001e8a:	2400      	movs	r4, #0
1a001e8c:	e001      	b.n	1a001e92 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001e8e:	3401      	adds	r4, #1
1a001e90:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001e92:	2c03      	cmp	r4, #3
1a001e94:	d814      	bhi.n	1a001ec0 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001e96:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001e98:	4b0a      	ldr	r3, [pc, #40]	; (1a001ec4 <TIMER2_IRQHandler+0x3c>)
1a001e9a:	681a      	ldr	r2, [r3, #0]
1a001e9c:	f004 010f 	and.w	r1, r4, #15
1a001ea0:	2301      	movs	r3, #1
1a001ea2:	408b      	lsls	r3, r1
1a001ea4:	421a      	tst	r2, r3
1a001ea6:	d0f2      	beq.n	1a001e8e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001ea8:	f104 0308 	add.w	r3, r4, #8
1a001eac:	4a06      	ldr	r2, [pc, #24]	; (1a001ec8 <TIMER2_IRQHandler+0x40>)
1a001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001eb2:	2000      	movs	r0, #0
1a001eb4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001eb6:	2301      	movs	r3, #1
1a001eb8:	40ab      	lsls	r3, r5
1a001eba:	4a02      	ldr	r2, [pc, #8]	; (1a001ec4 <TIMER2_IRQHandler+0x3c>)
1a001ebc:	6013      	str	r3, [r2, #0]
1a001ebe:	e7e6      	b.n	1a001e8e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001ec0:	bd38      	pop	{r3, r4, r5, pc}
1a001ec2:	bf00      	nop
1a001ec4:	400c3000 	.word	0x400c3000
1a001ec8:	10000044 	.word	0x10000044

1a001ecc <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a001ecc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001ece:	2400      	movs	r4, #0
1a001ed0:	e001      	b.n	1a001ed6 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001ed2:	3401      	adds	r4, #1
1a001ed4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001ed6:	2c03      	cmp	r4, #3
1a001ed8:	d814      	bhi.n	1a001f04 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a001eda:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001edc:	4b0a      	ldr	r3, [pc, #40]	; (1a001f08 <TIMER3_IRQHandler+0x3c>)
1a001ede:	681a      	ldr	r2, [r3, #0]
1a001ee0:	f004 010f 	and.w	r1, r4, #15
1a001ee4:	2301      	movs	r3, #1
1a001ee6:	408b      	lsls	r3, r1
1a001ee8:	421a      	tst	r2, r3
1a001eea:	d0f2      	beq.n	1a001ed2 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001eec:	f104 030c 	add.w	r3, r4, #12
1a001ef0:	4a06      	ldr	r2, [pc, #24]	; (1a001f0c <TIMER3_IRQHandler+0x40>)
1a001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001ef6:	2000      	movs	r0, #0
1a001ef8:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001efa:	2301      	movs	r3, #1
1a001efc:	40ab      	lsls	r3, r5
1a001efe:	4a02      	ldr	r2, [pc, #8]	; (1a001f08 <TIMER3_IRQHandler+0x3c>)
1a001f00:	6013      	str	r3, [r2, #0]
1a001f02:	e7e6      	b.n	1a001ed2 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a001f04:	bd38      	pop	{r3, r4, r5, pc}
1a001f06:	bf00      	nop
1a001f08:	400c4000 	.word	0x400c4000
1a001f0c:	10000044 	.word	0x10000044

1a001f10 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001f10:	4b01      	ldr	r3, [pc, #4]	; (1a001f18 <tickRead+0x8>)
1a001f12:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001f16:	4770      	bx	lr
1a001f18:	10000160 	.word	0x10000160

1a001f1c <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a001f1c:	b130      	cbz	r0, 1a001f2c <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a001f1e:	4a05      	ldr	r2, [pc, #20]	; (1a001f34 <tickCallbackSet+0x18>)
1a001f20:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a001f22:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a001f24:	b121      	cbz	r1, 1a001f30 <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a001f26:	4b04      	ldr	r3, [pc, #16]	; (1a001f38 <tickCallbackSet+0x1c>)
1a001f28:	6019      	str	r1, [r3, #0]
1a001f2a:	4770      	bx	lr
         retVal = FALSE;
1a001f2c:	2000      	movs	r0, #0
1a001f2e:	e7f9      	b.n	1a001f24 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a001f30:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a001f32:	4770      	bx	lr
1a001f34:	10000168 	.word	0x10000168
1a001f38:	10000158 	.word	0x10000158

1a001f3c <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001f3c:	b118      	cbz	r0, 1a001f46 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001f3e:	4b04      	ldr	r3, [pc, #16]	; (1a001f50 <tickPowerSet+0x14>)
1a001f40:	2207      	movs	r2, #7
1a001f42:	601a      	str	r2, [r3, #0]
1a001f44:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001f46:	4b02      	ldr	r3, [pc, #8]	; (1a001f50 <tickPowerSet+0x14>)
1a001f48:	2200      	movs	r2, #0
1a001f4a:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001f4c:	4770      	bx	lr
1a001f4e:	bf00      	nop
1a001f50:	e000e010 	.word	0xe000e010

1a001f54 <tickInit>:
{
1a001f54:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001f56:	ea50 0401 	orrs.w	r4, r0, r1
1a001f5a:	d02a      	beq.n	1a001fb2 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001f5c:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001f60:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001f64:	2b00      	cmp	r3, #0
1a001f66:	bf08      	it	eq
1a001f68:	2a32      	cmpeq	r2, #50	; 0x32
1a001f6a:	d227      	bcs.n	1a001fbc <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001f6c:	4b14      	ldr	r3, [pc, #80]	; (1a001fc0 <tickInit+0x6c>)
1a001f6e:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001f72:	4b14      	ldr	r3, [pc, #80]	; (1a001fc4 <tickInit+0x70>)
1a001f74:	681b      	ldr	r3, [r3, #0]
1a001f76:	fba3 4500 	umull	r4, r5, r3, r0
1a001f7a:	fb03 5501 	mla	r5, r3, r1, r5
1a001f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001f82:	2300      	movs	r3, #0
1a001f84:	4620      	mov	r0, r4
1a001f86:	4629      	mov	r1, r5
1a001f88:	f000 ffd2 	bl	1a002f30 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001f8c:	3801      	subs	r0, #1
1a001f8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001f92:	d209      	bcs.n	1a001fa8 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001f94:	4b0c      	ldr	r3, [pc, #48]	; (1a001fc8 <tickInit+0x74>)
1a001f96:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001f98:	4a0c      	ldr	r2, [pc, #48]	; (1a001fcc <tickInit+0x78>)
1a001f9a:	21e0      	movs	r1, #224	; 0xe0
1a001f9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001fa0:	2200      	movs	r2, #0
1a001fa2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001fa4:	2207      	movs	r2, #7
1a001fa6:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001fa8:	2001      	movs	r0, #1
1a001faa:	f7ff ffc7 	bl	1a001f3c <tickPowerSet>
      bool_t ret_val = 1;
1a001fae:	2001      	movs	r0, #1
}
1a001fb0:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001fb2:	2000      	movs	r0, #0
1a001fb4:	f7ff ffc2 	bl	1a001f3c <tickPowerSet>
         ret_val = 0;
1a001fb8:	2000      	movs	r0, #0
1a001fba:	e7f9      	b.n	1a001fb0 <tickInit+0x5c>
            ret_val = 0;
1a001fbc:	2000      	movs	r0, #0
1a001fbe:	e7f7      	b.n	1a001fb0 <tickInit+0x5c>
1a001fc0:	10000088 	.word	0x10000088
1a001fc4:	100001a8 	.word	0x100001a8
1a001fc8:	e000e010 	.word	0xe000e010
1a001fcc:	e000ed00 	.word	0xe000ed00

1a001fd0 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001fd0:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001fd2:	4a07      	ldr	r2, [pc, #28]	; (1a001ff0 <SysTick_Handler+0x20>)
1a001fd4:	6813      	ldr	r3, [r2, #0]
1a001fd6:	6851      	ldr	r1, [r2, #4]
1a001fd8:	3301      	adds	r3, #1
1a001fda:	f141 0100 	adc.w	r1, r1, #0
1a001fde:	6013      	str	r3, [r2, #0]
1a001fe0:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001fe2:	4b04      	ldr	r3, [pc, #16]	; (1a001ff4 <SysTick_Handler+0x24>)
1a001fe4:	681b      	ldr	r3, [r3, #0]
1a001fe6:	b113      	cbz	r3, 1a001fee <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001fe8:	4a03      	ldr	r2, [pc, #12]	; (1a001ff8 <SysTick_Handler+0x28>)
1a001fea:	6810      	ldr	r0, [r2, #0]
1a001fec:	4798      	blx	r3
   }
}
1a001fee:	bd08      	pop	{r3, pc}
1a001ff0:	10000160 	.word	0x10000160
1a001ff4:	10000168 	.word	0x10000168
1a001ff8:	10000158 	.word	0x10000158

1a001ffc <uartProcessIRQ>:
{
1a001ffc:	b570      	push	{r4, r5, r6, lr}
1a001ffe:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002000:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a002004:	0093      	lsls	r3, r2, #2
1a002006:	4a1f      	ldr	r2, [pc, #124]	; (1a002084 <uartProcessIRQ+0x88>)
1a002008:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a00200a:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a00200c:	b2ed      	uxtb	r5, r5
1a00200e:	f015 0f01 	tst.w	r5, #1
1a002012:	d009      	beq.n	1a002028 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002014:	b920      	cbnz	r0, 1a002020 <uartProcessIRQ+0x24>
1a002016:	4b1c      	ldr	r3, [pc, #112]	; (1a002088 <uartProcessIRQ+0x8c>)
1a002018:	681b      	ldr	r3, [r3, #0]
1a00201a:	b10b      	cbz	r3, 1a002020 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a00201c:	2000      	movs	r0, #0
1a00201e:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002020:	2c03      	cmp	r4, #3
1a002022:	d013      	beq.n	1a00204c <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002024:	2c05      	cmp	r4, #5
1a002026:	d018      	beq.n	1a00205a <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002028:	f015 0f20 	tst.w	r5, #32
1a00202c:	d00d      	beq.n	1a00204a <uartProcessIRQ+0x4e>
	return pUART->IER;
1a00202e:	6873      	ldr	r3, [r6, #4]
1a002030:	f013 0f02 	tst.w	r3, #2
1a002034:	d009      	beq.n	1a00204a <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a002036:	b924      	cbnz	r4, 1a002042 <uartProcessIRQ+0x46>
1a002038:	4b14      	ldr	r3, [pc, #80]	; (1a00208c <uartProcessIRQ+0x90>)
1a00203a:	681b      	ldr	r3, [r3, #0]
1a00203c:	b10b      	cbz	r3, 1a002042 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a00203e:	2000      	movs	r0, #0
1a002040:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002042:	2c03      	cmp	r4, #3
1a002044:	d010      	beq.n	1a002068 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002046:	2c05      	cmp	r4, #5
1a002048:	d015      	beq.n	1a002076 <uartProcessIRQ+0x7a>
}
1a00204a:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00204c:	4b10      	ldr	r3, [pc, #64]	; (1a002090 <uartProcessIRQ+0x94>)
1a00204e:	681b      	ldr	r3, [r3, #0]
1a002050:	2b00      	cmp	r3, #0
1a002052:	d0e7      	beq.n	1a002024 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a002054:	2000      	movs	r0, #0
1a002056:	4798      	blx	r3
1a002058:	e7e4      	b.n	1a002024 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00205a:	4b0e      	ldr	r3, [pc, #56]	; (1a002094 <uartProcessIRQ+0x98>)
1a00205c:	681b      	ldr	r3, [r3, #0]
1a00205e:	2b00      	cmp	r3, #0
1a002060:	d0e2      	beq.n	1a002028 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a002062:	2000      	movs	r0, #0
1a002064:	4798      	blx	r3
1a002066:	e7df      	b.n	1a002028 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002068:	4b0b      	ldr	r3, [pc, #44]	; (1a002098 <uartProcessIRQ+0x9c>)
1a00206a:	681b      	ldr	r3, [r3, #0]
1a00206c:	2b00      	cmp	r3, #0
1a00206e:	d0ea      	beq.n	1a002046 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a002070:	2000      	movs	r0, #0
1a002072:	4798      	blx	r3
1a002074:	e7e7      	b.n	1a002046 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002076:	4b09      	ldr	r3, [pc, #36]	; (1a00209c <uartProcessIRQ+0xa0>)
1a002078:	681b      	ldr	r3, [r3, #0]
1a00207a:	2b00      	cmp	r3, #0
1a00207c:	d0e5      	beq.n	1a00204a <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a00207e:	2000      	movs	r0, #0
1a002080:	4798      	blx	r3
}
1a002082:	e7e2      	b.n	1a00204a <uartProcessIRQ+0x4e>
1a002084:	1a004b8c 	.word	0x1a004b8c
1a002088:	1000016c 	.word	0x1000016c
1a00208c:	10000178 	.word	0x10000178
1a002090:	10000170 	.word	0x10000170
1a002094:	10000174 	.word	0x10000174
1a002098:	1000017c 	.word	0x1000017c
1a00209c:	10000180 	.word	0x10000180

1a0020a0 <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a0020a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0020a4:	0083      	lsls	r3, r0, #2
1a0020a6:	4a03      	ldr	r2, [pc, #12]	; (1a0020b4 <uartRxReady+0x14>)
1a0020a8:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0020aa:	6958      	ldr	r0, [r3, #20]
}
1a0020ac:	f000 0001 	and.w	r0, r0, #1
1a0020b0:	4770      	bx	lr
1a0020b2:	bf00      	nop
1a0020b4:	1a004b8c 	.word	0x1a004b8c

1a0020b8 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0020b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0020bc:	0083      	lsls	r3, r0, #2
1a0020be:	4a03      	ldr	r2, [pc, #12]	; (1a0020cc <uartTxReady+0x14>)
1a0020c0:	58d3      	ldr	r3, [r2, r3]
1a0020c2:	6958      	ldr	r0, [r3, #20]
}
1a0020c4:	f000 0020 	and.w	r0, r0, #32
1a0020c8:	4770      	bx	lr
1a0020ca:	bf00      	nop
1a0020cc:	1a004b8c 	.word	0x1a004b8c

1a0020d0 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0020d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0020d4:	0083      	lsls	r3, r0, #2
1a0020d6:	4a02      	ldr	r2, [pc, #8]	; (1a0020e0 <uartRxRead+0x10>)
1a0020d8:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0020da:	6818      	ldr	r0, [r3, #0]
}
1a0020dc:	b2c0      	uxtb	r0, r0
1a0020de:	4770      	bx	lr
1a0020e0:	1a004b8c 	.word	0x1a004b8c

1a0020e4 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0020e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0020e8:	0083      	lsls	r3, r0, #2
1a0020ea:	4a02      	ldr	r2, [pc, #8]	; (1a0020f4 <uartTxWrite+0x10>)
1a0020ec:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0020ee:	6019      	str	r1, [r3, #0]
}
1a0020f0:	4770      	bx	lr
1a0020f2:	bf00      	nop
1a0020f4:	1a004b8c 	.word	0x1a004b8c

1a0020f8 <uartInit>:
{
1a0020f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0020fc:	4680      	mov	r8, r0
1a0020fe:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002100:	4c19      	ldr	r4, [pc, #100]	; (1a002168 <uartInit+0x70>)
1a002102:	0045      	lsls	r5, r0, #1
1a002104:	182a      	adds	r2, r5, r0
1a002106:	0093      	lsls	r3, r2, #2
1a002108:	18e6      	adds	r6, r4, r3
1a00210a:	58e7      	ldr	r7, [r4, r3]
1a00210c:	4638      	mov	r0, r7
1a00210e:	f7ff fb39 	bl	1a001784 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002112:	4649      	mov	r1, r9
1a002114:	4638      	mov	r0, r7
1a002116:	f7ff fb5f 	bl	1a0017d8 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00211a:	2307      	movs	r3, #7
1a00211c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00211e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a002120:	2301      	movs	r3, #1
1a002122:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002124:	7930      	ldrb	r0, [r6, #4]
1a002126:	7973      	ldrb	r3, [r6, #5]
1a002128:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00212a:	f042 0218 	orr.w	r2, r2, #24
1a00212e:	490f      	ldr	r1, [pc, #60]	; (1a00216c <uartInit+0x74>)
1a002130:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002138:	79f0      	ldrb	r0, [r6, #7]
1a00213a:	7a33      	ldrb	r3, [r6, #8]
1a00213c:	7a72      	ldrb	r2, [r6, #9]
1a00213e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002142:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a00214a:	f1b8 0f01 	cmp.w	r8, #1
1a00214e:	d001      	beq.n	1a002154 <uartInit+0x5c>
}
1a002150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002154:	4a06      	ldr	r2, [pc, #24]	; (1a002170 <uartInit+0x78>)
1a002156:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002158:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00215c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00215e:	221a      	movs	r2, #26
1a002160:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002164:	e7f4      	b.n	1a002150 <uartInit+0x58>
1a002166:	bf00      	nop
1a002168:	1a004b8c 	.word	0x1a004b8c
1a00216c:	40086000 	.word	0x40086000
1a002170:	40081000 	.word	0x40081000

1a002174 <uartReadByte>:
{
1a002174:	b538      	push	{r3, r4, r5, lr}
1a002176:	4605      	mov	r5, r0
1a002178:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a00217a:	f7ff ff91 	bl	1a0020a0 <uartRxReady>
1a00217e:	4603      	mov	r3, r0
1a002180:	b908      	cbnz	r0, 1a002186 <uartReadByte+0x12>
}
1a002182:	4618      	mov	r0, r3
1a002184:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a002186:	4628      	mov	r0, r5
1a002188:	f7ff ffa2 	bl	1a0020d0 <uartRxRead>
1a00218c:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a00218e:	2301      	movs	r3, #1
1a002190:	e7f7      	b.n	1a002182 <uartReadByte+0xe>

1a002192 <waitForReceiveStringOrTimeout>:
{
1a002192:	b510      	push	{r4, lr}
1a002194:	b082      	sub	sp, #8
1a002196:	460c      	mov	r4, r1
   switch( instance->state ) {
1a002198:	780b      	ldrb	r3, [r1, #0]
1a00219a:	2b04      	cmp	r3, #4
1a00219c:	d836      	bhi.n	1a00220c <waitForReceiveStringOrTimeout+0x7a>
1a00219e:	e8df f003 	tbb	[pc, r3]
1a0021a2:	1003      	.short	0x1003
1a0021a4:	352f      	.short	0x352f
1a0021a6:	32          	.byte	0x32
1a0021a7:	00          	.byte	0x00
      delayInit( &(instance->delay), instance->timeout );
1a0021a8:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0021ac:	f101 0018 	add.w	r0, r1, #24
1a0021b0:	f000 f926 	bl	1a002400 <delayInit>
      instance->stringIndex = 0;
1a0021b4:	2300      	movs	r3, #0
1a0021b6:	8163      	strh	r3, [r4, #10]
      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a0021b8:	2301      	movs	r3, #1
1a0021ba:	7023      	strb	r3, [r4, #0]
}
1a0021bc:	7820      	ldrb	r0, [r4, #0]
1a0021be:	b002      	add	sp, #8
1a0021c0:	bd10      	pop	{r4, pc}
      if( uartReadByte( uart, &receiveByte ) ) {
1a0021c2:	f10d 0107 	add.w	r1, sp, #7
1a0021c6:	f7ff ffd5 	bl	1a002174 <uartReadByte>
1a0021ca:	b130      	cbz	r0, 1a0021da <waitForReceiveStringOrTimeout+0x48>
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a0021cc:	6862      	ldr	r2, [r4, #4]
1a0021ce:	8963      	ldrh	r3, [r4, #10]
1a0021d0:	5cd1      	ldrb	r1, [r2, r3]
1a0021d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a0021d6:	4291      	cmp	r1, r2
1a0021d8:	d008      	beq.n	1a0021ec <waitForReceiveStringOrTimeout+0x5a>
      if( delayRead( &(instance->delay) ) ) {
1a0021da:	f104 0018 	add.w	r0, r4, #24
1a0021de:	f000 f91f 	bl	1a002420 <delayRead>
1a0021e2:	2800      	cmp	r0, #0
1a0021e4:	d0ea      	beq.n	1a0021bc <waitForReceiveStringOrTimeout+0x2a>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a0021e6:	2304      	movs	r3, #4
1a0021e8:	7023      	strb	r3, [r4, #0]
1a0021ea:	e7e7      	b.n	1a0021bc <waitForReceiveStringOrTimeout+0x2a>
            (instance->stringIndex)++;
1a0021ec:	3301      	adds	r3, #1
1a0021ee:	b29b      	uxth	r3, r3
1a0021f0:	8163      	strh	r3, [r4, #10]
            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a0021f2:	8922      	ldrh	r2, [r4, #8]
1a0021f4:	3a01      	subs	r2, #1
1a0021f6:	4293      	cmp	r3, r2
1a0021f8:	d1ef      	bne.n	1a0021da <waitForReceiveStringOrTimeout+0x48>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a0021fa:	2302      	movs	r3, #2
1a0021fc:	7023      	strb	r3, [r4, #0]
1a0021fe:	e7ec      	b.n	1a0021da <waitForReceiveStringOrTimeout+0x48>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a002200:	2300      	movs	r3, #0
1a002202:	700b      	strb	r3, [r1, #0]
      break;
1a002204:	e7da      	b.n	1a0021bc <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a002206:	2300      	movs	r3, #0
1a002208:	700b      	strb	r3, [r1, #0]
      break;
1a00220a:	e7d7      	b.n	1a0021bc <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a00220c:	2300      	movs	r3, #0
1a00220e:	700b      	strb	r3, [r1, #0]
      break;
1a002210:	e7d4      	b.n	1a0021bc <waitForReceiveStringOrTimeout+0x2a>

1a002212 <waitForReceiveStringOrTimeoutBlocking>:
{
1a002212:	b510      	push	{r4, lr}
1a002214:	b08c      	sub	sp, #48	; 0x30
1a002216:	4604      	mov	r4, r0
   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a002218:	2000      	movs	r0, #0
1a00221a:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a00221e:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a002220:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a002224:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a002228:	e9cd 2304 	strd	r2, r3, [sp, #16]
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a00222c:	2802      	cmp	r0, #2
1a00222e:	d006      	beq.n	1a00223e <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a002230:	2804      	cmp	r0, #4
1a002232:	d004      	beq.n	1a00223e <waitForReceiveStringOrTimeoutBlocking+0x2c>
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a002234:	4669      	mov	r1, sp
1a002236:	4620      	mov	r0, r4
1a002238:	f7ff ffab 	bl	1a002192 <waitForReceiveStringOrTimeout>
1a00223c:	e7f6      	b.n	1a00222c <waitForReceiveStringOrTimeoutBlocking+0x1a>
   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a00223e:	2804      	cmp	r0, #4
1a002240:	d002      	beq.n	1a002248 <waitForReceiveStringOrTimeoutBlocking+0x36>
   bool_t retVal = TRUE; // True if OK
1a002242:	2001      	movs	r0, #1
}
1a002244:	b00c      	add	sp, #48	; 0x30
1a002246:	bd10      	pop	{r4, pc}
      retVal = FALSE;
1a002248:	2000      	movs	r0, #0
1a00224a:	e7fb      	b.n	1a002244 <waitForReceiveStringOrTimeoutBlocking+0x32>

1a00224c <uartWriteByte>:
{
1a00224c:	b538      	push	{r3, r4, r5, lr}
1a00224e:	4604      	mov	r4, r0
1a002250:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a002252:	4620      	mov	r0, r4
1a002254:	f7ff ff30 	bl	1a0020b8 <uartTxReady>
1a002258:	2800      	cmp	r0, #0
1a00225a:	d0fa      	beq.n	1a002252 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a00225c:	4629      	mov	r1, r5
1a00225e:	4620      	mov	r0, r4
1a002260:	f7ff ff40 	bl	1a0020e4 <uartTxWrite>
}
1a002264:	bd38      	pop	{r3, r4, r5, pc}

1a002266 <uartWriteString>:
{
1a002266:	b538      	push	{r3, r4, r5, lr}
1a002268:	4605      	mov	r5, r0
1a00226a:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a00226c:	7821      	ldrb	r1, [r4, #0]
1a00226e:	b121      	cbz	r1, 1a00227a <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a002270:	4628      	mov	r0, r5
1a002272:	f7ff ffeb 	bl	1a00224c <uartWriteByte>
      str++;
1a002276:	3401      	adds	r4, #1
1a002278:	e7f8      	b.n	1a00226c <uartWriteString+0x6>
}
1a00227a:	bd38      	pop	{r3, r4, r5, pc}

1a00227c <uartWriteByteArray>:
{
1a00227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00227e:	4607      	mov	r7, r0
1a002280:	460e      	mov	r6, r1
1a002282:	4615      	mov	r5, r2
   for( i=0; i<byteArrayLen; i++ ) {
1a002284:	2400      	movs	r4, #0
1a002286:	42ac      	cmp	r4, r5
1a002288:	d205      	bcs.n	1a002296 <uartWriteByteArray+0x1a>
      uartWriteByte( uart, byteArray[i] );
1a00228a:	5d31      	ldrb	r1, [r6, r4]
1a00228c:	4638      	mov	r0, r7
1a00228e:	f7ff ffdd 	bl	1a00224c <uartWriteByte>
   for( i=0; i<byteArrayLen; i++ ) {
1a002292:	3401      	adds	r4, #1
1a002294:	e7f7      	b.n	1a002286 <uartWriteByteArray+0xa>
}
1a002296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a002298 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a002298:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00229a:	2003      	movs	r0, #3
1a00229c:	f7ff feae 	bl	1a001ffc <uartProcessIRQ>
}
1a0022a0:	bd08      	pop	{r3, pc}

1a0022a2 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0022a2:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0022a4:	2005      	movs	r0, #5
1a0022a6:	f7ff fea9 	bl	1a001ffc <uartProcessIRQ>
}
1a0022aa:	bd08      	pop	{r3, pc}

1a0022ac <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0022ac:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0022ae:	4b04      	ldr	r3, [pc, #16]	; (1a0022c0 <USB0_IRQHandler+0x14>)
1a0022b0:	681b      	ldr	r3, [r3, #0]
1a0022b2:	681b      	ldr	r3, [r3, #0]
1a0022b4:	68db      	ldr	r3, [r3, #12]
1a0022b6:	4a03      	ldr	r2, [pc, #12]	; (1a0022c4 <USB0_IRQHandler+0x18>)
1a0022b8:	6810      	ldr	r0, [r2, #0]
1a0022ba:	4798      	blx	r3
}
1a0022bc:	bd08      	pop	{r3, pc}
1a0022be:	bf00      	nop
1a0022c0:	100001ac 	.word	0x100001ac
1a0022c4:	10000184 	.word	0x10000184

1a0022c8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0022c8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0022ca:	f7fe ff5b 	bl	1a001184 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0022ce:	4b1a      	ldr	r3, [pc, #104]	; (1a002338 <boardInit+0x70>)
1a0022d0:	6818      	ldr	r0, [r3, #0]
1a0022d2:	f7ff fb2b 	bl	1a00192c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a0022d6:	2001      	movs	r0, #1
1a0022d8:	2100      	movs	r1, #0
1a0022da:	f7ff fe3b 	bl	1a001f54 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0022de:	2105      	movs	r1, #5
1a0022e0:	2000      	movs	r0, #0
1a0022e2:	f7ff fb4b 	bl	1a00197c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0022e6:	2100      	movs	r1, #0
1a0022e8:	2024      	movs	r0, #36	; 0x24
1a0022ea:	f7ff fb47 	bl	1a00197c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0022ee:	2100      	movs	r1, #0
1a0022f0:	2025      	movs	r0, #37	; 0x25
1a0022f2:	f7ff fb43 	bl	1a00197c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0022f6:	2100      	movs	r1, #0
1a0022f8:	2026      	movs	r0, #38	; 0x26
1a0022fa:	f7ff fb3f 	bl	1a00197c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0022fe:	2100      	movs	r1, #0
1a002300:	2027      	movs	r0, #39	; 0x27
1a002302:	f7ff fb3b 	bl	1a00197c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a002306:	2101      	movs	r1, #1
1a002308:	2028      	movs	r0, #40	; 0x28
1a00230a:	f7ff fb37 	bl	1a00197c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00230e:	2101      	movs	r1, #1
1a002310:	2029      	movs	r0, #41	; 0x29
1a002312:	f7ff fb33 	bl	1a00197c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a002316:	2101      	movs	r1, #1
1a002318:	202a      	movs	r0, #42	; 0x2a
1a00231a:	f7ff fb2f 	bl	1a00197c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00231e:	2101      	movs	r1, #1
1a002320:	202b      	movs	r0, #43	; 0x2b
1a002322:	f7ff fb2b 	bl	1a00197c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a002326:	2101      	movs	r1, #1
1a002328:	202c      	movs	r0, #44	; 0x2c
1a00232a:	f7ff fb27 	bl	1a00197c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00232e:	2101      	movs	r1, #1
1a002330:	202d      	movs	r0, #45	; 0x2d
1a002332:	f7ff fb23 	bl	1a00197c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a002336:	bd08      	pop	{r3, pc}
1a002338:	100001a8 	.word	0x100001a8

1a00233c <uartfd_write>:
   }
   return count;
}

static ssize_t uartfd_write(void *_cookie, const char *_buf, size_t _n)
{
1a00233c:	b510      	push	{r4, lr}
1a00233e:	4614      	mov	r4, r2
   uartWriteByteArray((uartMap_t) _cookie, (uint8_t*) _buf, (uint32_t) _n);
1a002340:	b2c0      	uxtb	r0, r0
1a002342:	f7ff ff9b 	bl	1a00227c <uartWriteByteArray>
   return _n;
}
1a002346:	4620      	mov	r0, r4
1a002348:	bd10      	pop	{r4, pc}

1a00234a <uartfd_read>:
{
1a00234a:	b570      	push	{r4, r5, r6, lr}
1a00234c:	b082      	sub	sp, #8
1a00234e:	4606      	mov	r6, r0
1a002350:	460c      	mov	r4, r1
1a002352:	4615      	mov	r5, r2
   while (count < _n) {
1a002354:	b16d      	cbz	r5, 1a002372 <uartfd_read+0x28>
      if (uartReadByte((uartMap_t) _cookie, &c))
1a002356:	f10d 0107 	add.w	r1, sp, #7
1a00235a:	b2f0      	uxtb	r0, r6
1a00235c:	f7ff ff0a 	bl	1a002174 <uartReadByte>
1a002360:	2800      	cmp	r0, #0
1a002362:	d0f7      	beq.n	1a002354 <uartfd_read+0xa>
         *_buf++ = c;
1a002364:	4621      	mov	r1, r4
1a002366:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00236a:	f801 3b01 	strb.w	r3, [r1], #1
1a00236e:	460c      	mov	r4, r1
1a002370:	e7f0      	b.n	1a002354 <uartfd_read+0xa>
}
1a002372:	2000      	movs	r0, #0
1a002374:	b002      	add	sp, #8
1a002376:	bd70      	pop	{r4, r5, r6, pc}

1a002378 <stdioPrintf>:
{
   return TRUE;
}

int stdioPrintf(uartMap_t uartPrintf, const char *format, ...)
{
1a002378:	b40e      	push	{r1, r2, r3}
1a00237a:	b530      	push	{r4, r5, lr}
1a00237c:	b084      	sub	sp, #16
1a00237e:	4605      	mov	r5, r0
1a002380:	ab07      	add	r3, sp, #28
1a002382:	f853 4b04 	ldr.w	r4, [r3], #4
   va_list args;
   va_start(args, format);
1a002386:	9303      	str	r3, [sp, #12]
   FILE *f = fopencookie((void*) uartPrintf, "w+", uartfd_vtable);
1a002388:	4b0d      	ldr	r3, [pc, #52]	; (1a0023c0 <stdioPrintf+0x48>)
1a00238a:	f103 0208 	add.w	r2, r3, #8
1a00238e:	e892 0003 	ldmia.w	r2, {r0, r1}
1a002392:	e88d 0003 	stmia.w	sp, {r0, r1}
1a002396:	cb0c      	ldmia	r3, {r2, r3}
1a002398:	490a      	ldr	r1, [pc, #40]	; (1a0023c4 <stdioPrintf+0x4c>)
1a00239a:	4628      	mov	r0, r5
1a00239c:	f001 fa40 	bl	1a003820 <fopencookie>
1a0023a0:	4605      	mov	r5, r0
   int ret = vfprintf(f, format, args);
1a0023a2:	9a03      	ldr	r2, [sp, #12]
1a0023a4:	4621      	mov	r1, r4
1a0023a6:	f001 fc9f 	bl	1a003ce8 <vfiprintf>
1a0023aa:	4604      	mov	r4, r0
   fclose(f);
1a0023ac:	4628      	mov	r0, r5
1a0023ae:	f000 ffb1 	bl	1a003314 <fclose>
   va_end(args);
   return ret;
}
1a0023b2:	4620      	mov	r0, r4
1a0023b4:	b004      	add	sp, #16
1a0023b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a0023ba:	b003      	add	sp, #12
1a0023bc:	4770      	bx	lr
1a0023be:	bf00      	nop
1a0023c0:	1a004bd8 	.word	0x1a004bd8
1a0023c4:	1a004bd4 	.word	0x1a004bd4

1a0023c8 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a0023c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0023cc:	4680      	mov	r8, r0
1a0023ce:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0023d0:	f7ff fd9e 	bl	1a001f10 <tickRead>
1a0023d4:	4606      	mov	r6, r0
1a0023d6:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a0023d8:	f7ff fd9a 	bl	1a001f10 <tickRead>
1a0023dc:	1b84      	subs	r4, r0, r6
1a0023de:	eb61 0507 	sbc.w	r5, r1, r7
1a0023e2:	4b06      	ldr	r3, [pc, #24]	; (1a0023fc <delay+0x34>)
1a0023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0023e8:	4640      	mov	r0, r8
1a0023ea:	4649      	mov	r1, r9
1a0023ec:	f000 fda0 	bl	1a002f30 <__aeabi_uldivmod>
1a0023f0:	428d      	cmp	r5, r1
1a0023f2:	bf08      	it	eq
1a0023f4:	4284      	cmpeq	r4, r0
1a0023f6:	d3ef      	bcc.n	1a0023d8 <delay+0x10>
}
1a0023f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0023fc:	10000088 	.word	0x10000088

1a002400 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a002400:	b510      	push	{r4, lr}
1a002402:	4604      	mov	r4, r0
1a002404:	4610      	mov	r0, r2
1a002406:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a002408:	4b04      	ldr	r3, [pc, #16]	; (1a00241c <delayInit+0x1c>)
1a00240a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00240e:	f000 fd8f 	bl	1a002f30 <__aeabi_uldivmod>
1a002412:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a002416:	2300      	movs	r3, #0
1a002418:	7423      	strb	r3, [r4, #16]
}
1a00241a:	bd10      	pop	{r4, pc}
1a00241c:	10000088 	.word	0x10000088

1a002420 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002422:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a002424:	7c05      	ldrb	r5, [r0, #16]
1a002426:	b93d      	cbnz	r5, 1a002438 <delayRead+0x18>
      delay->startTime = tickRead();
1a002428:	f7ff fd72 	bl	1a001f10 <tickRead>
1a00242c:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a002430:	2301      	movs	r3, #1
1a002432:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a002434:	4628      	mov	r0, r5
1a002436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a002438:	f7ff fd6a 	bl	1a001f10 <tickRead>
1a00243c:	6823      	ldr	r3, [r4, #0]
1a00243e:	6862      	ldr	r2, [r4, #4]
1a002440:	1ac6      	subs	r6, r0, r3
1a002442:	eb61 0702 	sbc.w	r7, r1, r2
1a002446:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a00244a:	429f      	cmp	r7, r3
1a00244c:	bf08      	it	eq
1a00244e:	4296      	cmpeq	r6, r2
1a002450:	d303      	bcc.n	1a00245a <delayRead+0x3a>
         delay->running = 0;
1a002452:	2300      	movs	r3, #0
1a002454:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a002456:	2501      	movs	r5, #1
1a002458:	e7ec      	b.n	1a002434 <delayRead+0x14>
   bool_t timeArrived = 0;
1a00245a:	2500      	movs	r5, #0
1a00245c:	e7ea      	b.n	1a002434 <delayRead+0x14>
1a00245e:	Address 0x1a00245e is out of bounds.


1a002460 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration )
{
1a002460:	b510      	push	{r4, lr}
1a002462:	4604      	mov	r4, r0
1a002464:	4610      	mov	r0, r2
1a002466:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a002468:	4b03      	ldr	r3, [pc, #12]	; (1a002478 <delayWrite+0x18>)
1a00246a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00246e:	f000 fd5f 	bl	1a002f30 <__aeabi_uldivmod>
1a002472:	e9c4 0102 	strd	r0, r1, [r4, #8]
}
1a002476:	bd10      	pop	{r4, pc}
1a002478:	10000088 	.word	0x10000088

1a00247c <enableGPIOIrq>:

   Chip_PININT_Init(LPC_GPIO_PIN_INT);
}

static void enableGPIOIrq(uint8_t irqChannel, uint8_t port, uint8_t pin, uint8_t edge)
{
1a00247c:	b4f0      	push	{r4, r5, r6, r7}
	int32_t of = (PortSel & 3) << 3;
1a00247e:	00c4      	lsls	r4, r0, #3
1a002480:	f004 0418 	and.w	r4, r4, #24
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
1a002484:	0149      	lsls	r1, r1, #5
1a002486:	b2c9      	uxtb	r1, r1
1a002488:	f002 021f 	and.w	r2, r2, #31
1a00248c:	4311      	orrs	r1, r2
1a00248e:	40a1      	lsls	r1, r4
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a002490:	0882      	lsrs	r2, r0, #2
1a002492:	4f1e      	ldr	r7, [pc, #120]	; (1a00250c <enableGPIOIrq+0x90>)
1a002494:	f502 7260 	add.w	r2, r2, #896	; 0x380
1a002498:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
1a00249c:	26ff      	movs	r6, #255	; 0xff
1a00249e:	fa06 f404 	lsl.w	r4, r6, r4
1a0024a2:	ea25 0404 	bic.w	r4, r5, r4
1a0024a6:	4321      	orrs	r1, r4
1a0024a8:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    * Select irq channel to handle a GPIO interrupt, using its port and pin to specify it
    * From EduCiaa pin out spec: GPIO1[9] -> port 1 and pin 9
    */
   Chip_SCU_GPIOIntPinSel(irqChannel , port, pin);
   /* Clear actual configured interrupt status */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT, PININTCH(irqChannel));
1a0024ac:	2201      	movs	r2, #1
1a0024ae:	4082      	lsls	r2, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0024b0:	4917      	ldr	r1, [pc, #92]	; (1a002510 <enableGPIOIrq+0x94>)
1a0024b2:	624a      	str	r2, [r1, #36]	; 0x24
	pPININT->ISEL &= ~pins;
1a0024b4:	680c      	ldr	r4, [r1, #0]
1a0024b6:	ea24 0402 	bic.w	r4, r4, r2
1a0024ba:	600c      	str	r4, [r1, #0]
   /* Set edge interrupt mode */
   Chip_PININT_SetPinModeEdge(LPC_GPIO_PIN_INT, PININTCH(irqChannel));

   if ( edge == RAISING_EDGE) {
1a0024bc:	b9e3      	cbnz	r3, 1a0024f8 <enableGPIOIrq+0x7c>
	pPININT->SIENR = pins;
1a0024be:	4b14      	ldr	r3, [pc, #80]	; (1a002510 <enableGPIOIrq+0x94>)
1a0024c0:	609a      	str	r2, [r3, #8]
      Chip_PININT_EnableIntHigh(LPC_GPIO_PIN_INT, PININTCH(irqChannel));
      Chip_PININT_EnableIntLow(LPC_GPIO_PIN_INT, PININTCH(irqChannel));
   }

   /* Clear pending irq channel interrupts */
   NVIC_ClearPendingIRQ(PIN_INT0_IRQn + irqChannel);
1a0024c2:	3020      	adds	r0, #32
1a0024c4:	b2c0      	uxtb	r0, r0
1a0024c6:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
1a0024c8:	2b00      	cmp	r3, #0
1a0024ca:	db08      	blt.n	1a0024de <enableGPIOIrq+0x62>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0024cc:	f000 041f 	and.w	r4, r0, #31
1a0024d0:	095a      	lsrs	r2, r3, #5
1a0024d2:	2101      	movs	r1, #1
1a0024d4:	40a1      	lsls	r1, r4
1a0024d6:	3260      	adds	r2, #96	; 0x60
1a0024d8:	4c0e      	ldr	r4, [pc, #56]	; (1a002514 <enableGPIOIrq+0x98>)
1a0024da:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
1a0024de:	2b00      	cmp	r3, #0
1a0024e0:	db08      	blt.n	1a0024f4 <enableGPIOIrq+0x78>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0024e2:	f000 001f 	and.w	r0, r0, #31
1a0024e6:	095b      	lsrs	r3, r3, #5
1a0024e8:	2201      	movs	r2, #1
1a0024ea:	fa02 f000 	lsl.w	r0, r2, r0
1a0024ee:	4a09      	ldr	r2, [pc, #36]	; (1a002514 <enableGPIOIrq+0x98>)
1a0024f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   /* Enable irqChannel interrupt */
   NVIC_EnableIRQ(PIN_INT0_IRQn + irqChannel);
}
1a0024f4:	bcf0      	pop	{r4, r5, r6, r7}
1a0024f6:	4770      	bx	lr
   } else if ( edge == FALLING_EDGE) {
1a0024f8:	2b01      	cmp	r3, #1
1a0024fa:	d003      	beq.n	1a002504 <enableGPIOIrq+0x88>
1a0024fc:	4b04      	ldr	r3, [pc, #16]	; (1a002510 <enableGPIOIrq+0x94>)
1a0024fe:	609a      	str	r2, [r3, #8]
	pPININT->SIENF = pins;
1a002500:	615a      	str	r2, [r3, #20]
1a002502:	e7de      	b.n	1a0024c2 <enableGPIOIrq+0x46>
1a002504:	4b02      	ldr	r3, [pc, #8]	; (1a002510 <enableGPIOIrq+0x94>)
1a002506:	615a      	str	r2, [r3, #20]
1a002508:	e7db      	b.n	1a0024c2 <enableGPIOIrq+0x46>
1a00250a:	bf00      	nop
1a00250c:	40086000 	.word	0x40086000
1a002510:	40087000 	.word	0x40087000
1a002514:	e000e100 	.word	0xe000e100

1a002518 <disableGPIOIrq>:

static void disableGPIOIrq(uint8_t irqChannel)
{
1a002518:	b410      	push	{r4}
   /* Clear pending irq channel interrupts */
   NVIC_ClearPendingIRQ(PIN_INT0_IRQn + irqChannel);
1a00251a:	3020      	adds	r0, #32
1a00251c:	b2c0      	uxtb	r0, r0
1a00251e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
1a002520:	2b00      	cmp	r3, #0
1a002522:	db08      	blt.n	1a002536 <disableGPIOIrq+0x1e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002524:	f000 041f 	and.w	r4, r0, #31
1a002528:	095a      	lsrs	r2, r3, #5
1a00252a:	2101      	movs	r1, #1
1a00252c:	40a1      	lsls	r1, r4
1a00252e:	3260      	adds	r2, #96	; 0x60
1a002530:	4c0a      	ldr	r4, [pc, #40]	; (1a00255c <disableGPIOIrq+0x44>)
1a002532:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
1a002536:	2b00      	cmp	r3, #0
1a002538:	db0d      	blt.n	1a002556 <disableGPIOIrq+0x3e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00253a:	f000 001f 	and.w	r0, r0, #31
1a00253e:	095b      	lsrs	r3, r3, #5
1a002540:	2201      	movs	r2, #1
1a002542:	fa02 f000 	lsl.w	r0, r2, r0
1a002546:	3320      	adds	r3, #32
1a002548:	4a04      	ldr	r2, [pc, #16]	; (1a00255c <disableGPIOIrq+0x44>)
1a00254a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a00254e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a002552:	f3bf 8f6f 	isb	sy
   /* Disable irqChannel interrupt */
   NVIC_DisableIRQ(PIN_INT0_IRQn + irqChannel);
}
1a002556:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00255a:	4770      	bx	lr
1a00255c:	e000e100 	.word	0xe000e100

1a002560 <clearInterrupt>:

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002560:	2301      	movs	r3, #1
1a002562:	fa03 f000 	lsl.w	r0, r3, r0
	pPININT->IST = pins;
1a002566:	4b01      	ldr	r3, [pc, #4]	; (1a00256c <clearInterrupt+0xc>)
1a002568:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00256a:	4770      	bx	lr
1a00256c:	40087000 	.word	0x40087000

1a002570 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002572:	4b12      	ldr	r3, [pc, #72]	; (1a0025bc <serveInterrupt+0x4c>)
1a002574:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a002576:	4b12      	ldr	r3, [pc, #72]	; (1a0025c0 <serveInterrupt+0x50>)
1a002578:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00257a:	2301      	movs	r3, #1
1a00257c:	4083      	lsls	r3, r0
1a00257e:	420b      	tst	r3, r1
1a002580:	d00c      	beq.n	1a00259c <serveInterrupt+0x2c>
	return pTMR->TC;
1a002582:	4910      	ldr	r1, [pc, #64]	; (1a0025c4 <serveInterrupt+0x54>)
1a002584:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002586:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00258a:	00d1      	lsls	r1, r2, #3
1a00258c:	4a0e      	ldr	r2, [pc, #56]	; (1a0025c8 <serveInterrupt+0x58>)
1a00258e:	440a      	add	r2, r1
1a002590:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a002592:	4a0b      	ldr	r2, [pc, #44]	; (1a0025c0 <serveInterrupt+0x50>)
1a002594:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002596:	f7ff ffe3 	bl	1a002560 <clearInterrupt>
}
1a00259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00259c:	4909      	ldr	r1, [pc, #36]	; (1a0025c4 <serveInterrupt+0x54>)
1a00259e:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0025a0:	4d09      	ldr	r5, [pc, #36]	; (1a0025c8 <serveInterrupt+0x58>)
1a0025a2:	0051      	lsls	r1, r2, #1
1a0025a4:	188f      	adds	r7, r1, r2
1a0025a6:	00fc      	lsls	r4, r7, #3
1a0025a8:	4627      	mov	r7, r4
1a0025aa:	442c      	add	r4, r5
1a0025ac:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0025ae:	6864      	ldr	r4, [r4, #4]
1a0025b0:	1b36      	subs	r6, r6, r4
1a0025b2:	443d      	add	r5, r7
1a0025b4:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0025b6:	4a02      	ldr	r2, [pc, #8]	; (1a0025c0 <serveInterrupt+0x50>)
1a0025b8:	6213      	str	r3, [r2, #32]
1a0025ba:	e7ec      	b.n	1a002596 <serveInterrupt+0x26>
1a0025bc:	1a004be8 	.word	0x1a004be8
1a0025c0:	40087000 	.word	0x40087000
1a0025c4:	40084000 	.word	0x40084000
1a0025c8:	10000094 	.word	0x10000094

1a0025cc <triggerExpired>:
/*
 * When trigger time expires (TIMER0 reachs TIMECOMPAREMATCH1),
 * ULTRASONIC_SENSOR_TRIGGER_GPIO is off
 */
static void triggerExpired()
{
1a0025cc:	b508      	push	{r3, lr}
   gpioWrite(ULTRASONIC_SENSOR_TRIGGER_GPIO,OFF);
1a0025ce:	2100      	movs	r1, #0
1a0025d0:	2020      	movs	r0, #32
1a0025d2:	f7ff faa9 	bl	1a001b28 <gpioWrite>
}
1a0025d6:	bd08      	pop	{r3, pc}

1a0025d8 <timerExpired>:
{
1a0025d8:	b508      	push	{r3, lr}
   gpioWrite(ULTRASONIC_SENSOR_TRIGGER_GPIO,ON);
1a0025da:	2101      	movs	r1, #1
1a0025dc:	2020      	movs	r0, #32
1a0025de:	f7ff faa3 	bl	1a001b28 <gpioWrite>
}
1a0025e2:	bd08      	pop	{r3, pc}

1a0025e4 <ultrasonicSensorInit>:
 * @param   aSensor:   sensor number (0 to 2)
 * @param   aConfig:   enable or disable sensor
 * @return   nothing
 */
void ultrasonicSensorInit(ultrasonicSensorMap_t aSensor, ultrasonicSensorInit_t aConfig)
{
1a0025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0025e8:	4604      	mov	r4, r0
   static uint8_t firstTime = 1;

   if ( aConfig == ULTRASONIC_SENSOR_ENABLE ) {
1a0025ea:	460f      	mov	r7, r1
1a0025ec:	2900      	cmp	r1, #0
1a0025ee:	d13d      	bne.n	1a00266c <ultrasonicSensorInit+0x88>

      /* If first time, trigger GPIO is set as output */
      if ( firstTime ) {
1a0025f0:	4b23      	ldr	r3, [pc, #140]	; (1a002680 <ultrasonicSensorInit+0x9c>)
1a0025f2:	781b      	ldrb	r3, [r3, #0]
1a0025f4:	b9fb      	cbnz	r3, 1a002636 <ultrasonicSensorInit+0x52>
         gpioInit(ULTRASONIC_SENSOR_TRIGGER_GPIO, GPIO_OUTPUT);
         initGPIOIrqs();
      }

      /* Enable sensor echo GPIO pin as INPUT */
      gpioInit(ultrasonicSensors[aSensor].echoGpio, GPIO_INPUT);
1a0025f6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1a002684 <ultrasonicSensorInit+0xa0>
1a0025fa:	0066      	lsls	r6, r4, #1
1a0025fc:	1933      	adds	r3, r6, r4
1a0025fe:	00dd      	lsls	r5, r3, #3
1a002600:	4445      	add	r5, r8
1a002602:	2100      	movs	r1, #0
1a002604:	f995 0010 	ldrsb.w	r0, [r5, #16]
1a002608:	f7ff f9b8 	bl	1a00197c <gpioInit>

      /* IRQ Enable to capture sensor echo pulse edges */
      enableGPIOIrq(ultrasonicSensors[aSensor].irqConfig.irqChannel,
                    ultrasonicSensors[aSensor].irqConfig.gpioInit.port,
1a00260c:	f995 1013 	ldrsb.w	r1, [r5, #19]
                    ultrasonicSensors[aSensor].irqConfig.gpioInit.pin,
1a002610:	f995 2014 	ldrsb.w	r2, [r5, #20]
      enableGPIOIrq(ultrasonicSensors[aSensor].irqConfig.irqChannel,
1a002614:	2302      	movs	r3, #2
1a002616:	b2d2      	uxtb	r2, r2
1a002618:	b2c9      	uxtb	r1, r1
1a00261a:	7ca8      	ldrb	r0, [r5, #18]
1a00261c:	f7ff ff2e 	bl	1a00247c <enableGPIOIrq>
                    BOTH_EDGES);

      /* If first time, TIMER0 is set to cycle sensor trigger ever SENSOR_SAMPLING_RATE */
      if ( firstTime ) {
1a002620:	4b17      	ldr	r3, [pc, #92]	; (1a002680 <ultrasonicSensorInit+0x9c>)
1a002622:	781b      	ldrb	r3, [r3, #0]
1a002624:	b963      	cbnz	r3, 1a002640 <ultrasonicSensorInit+0x5c>

   } else {
      disableGPIOIrq(ultrasonicSensors[aSensor].irqConfig.irqChannel);
   }

   ultrasonicSensors[aSensor].enabled = aConfig;
1a002626:	eb04 0444 	add.w	r4, r4, r4, lsl #1
1a00262a:	00e2      	lsls	r2, r4, #3
1a00262c:	4b15      	ldr	r3, [pc, #84]	; (1a002684 <ultrasonicSensorInit+0xa0>)
1a00262e:	4413      	add	r3, r2
1a002630:	745f      	strb	r7, [r3, #17]

}
1a002632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         gpioInit(ULTRASONIC_SENSOR_TRIGGER_GPIO, GPIO_OUTPUT);
1a002636:	2101      	movs	r1, #1
1a002638:	2020      	movs	r0, #32
1a00263a:	f7ff f99f 	bl	1a00197c <gpioInit>
         initGPIOIrqs();
1a00263e:	e7da      	b.n	1a0025f6 <ultrasonicSensorInit+0x12>
         Timer_Init(TIMER0,Timer_microsecondsToTicks(SENSOR_SAMPLING_RATE),timerExpired);
1a002640:	f64e 2060 	movw	r0, #60000	; 0xea60
1a002644:	f7ff fbc0 	bl	1a001dc8 <Timer_microsecondsToTicks>
1a002648:	4a0f      	ldr	r2, [pc, #60]	; (1a002688 <ultrasonicSensorInit+0xa4>)
1a00264a:	4601      	mov	r1, r0
1a00264c:	2000      	movs	r0, #0
1a00264e:	f7ff fb2b 	bl	1a001ca8 <Timer_Init>
         Timer_EnableCompareMatch(TIMER0,TIMERCOMPAREMATCH1, Timer_microsecondsToTicks(SENSOR_TRIGGER_PULSE_WIDTH), triggerExpired);
1a002652:	200a      	movs	r0, #10
1a002654:	f7ff fbb8 	bl	1a001dc8 <Timer_microsecondsToTicks>
1a002658:	4b0c      	ldr	r3, [pc, #48]	; (1a00268c <ultrasonicSensorInit+0xa8>)
1a00265a:	4602      	mov	r2, r0
1a00265c:	2101      	movs	r1, #1
1a00265e:	2000      	movs	r0, #0
1a002660:	f7ff fbb6 	bl	1a001dd0 <Timer_EnableCompareMatch>
         firstTime = 0;
1a002664:	4b06      	ldr	r3, [pc, #24]	; (1a002680 <ultrasonicSensorInit+0x9c>)
1a002666:	2200      	movs	r2, #0
1a002668:	701a      	strb	r2, [r3, #0]
1a00266a:	e7dc      	b.n	1a002626 <ultrasonicSensorInit+0x42>
      disableGPIOIrq(ultrasonicSensors[aSensor].irqConfig.irqChannel);
1a00266c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002670:	00da      	lsls	r2, r3, #3
1a002672:	4b04      	ldr	r3, [pc, #16]	; (1a002684 <ultrasonicSensorInit+0xa0>)
1a002674:	4413      	add	r3, r2
1a002676:	7c98      	ldrb	r0, [r3, #18]
1a002678:	f7ff ff4e 	bl	1a002518 <disableGPIOIrq>
1a00267c:	e7d3      	b.n	1a002626 <ultrasonicSensorInit+0x42>
1a00267e:	bf00      	nop
1a002680:	10000090 	.word	0x10000090
1a002684:	10000094 	.word	0x10000094
1a002688:	1a0025d9 	.word	0x1a0025d9
1a00268c:	1a0025cd 	.word	0x1a0025cd

1a002690 <ultrasonicSensorGetDistance>:
float ultrasonicSensorGetDistance(ultrasonicSensorMap_t aSensor, unitMap_t anUnit)
{
   float result;

   /* Convert pulse width in timer ticks to microseconds */
   result = (float)((ultrasonicSensors[aSensor].lastEchoWidth/TICKS_TO_US_FACTOR));
1a002690:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002694:	00c2      	lsls	r2, r0, #3
1a002696:	4b0b      	ldr	r3, [pc, #44]	; (1a0026c4 <ultrasonicSensorGetDistance+0x34>)
1a002698:	4413      	add	r3, r2
1a00269a:	68db      	ldr	r3, [r3, #12]
1a00269c:	4a0a      	ldr	r2, [pc, #40]	; (1a0026c8 <ultrasonicSensorGetDistance+0x38>)
1a00269e:	fba2 2303 	umull	r2, r3, r2, r3
1a0026a2:	09db      	lsrs	r3, r3, #7
1a0026a4:	ee07 3a90 	vmov	s15, r3
1a0026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15

   /* If CM requested */
   if ( anUnit == CM )
1a0026ac:	b921      	cbnz	r1, 1a0026b8 <ultrasonicSensorGetDistance+0x28>
      /* Convert time in microseconds to distance in centimeters (from formula distance = pulse width time in us * velocity (340 m/s) / 2 )*/
      result = result / US_TO_CMS_FACTOR;
1a0026ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1a0026cc <ultrasonicSensorGetDistance+0x3c>
1a0026b2:	ee87 0a87 	vdiv.f32	s0, s15, s14
1a0026b6:	4770      	bx	lr
   else
      /* Convert time in microseconds to distance in inchs (from formula distance = pulse width time in us * velocity (340 m/s) / 2 )*/
      result = result / US_TO_INCHS_FACTOR;
1a0026b8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1a0026d0 <ultrasonicSensorGetDistance+0x40>
1a0026bc:	ee87 0a87 	vdiv.f32	s0, s15, s14

   return(result);
}
1a0026c0:	4770      	bx	lr
1a0026c2:	bf00      	nop
1a0026c4:	10000094 	.word	0x10000094
1a0026c8:	a0a0a0a1 	.word	0xa0a0a0a1
1a0026cc:	42680000 	.word	0x42680000
1a0026d0:	43140000 	.word	0x43140000

1a0026d4 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0026d4:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0026d6:	2000      	movs	r0, #0
1a0026d8:	f7ff ff4a 	bl	1a002570 <serveInterrupt>
}
1a0026dc:	bd08      	pop	{r3, pc}

1a0026de <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0026de:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0026e0:	2001      	movs	r0, #1
1a0026e2:	f7ff ff45 	bl	1a002570 <serveInterrupt>
}
1a0026e6:	bd08      	pop	{r3, pc}

1a0026e8 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0026e8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0026ea:	2002      	movs	r0, #2
1a0026ec:	f7ff ff40 	bl	1a002570 <serveInterrupt>
}
1a0026f0:	bd08      	pop	{r3, pc}
1a0026f2:	Address 0x1a0026f2 is out of bounds.


1a0026f4 <__aeabi_drsub>:
1a0026f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0026f8:	e002      	b.n	1a002700 <__adddf3>
1a0026fa:	bf00      	nop

1a0026fc <__aeabi_dsub>:
1a0026fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002700 <__adddf3>:
1a002700:	b530      	push	{r4, r5, lr}
1a002702:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a002706:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00270a:	ea94 0f05 	teq	r4, r5
1a00270e:	bf08      	it	eq
1a002710:	ea90 0f02 	teqeq	r0, r2
1a002714:	bf1f      	itttt	ne
1a002716:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00271a:	ea55 0c02 	orrsne.w	ip, r5, r2
1a00271e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002722:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002726:	f000 80e2 	beq.w	1a0028ee <__adddf3+0x1ee>
1a00272a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a00272e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a002732:	bfb8      	it	lt
1a002734:	426d      	neglt	r5, r5
1a002736:	dd0c      	ble.n	1a002752 <__adddf3+0x52>
1a002738:	442c      	add	r4, r5
1a00273a:	ea80 0202 	eor.w	r2, r0, r2
1a00273e:	ea81 0303 	eor.w	r3, r1, r3
1a002742:	ea82 0000 	eor.w	r0, r2, r0
1a002746:	ea83 0101 	eor.w	r1, r3, r1
1a00274a:	ea80 0202 	eor.w	r2, r0, r2
1a00274e:	ea81 0303 	eor.w	r3, r1, r3
1a002752:	2d36      	cmp	r5, #54	; 0x36
1a002754:	bf88      	it	hi
1a002756:	bd30      	pophi	{r4, r5, pc}
1a002758:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00275c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002760:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a002764:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002768:	d002      	beq.n	1a002770 <__adddf3+0x70>
1a00276a:	4240      	negs	r0, r0
1a00276c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002770:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a002774:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002778:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a00277c:	d002      	beq.n	1a002784 <__adddf3+0x84>
1a00277e:	4252      	negs	r2, r2
1a002780:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002784:	ea94 0f05 	teq	r4, r5
1a002788:	f000 80a7 	beq.w	1a0028da <__adddf3+0x1da>
1a00278c:	f1a4 0401 	sub.w	r4, r4, #1
1a002790:	f1d5 0e20 	rsbs	lr, r5, #32
1a002794:	db0d      	blt.n	1a0027b2 <__adddf3+0xb2>
1a002796:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00279a:	fa22 f205 	lsr.w	r2, r2, r5
1a00279e:	1880      	adds	r0, r0, r2
1a0027a0:	f141 0100 	adc.w	r1, r1, #0
1a0027a4:	fa03 f20e 	lsl.w	r2, r3, lr
1a0027a8:	1880      	adds	r0, r0, r2
1a0027aa:	fa43 f305 	asr.w	r3, r3, r5
1a0027ae:	4159      	adcs	r1, r3
1a0027b0:	e00e      	b.n	1a0027d0 <__adddf3+0xd0>
1a0027b2:	f1a5 0520 	sub.w	r5, r5, #32
1a0027b6:	f10e 0e20 	add.w	lr, lr, #32
1a0027ba:	2a01      	cmp	r2, #1
1a0027bc:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0027c0:	bf28      	it	cs
1a0027c2:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0027c6:	fa43 f305 	asr.w	r3, r3, r5
1a0027ca:	18c0      	adds	r0, r0, r3
1a0027cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0027d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0027d4:	d507      	bpl.n	1a0027e6 <__adddf3+0xe6>
1a0027d6:	f04f 0e00 	mov.w	lr, #0
1a0027da:	f1dc 0c00 	rsbs	ip, ip, #0
1a0027de:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0027e2:	eb6e 0101 	sbc.w	r1, lr, r1
1a0027e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0027ea:	d31b      	bcc.n	1a002824 <__adddf3+0x124>
1a0027ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0027f0:	d30c      	bcc.n	1a00280c <__adddf3+0x10c>
1a0027f2:	0849      	lsrs	r1, r1, #1
1a0027f4:	ea5f 0030 	movs.w	r0, r0, rrx
1a0027f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0027fc:	f104 0401 	add.w	r4, r4, #1
1a002800:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002804:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002808:	f080 809a 	bcs.w	1a002940 <__adddf3+0x240>
1a00280c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002810:	bf08      	it	eq
1a002812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002816:	f150 0000 	adcs.w	r0, r0, #0
1a00281a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00281e:	ea41 0105 	orr.w	r1, r1, r5
1a002822:	bd30      	pop	{r4, r5, pc}
1a002824:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002828:	4140      	adcs	r0, r0
1a00282a:	eb41 0101 	adc.w	r1, r1, r1
1a00282e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002832:	f1a4 0401 	sub.w	r4, r4, #1
1a002836:	d1e9      	bne.n	1a00280c <__adddf3+0x10c>
1a002838:	f091 0f00 	teq	r1, #0
1a00283c:	bf04      	itt	eq
1a00283e:	4601      	moveq	r1, r0
1a002840:	2000      	moveq	r0, #0
1a002842:	fab1 f381 	clz	r3, r1
1a002846:	bf08      	it	eq
1a002848:	3320      	addeq	r3, #32
1a00284a:	f1a3 030b 	sub.w	r3, r3, #11
1a00284e:	f1b3 0220 	subs.w	r2, r3, #32
1a002852:	da0c      	bge.n	1a00286e <__adddf3+0x16e>
1a002854:	320c      	adds	r2, #12
1a002856:	dd08      	ble.n	1a00286a <__adddf3+0x16a>
1a002858:	f102 0c14 	add.w	ip, r2, #20
1a00285c:	f1c2 020c 	rsb	r2, r2, #12
1a002860:	fa01 f00c 	lsl.w	r0, r1, ip
1a002864:	fa21 f102 	lsr.w	r1, r1, r2
1a002868:	e00c      	b.n	1a002884 <__adddf3+0x184>
1a00286a:	f102 0214 	add.w	r2, r2, #20
1a00286e:	bfd8      	it	le
1a002870:	f1c2 0c20 	rsble	ip, r2, #32
1a002874:	fa01 f102 	lsl.w	r1, r1, r2
1a002878:	fa20 fc0c 	lsr.w	ip, r0, ip
1a00287c:	bfdc      	itt	le
1a00287e:	ea41 010c 	orrle.w	r1, r1, ip
1a002882:	4090      	lslle	r0, r2
1a002884:	1ae4      	subs	r4, r4, r3
1a002886:	bfa2      	ittt	ge
1a002888:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a00288c:	4329      	orrge	r1, r5
1a00288e:	bd30      	popge	{r4, r5, pc}
1a002890:	ea6f 0404 	mvn.w	r4, r4
1a002894:	3c1f      	subs	r4, #31
1a002896:	da1c      	bge.n	1a0028d2 <__adddf3+0x1d2>
1a002898:	340c      	adds	r4, #12
1a00289a:	dc0e      	bgt.n	1a0028ba <__adddf3+0x1ba>
1a00289c:	f104 0414 	add.w	r4, r4, #20
1a0028a0:	f1c4 0220 	rsb	r2, r4, #32
1a0028a4:	fa20 f004 	lsr.w	r0, r0, r4
1a0028a8:	fa01 f302 	lsl.w	r3, r1, r2
1a0028ac:	ea40 0003 	orr.w	r0, r0, r3
1a0028b0:	fa21 f304 	lsr.w	r3, r1, r4
1a0028b4:	ea45 0103 	orr.w	r1, r5, r3
1a0028b8:	bd30      	pop	{r4, r5, pc}
1a0028ba:	f1c4 040c 	rsb	r4, r4, #12
1a0028be:	f1c4 0220 	rsb	r2, r4, #32
1a0028c2:	fa20 f002 	lsr.w	r0, r0, r2
1a0028c6:	fa01 f304 	lsl.w	r3, r1, r4
1a0028ca:	ea40 0003 	orr.w	r0, r0, r3
1a0028ce:	4629      	mov	r1, r5
1a0028d0:	bd30      	pop	{r4, r5, pc}
1a0028d2:	fa21 f004 	lsr.w	r0, r1, r4
1a0028d6:	4629      	mov	r1, r5
1a0028d8:	bd30      	pop	{r4, r5, pc}
1a0028da:	f094 0f00 	teq	r4, #0
1a0028de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0028e2:	bf06      	itte	eq
1a0028e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0028e8:	3401      	addeq	r4, #1
1a0028ea:	3d01      	subne	r5, #1
1a0028ec:	e74e      	b.n	1a00278c <__adddf3+0x8c>
1a0028ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0028f2:	bf18      	it	ne
1a0028f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0028f8:	d029      	beq.n	1a00294e <__adddf3+0x24e>
1a0028fa:	ea94 0f05 	teq	r4, r5
1a0028fe:	bf08      	it	eq
1a002900:	ea90 0f02 	teqeq	r0, r2
1a002904:	d005      	beq.n	1a002912 <__adddf3+0x212>
1a002906:	ea54 0c00 	orrs.w	ip, r4, r0
1a00290a:	bf04      	itt	eq
1a00290c:	4619      	moveq	r1, r3
1a00290e:	4610      	moveq	r0, r2
1a002910:	bd30      	pop	{r4, r5, pc}
1a002912:	ea91 0f03 	teq	r1, r3
1a002916:	bf1e      	ittt	ne
1a002918:	2100      	movne	r1, #0
1a00291a:	2000      	movne	r0, #0
1a00291c:	bd30      	popne	{r4, r5, pc}
1a00291e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002922:	d105      	bne.n	1a002930 <__adddf3+0x230>
1a002924:	0040      	lsls	r0, r0, #1
1a002926:	4149      	adcs	r1, r1
1a002928:	bf28      	it	cs
1a00292a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00292e:	bd30      	pop	{r4, r5, pc}
1a002930:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002934:	bf3c      	itt	cc
1a002936:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a00293a:	bd30      	popcc	{r4, r5, pc}
1a00293c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002940:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002944:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002948:	f04f 0000 	mov.w	r0, #0
1a00294c:	bd30      	pop	{r4, r5, pc}
1a00294e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002952:	bf1a      	itte	ne
1a002954:	4619      	movne	r1, r3
1a002956:	4610      	movne	r0, r2
1a002958:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a00295c:	bf1c      	itt	ne
1a00295e:	460b      	movne	r3, r1
1a002960:	4602      	movne	r2, r0
1a002962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002966:	bf06      	itte	eq
1a002968:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a00296c:	ea91 0f03 	teqeq	r1, r3
1a002970:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002974:	bd30      	pop	{r4, r5, pc}
1a002976:	bf00      	nop

1a002978 <__aeabi_ui2d>:
1a002978:	f090 0f00 	teq	r0, #0
1a00297c:	bf04      	itt	eq
1a00297e:	2100      	moveq	r1, #0
1a002980:	4770      	bxeq	lr
1a002982:	b530      	push	{r4, r5, lr}
1a002984:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002988:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00298c:	f04f 0500 	mov.w	r5, #0
1a002990:	f04f 0100 	mov.w	r1, #0
1a002994:	e750      	b.n	1a002838 <__adddf3+0x138>
1a002996:	bf00      	nop

1a002998 <__aeabi_i2d>:
1a002998:	f090 0f00 	teq	r0, #0
1a00299c:	bf04      	itt	eq
1a00299e:	2100      	moveq	r1, #0
1a0029a0:	4770      	bxeq	lr
1a0029a2:	b530      	push	{r4, r5, lr}
1a0029a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0029a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0029ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0029b0:	bf48      	it	mi
1a0029b2:	4240      	negmi	r0, r0
1a0029b4:	f04f 0100 	mov.w	r1, #0
1a0029b8:	e73e      	b.n	1a002838 <__adddf3+0x138>
1a0029ba:	bf00      	nop

1a0029bc <__aeabi_f2d>:
1a0029bc:	0042      	lsls	r2, r0, #1
1a0029be:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0029c2:	ea4f 0131 	mov.w	r1, r1, rrx
1a0029c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0029ca:	bf1f      	itttt	ne
1a0029cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0029d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0029d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0029d8:	4770      	bxne	lr
1a0029da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0029de:	bf08      	it	eq
1a0029e0:	4770      	bxeq	lr
1a0029e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0029e6:	bf04      	itt	eq
1a0029e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0029ec:	4770      	bxeq	lr
1a0029ee:	b530      	push	{r4, r5, lr}
1a0029f0:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0029f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0029f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0029fc:	e71c      	b.n	1a002838 <__adddf3+0x138>
1a0029fe:	bf00      	nop

1a002a00 <__aeabi_ul2d>:
1a002a00:	ea50 0201 	orrs.w	r2, r0, r1
1a002a04:	bf08      	it	eq
1a002a06:	4770      	bxeq	lr
1a002a08:	b530      	push	{r4, r5, lr}
1a002a0a:	f04f 0500 	mov.w	r5, #0
1a002a0e:	e00a      	b.n	1a002a26 <__aeabi_l2d+0x16>

1a002a10 <__aeabi_l2d>:
1a002a10:	ea50 0201 	orrs.w	r2, r0, r1
1a002a14:	bf08      	it	eq
1a002a16:	4770      	bxeq	lr
1a002a18:	b530      	push	{r4, r5, lr}
1a002a1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002a1e:	d502      	bpl.n	1a002a26 <__aeabi_l2d+0x16>
1a002a20:	4240      	negs	r0, r0
1a002a22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002a26:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002a2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002a2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002a32:	f43f aed8 	beq.w	1a0027e6 <__adddf3+0xe6>
1a002a36:	f04f 0203 	mov.w	r2, #3
1a002a3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002a3e:	bf18      	it	ne
1a002a40:	3203      	addne	r2, #3
1a002a42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002a46:	bf18      	it	ne
1a002a48:	3203      	addne	r2, #3
1a002a4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002a4e:	f1c2 0320 	rsb	r3, r2, #32
1a002a52:	fa00 fc03 	lsl.w	ip, r0, r3
1a002a56:	fa20 f002 	lsr.w	r0, r0, r2
1a002a5a:	fa01 fe03 	lsl.w	lr, r1, r3
1a002a5e:	ea40 000e 	orr.w	r0, r0, lr
1a002a62:	fa21 f102 	lsr.w	r1, r1, r2
1a002a66:	4414      	add	r4, r2
1a002a68:	e6bd      	b.n	1a0027e6 <__adddf3+0xe6>
1a002a6a:	bf00      	nop

1a002a6c <__aeabi_dmul>:
1a002a6c:	b570      	push	{r4, r5, r6, lr}
1a002a6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002a72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002a76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002a7a:	bf1d      	ittte	ne
1a002a7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002a80:	ea94 0f0c 	teqne	r4, ip
1a002a84:	ea95 0f0c 	teqne	r5, ip
1a002a88:	f000 f8de 	bleq	1a002c48 <__aeabi_dmul+0x1dc>
1a002a8c:	442c      	add	r4, r5
1a002a8e:	ea81 0603 	eor.w	r6, r1, r3
1a002a92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002a96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002a9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002a9e:	bf18      	it	ne
1a002aa0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002aac:	d038      	beq.n	1a002b20 <__aeabi_dmul+0xb4>
1a002aae:	fba0 ce02 	umull	ip, lr, r0, r2
1a002ab2:	f04f 0500 	mov.w	r5, #0
1a002ab6:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002aba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002abe:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002ac2:	f04f 0600 	mov.w	r6, #0
1a002ac6:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002aca:	f09c 0f00 	teq	ip, #0
1a002ace:	bf18      	it	ne
1a002ad0:	f04e 0e01 	orrne.w	lr, lr, #1
1a002ad4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002ad8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002adc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002ae0:	d204      	bcs.n	1a002aec <__aeabi_dmul+0x80>
1a002ae2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002ae6:	416d      	adcs	r5, r5
1a002ae8:	eb46 0606 	adc.w	r6, r6, r6
1a002aec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002af0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002af4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002af8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002afc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002b00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002b04:	bf88      	it	hi
1a002b06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002b0a:	d81e      	bhi.n	1a002b4a <__aeabi_dmul+0xde>
1a002b0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002b10:	bf08      	it	eq
1a002b12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002b16:	f150 0000 	adcs.w	r0, r0, #0
1a002b1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002b1e:	bd70      	pop	{r4, r5, r6, pc}
1a002b20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002b24:	ea46 0101 	orr.w	r1, r6, r1
1a002b28:	ea40 0002 	orr.w	r0, r0, r2
1a002b2c:	ea81 0103 	eor.w	r1, r1, r3
1a002b30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002b34:	bfc2      	ittt	gt
1a002b36:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002b3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002b3e:	bd70      	popgt	{r4, r5, r6, pc}
1a002b40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002b44:	f04f 0e00 	mov.w	lr, #0
1a002b48:	3c01      	subs	r4, #1
1a002b4a:	f300 80ab 	bgt.w	1a002ca4 <__aeabi_dmul+0x238>
1a002b4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002b52:	bfde      	ittt	le
1a002b54:	2000      	movle	r0, #0
1a002b56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002b5a:	bd70      	pople	{r4, r5, r6, pc}
1a002b5c:	f1c4 0400 	rsb	r4, r4, #0
1a002b60:	3c20      	subs	r4, #32
1a002b62:	da35      	bge.n	1a002bd0 <__aeabi_dmul+0x164>
1a002b64:	340c      	adds	r4, #12
1a002b66:	dc1b      	bgt.n	1a002ba0 <__aeabi_dmul+0x134>
1a002b68:	f104 0414 	add.w	r4, r4, #20
1a002b6c:	f1c4 0520 	rsb	r5, r4, #32
1a002b70:	fa00 f305 	lsl.w	r3, r0, r5
1a002b74:	fa20 f004 	lsr.w	r0, r0, r4
1a002b78:	fa01 f205 	lsl.w	r2, r1, r5
1a002b7c:	ea40 0002 	orr.w	r0, r0, r2
1a002b80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002b84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002b88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002b8c:	fa21 f604 	lsr.w	r6, r1, r4
1a002b90:	eb42 0106 	adc.w	r1, r2, r6
1a002b94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002b98:	bf08      	it	eq
1a002b9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002b9e:	bd70      	pop	{r4, r5, r6, pc}
1a002ba0:	f1c4 040c 	rsb	r4, r4, #12
1a002ba4:	f1c4 0520 	rsb	r5, r4, #32
1a002ba8:	fa00 f304 	lsl.w	r3, r0, r4
1a002bac:	fa20 f005 	lsr.w	r0, r0, r5
1a002bb0:	fa01 f204 	lsl.w	r2, r1, r4
1a002bb4:	ea40 0002 	orr.w	r0, r0, r2
1a002bb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002bbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002bc0:	f141 0100 	adc.w	r1, r1, #0
1a002bc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002bc8:	bf08      	it	eq
1a002bca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002bce:	bd70      	pop	{r4, r5, r6, pc}
1a002bd0:	f1c4 0520 	rsb	r5, r4, #32
1a002bd4:	fa00 f205 	lsl.w	r2, r0, r5
1a002bd8:	ea4e 0e02 	orr.w	lr, lr, r2
1a002bdc:	fa20 f304 	lsr.w	r3, r0, r4
1a002be0:	fa01 f205 	lsl.w	r2, r1, r5
1a002be4:	ea43 0302 	orr.w	r3, r3, r2
1a002be8:	fa21 f004 	lsr.w	r0, r1, r4
1a002bec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002bf0:	fa21 f204 	lsr.w	r2, r1, r4
1a002bf4:	ea20 0002 	bic.w	r0, r0, r2
1a002bf8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002bfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002c00:	bf08      	it	eq
1a002c02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002c06:	bd70      	pop	{r4, r5, r6, pc}
1a002c08:	f094 0f00 	teq	r4, #0
1a002c0c:	d10f      	bne.n	1a002c2e <__aeabi_dmul+0x1c2>
1a002c0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002c12:	0040      	lsls	r0, r0, #1
1a002c14:	eb41 0101 	adc.w	r1, r1, r1
1a002c18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002c1c:	bf08      	it	eq
1a002c1e:	3c01      	subeq	r4, #1
1a002c20:	d0f7      	beq.n	1a002c12 <__aeabi_dmul+0x1a6>
1a002c22:	ea41 0106 	orr.w	r1, r1, r6
1a002c26:	f095 0f00 	teq	r5, #0
1a002c2a:	bf18      	it	ne
1a002c2c:	4770      	bxne	lr
1a002c2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002c32:	0052      	lsls	r2, r2, #1
1a002c34:	eb43 0303 	adc.w	r3, r3, r3
1a002c38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002c3c:	bf08      	it	eq
1a002c3e:	3d01      	subeq	r5, #1
1a002c40:	d0f7      	beq.n	1a002c32 <__aeabi_dmul+0x1c6>
1a002c42:	ea43 0306 	orr.w	r3, r3, r6
1a002c46:	4770      	bx	lr
1a002c48:	ea94 0f0c 	teq	r4, ip
1a002c4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002c50:	bf18      	it	ne
1a002c52:	ea95 0f0c 	teqne	r5, ip
1a002c56:	d00c      	beq.n	1a002c72 <__aeabi_dmul+0x206>
1a002c58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002c5c:	bf18      	it	ne
1a002c5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002c62:	d1d1      	bne.n	1a002c08 <__aeabi_dmul+0x19c>
1a002c64:	ea81 0103 	eor.w	r1, r1, r3
1a002c68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002c6c:	f04f 0000 	mov.w	r0, #0
1a002c70:	bd70      	pop	{r4, r5, r6, pc}
1a002c72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002c76:	bf06      	itte	eq
1a002c78:	4610      	moveq	r0, r2
1a002c7a:	4619      	moveq	r1, r3
1a002c7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002c80:	d019      	beq.n	1a002cb6 <__aeabi_dmul+0x24a>
1a002c82:	ea94 0f0c 	teq	r4, ip
1a002c86:	d102      	bne.n	1a002c8e <__aeabi_dmul+0x222>
1a002c88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002c8c:	d113      	bne.n	1a002cb6 <__aeabi_dmul+0x24a>
1a002c8e:	ea95 0f0c 	teq	r5, ip
1a002c92:	d105      	bne.n	1a002ca0 <__aeabi_dmul+0x234>
1a002c94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002c98:	bf1c      	itt	ne
1a002c9a:	4610      	movne	r0, r2
1a002c9c:	4619      	movne	r1, r3
1a002c9e:	d10a      	bne.n	1a002cb6 <__aeabi_dmul+0x24a>
1a002ca0:	ea81 0103 	eor.w	r1, r1, r3
1a002ca4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ca8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002cac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002cb0:	f04f 0000 	mov.w	r0, #0
1a002cb4:	bd70      	pop	{r4, r5, r6, pc}
1a002cb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002cba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002cbe:	bd70      	pop	{r4, r5, r6, pc}

1a002cc0 <__aeabi_ddiv>:
1a002cc0:	b570      	push	{r4, r5, r6, lr}
1a002cc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002cc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002cca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002cce:	bf1d      	ittte	ne
1a002cd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002cd4:	ea94 0f0c 	teqne	r4, ip
1a002cd8:	ea95 0f0c 	teqne	r5, ip
1a002cdc:	f000 f8a7 	bleq	1a002e2e <__aeabi_ddiv+0x16e>
1a002ce0:	eba4 0405 	sub.w	r4, r4, r5
1a002ce4:	ea81 0e03 	eor.w	lr, r1, r3
1a002ce8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002cec:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002cf0:	f000 8088 	beq.w	1a002e04 <__aeabi_ddiv+0x144>
1a002cf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002cf8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002cfc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002d00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002d04:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002d08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002d0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002d10:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002d14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002d18:	429d      	cmp	r5, r3
1a002d1a:	bf08      	it	eq
1a002d1c:	4296      	cmpeq	r6, r2
1a002d1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002d22:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002d26:	d202      	bcs.n	1a002d2e <__aeabi_ddiv+0x6e>
1a002d28:	085b      	lsrs	r3, r3, #1
1a002d2a:	ea4f 0232 	mov.w	r2, r2, rrx
1a002d2e:	1ab6      	subs	r6, r6, r2
1a002d30:	eb65 0503 	sbc.w	r5, r5, r3
1a002d34:	085b      	lsrs	r3, r3, #1
1a002d36:	ea4f 0232 	mov.w	r2, r2, rrx
1a002d3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002d3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002d42:	ebb6 0e02 	subs.w	lr, r6, r2
1a002d46:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002d4a:	bf22      	ittt	cs
1a002d4c:	1ab6      	subcs	r6, r6, r2
1a002d4e:	4675      	movcs	r5, lr
1a002d50:	ea40 000c 	orrcs.w	r0, r0, ip
1a002d54:	085b      	lsrs	r3, r3, #1
1a002d56:	ea4f 0232 	mov.w	r2, r2, rrx
1a002d5a:	ebb6 0e02 	subs.w	lr, r6, r2
1a002d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002d62:	bf22      	ittt	cs
1a002d64:	1ab6      	subcs	r6, r6, r2
1a002d66:	4675      	movcs	r5, lr
1a002d68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002d6c:	085b      	lsrs	r3, r3, #1
1a002d6e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002d72:	ebb6 0e02 	subs.w	lr, r6, r2
1a002d76:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002d7a:	bf22      	ittt	cs
1a002d7c:	1ab6      	subcs	r6, r6, r2
1a002d7e:	4675      	movcs	r5, lr
1a002d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002d84:	085b      	lsrs	r3, r3, #1
1a002d86:	ea4f 0232 	mov.w	r2, r2, rrx
1a002d8a:	ebb6 0e02 	subs.w	lr, r6, r2
1a002d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002d92:	bf22      	ittt	cs
1a002d94:	1ab6      	subcs	r6, r6, r2
1a002d96:	4675      	movcs	r5, lr
1a002d98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002d9c:	ea55 0e06 	orrs.w	lr, r5, r6
1a002da0:	d018      	beq.n	1a002dd4 <__aeabi_ddiv+0x114>
1a002da2:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002da6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002daa:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002dae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002db2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002db6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002dba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002dbe:	d1c0      	bne.n	1a002d42 <__aeabi_ddiv+0x82>
1a002dc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002dc4:	d10b      	bne.n	1a002dde <__aeabi_ddiv+0x11e>
1a002dc6:	ea41 0100 	orr.w	r1, r1, r0
1a002dca:	f04f 0000 	mov.w	r0, #0
1a002dce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002dd2:	e7b6      	b.n	1a002d42 <__aeabi_ddiv+0x82>
1a002dd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002dd8:	bf04      	itt	eq
1a002dda:	4301      	orreq	r1, r0
1a002ddc:	2000      	moveq	r0, #0
1a002dde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002de2:	bf88      	it	hi
1a002de4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002de8:	f63f aeaf 	bhi.w	1a002b4a <__aeabi_dmul+0xde>
1a002dec:	ebb5 0c03 	subs.w	ip, r5, r3
1a002df0:	bf04      	itt	eq
1a002df2:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002df6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002dfa:	f150 0000 	adcs.w	r0, r0, #0
1a002dfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002e02:	bd70      	pop	{r4, r5, r6, pc}
1a002e04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002e08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002e0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002e10:	bfc2      	ittt	gt
1a002e12:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002e16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002e1a:	bd70      	popgt	{r4, r5, r6, pc}
1a002e1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002e20:	f04f 0e00 	mov.w	lr, #0
1a002e24:	3c01      	subs	r4, #1
1a002e26:	e690      	b.n	1a002b4a <__aeabi_dmul+0xde>
1a002e28:	ea45 0e06 	orr.w	lr, r5, r6
1a002e2c:	e68d      	b.n	1a002b4a <__aeabi_dmul+0xde>
1a002e2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002e32:	ea94 0f0c 	teq	r4, ip
1a002e36:	bf08      	it	eq
1a002e38:	ea95 0f0c 	teqeq	r5, ip
1a002e3c:	f43f af3b 	beq.w	1a002cb6 <__aeabi_dmul+0x24a>
1a002e40:	ea94 0f0c 	teq	r4, ip
1a002e44:	d10a      	bne.n	1a002e5c <__aeabi_ddiv+0x19c>
1a002e46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002e4a:	f47f af34 	bne.w	1a002cb6 <__aeabi_dmul+0x24a>
1a002e4e:	ea95 0f0c 	teq	r5, ip
1a002e52:	f47f af25 	bne.w	1a002ca0 <__aeabi_dmul+0x234>
1a002e56:	4610      	mov	r0, r2
1a002e58:	4619      	mov	r1, r3
1a002e5a:	e72c      	b.n	1a002cb6 <__aeabi_dmul+0x24a>
1a002e5c:	ea95 0f0c 	teq	r5, ip
1a002e60:	d106      	bne.n	1a002e70 <__aeabi_ddiv+0x1b0>
1a002e62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002e66:	f43f aefd 	beq.w	1a002c64 <__aeabi_dmul+0x1f8>
1a002e6a:	4610      	mov	r0, r2
1a002e6c:	4619      	mov	r1, r3
1a002e6e:	e722      	b.n	1a002cb6 <__aeabi_dmul+0x24a>
1a002e70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002e74:	bf18      	it	ne
1a002e76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002e7a:	f47f aec5 	bne.w	1a002c08 <__aeabi_dmul+0x19c>
1a002e7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002e82:	f47f af0d 	bne.w	1a002ca0 <__aeabi_dmul+0x234>
1a002e86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002e8a:	f47f aeeb 	bne.w	1a002c64 <__aeabi_dmul+0x1f8>
1a002e8e:	e712      	b.n	1a002cb6 <__aeabi_dmul+0x24a>

1a002e90 <__aeabi_d2f>:
1a002e90:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002e94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a002e98:	bf24      	itt	cs
1a002e9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a002e9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a002ea2:	d90d      	bls.n	1a002ec0 <__aeabi_d2f+0x30>
1a002ea4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a002ea8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a002eac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a002eb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a002eb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a002eb8:	bf08      	it	eq
1a002eba:	f020 0001 	biceq.w	r0, r0, #1
1a002ebe:	4770      	bx	lr
1a002ec0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a002ec4:	d121      	bne.n	1a002f0a <__aeabi_d2f+0x7a>
1a002ec6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a002eca:	bfbc      	itt	lt
1a002ecc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a002ed0:	4770      	bxlt	lr
1a002ed2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002ed6:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a002eda:	f1c2 0218 	rsb	r2, r2, #24
1a002ede:	f1c2 0c20 	rsb	ip, r2, #32
1a002ee2:	fa10 f30c 	lsls.w	r3, r0, ip
1a002ee6:	fa20 f002 	lsr.w	r0, r0, r2
1a002eea:	bf18      	it	ne
1a002eec:	f040 0001 	orrne.w	r0, r0, #1
1a002ef0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002ef4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a002ef8:	fa03 fc0c 	lsl.w	ip, r3, ip
1a002efc:	ea40 000c 	orr.w	r0, r0, ip
1a002f00:	fa23 f302 	lsr.w	r3, r3, r2
1a002f04:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a002f08:	e7cc      	b.n	1a002ea4 <__aeabi_d2f+0x14>
1a002f0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a002f0e:	d107      	bne.n	1a002f20 <__aeabi_d2f+0x90>
1a002f10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a002f14:	bf1e      	ittt	ne
1a002f16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a002f1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a002f1e:	4770      	bxne	lr
1a002f20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a002f24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a002f28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a002f2c:	4770      	bx	lr
1a002f2e:	bf00      	nop

1a002f30 <__aeabi_uldivmod>:
1a002f30:	b953      	cbnz	r3, 1a002f48 <__aeabi_uldivmod+0x18>
1a002f32:	b94a      	cbnz	r2, 1a002f48 <__aeabi_uldivmod+0x18>
1a002f34:	2900      	cmp	r1, #0
1a002f36:	bf08      	it	eq
1a002f38:	2800      	cmpeq	r0, #0
1a002f3a:	bf1c      	itt	ne
1a002f3c:	f04f 31ff 	movne.w	r1, #4294967295
1a002f40:	f04f 30ff 	movne.w	r0, #4294967295
1a002f44:	f000 b974 	b.w	1a003230 <__aeabi_idiv0>
1a002f48:	f1ad 0c08 	sub.w	ip, sp, #8
1a002f4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002f50:	f000 f806 	bl	1a002f60 <__udivmoddi4>
1a002f54:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002f5c:	b004      	add	sp, #16
1a002f5e:	4770      	bx	lr

1a002f60 <__udivmoddi4>:
1a002f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002f64:	9e08      	ldr	r6, [sp, #32]
1a002f66:	4604      	mov	r4, r0
1a002f68:	4688      	mov	r8, r1
1a002f6a:	2b00      	cmp	r3, #0
1a002f6c:	f040 8085 	bne.w	1a00307a <__udivmoddi4+0x11a>
1a002f70:	428a      	cmp	r2, r1
1a002f72:	4615      	mov	r5, r2
1a002f74:	d948      	bls.n	1a003008 <__udivmoddi4+0xa8>
1a002f76:	fab2 f282 	clz	r2, r2
1a002f7a:	b14a      	cbz	r2, 1a002f90 <__udivmoddi4+0x30>
1a002f7c:	f1c2 0720 	rsb	r7, r2, #32
1a002f80:	fa01 f302 	lsl.w	r3, r1, r2
1a002f84:	fa20 f707 	lsr.w	r7, r0, r7
1a002f88:	4095      	lsls	r5, r2
1a002f8a:	ea47 0803 	orr.w	r8, r7, r3
1a002f8e:	4094      	lsls	r4, r2
1a002f90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002f94:	0c23      	lsrs	r3, r4, #16
1a002f96:	fbb8 f7fe 	udiv	r7, r8, lr
1a002f9a:	fa1f fc85 	uxth.w	ip, r5
1a002f9e:	fb0e 8817 	mls	r8, lr, r7, r8
1a002fa2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002fa6:	fb07 f10c 	mul.w	r1, r7, ip
1a002faa:	4299      	cmp	r1, r3
1a002fac:	d909      	bls.n	1a002fc2 <__udivmoddi4+0x62>
1a002fae:	18eb      	adds	r3, r5, r3
1a002fb0:	f107 30ff 	add.w	r0, r7, #4294967295
1a002fb4:	f080 80e3 	bcs.w	1a00317e <__udivmoddi4+0x21e>
1a002fb8:	4299      	cmp	r1, r3
1a002fba:	f240 80e0 	bls.w	1a00317e <__udivmoddi4+0x21e>
1a002fbe:	3f02      	subs	r7, #2
1a002fc0:	442b      	add	r3, r5
1a002fc2:	1a5b      	subs	r3, r3, r1
1a002fc4:	b2a4      	uxth	r4, r4
1a002fc6:	fbb3 f0fe 	udiv	r0, r3, lr
1a002fca:	fb0e 3310 	mls	r3, lr, r0, r3
1a002fce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002fd2:	fb00 fc0c 	mul.w	ip, r0, ip
1a002fd6:	45a4      	cmp	ip, r4
1a002fd8:	d909      	bls.n	1a002fee <__udivmoddi4+0x8e>
1a002fda:	192c      	adds	r4, r5, r4
1a002fdc:	f100 33ff 	add.w	r3, r0, #4294967295
1a002fe0:	f080 80cb 	bcs.w	1a00317a <__udivmoddi4+0x21a>
1a002fe4:	45a4      	cmp	ip, r4
1a002fe6:	f240 80c8 	bls.w	1a00317a <__udivmoddi4+0x21a>
1a002fea:	3802      	subs	r0, #2
1a002fec:	442c      	add	r4, r5
1a002fee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002ff2:	eba4 040c 	sub.w	r4, r4, ip
1a002ff6:	2700      	movs	r7, #0
1a002ff8:	b11e      	cbz	r6, 1a003002 <__udivmoddi4+0xa2>
1a002ffa:	40d4      	lsrs	r4, r2
1a002ffc:	2300      	movs	r3, #0
1a002ffe:	e9c6 4300 	strd	r4, r3, [r6]
1a003002:	4639      	mov	r1, r7
1a003004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003008:	2a00      	cmp	r2, #0
1a00300a:	d053      	beq.n	1a0030b4 <__udivmoddi4+0x154>
1a00300c:	fab2 f282 	clz	r2, r2
1a003010:	2a00      	cmp	r2, #0
1a003012:	f040 80b6 	bne.w	1a003182 <__udivmoddi4+0x222>
1a003016:	1b49      	subs	r1, r1, r5
1a003018:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00301c:	fa1f f885 	uxth.w	r8, r5
1a003020:	2701      	movs	r7, #1
1a003022:	fbb1 fcfe 	udiv	ip, r1, lr
1a003026:	0c23      	lsrs	r3, r4, #16
1a003028:	fb0e 111c 	mls	r1, lr, ip, r1
1a00302c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003030:	fb08 f10c 	mul.w	r1, r8, ip
1a003034:	4299      	cmp	r1, r3
1a003036:	d907      	bls.n	1a003048 <__udivmoddi4+0xe8>
1a003038:	18eb      	adds	r3, r5, r3
1a00303a:	f10c 30ff 	add.w	r0, ip, #4294967295
1a00303e:	d202      	bcs.n	1a003046 <__udivmoddi4+0xe6>
1a003040:	4299      	cmp	r1, r3
1a003042:	f200 80ec 	bhi.w	1a00321e <__udivmoddi4+0x2be>
1a003046:	4684      	mov	ip, r0
1a003048:	1a59      	subs	r1, r3, r1
1a00304a:	b2a3      	uxth	r3, r4
1a00304c:	fbb1 f0fe 	udiv	r0, r1, lr
1a003050:	fb0e 1410 	mls	r4, lr, r0, r1
1a003054:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003058:	fb08 f800 	mul.w	r8, r8, r0
1a00305c:	45a0      	cmp	r8, r4
1a00305e:	d907      	bls.n	1a003070 <__udivmoddi4+0x110>
1a003060:	192c      	adds	r4, r5, r4
1a003062:	f100 33ff 	add.w	r3, r0, #4294967295
1a003066:	d202      	bcs.n	1a00306e <__udivmoddi4+0x10e>
1a003068:	45a0      	cmp	r8, r4
1a00306a:	f200 80dc 	bhi.w	1a003226 <__udivmoddi4+0x2c6>
1a00306e:	4618      	mov	r0, r3
1a003070:	eba4 0408 	sub.w	r4, r4, r8
1a003074:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003078:	e7be      	b.n	1a002ff8 <__udivmoddi4+0x98>
1a00307a:	428b      	cmp	r3, r1
1a00307c:	d908      	bls.n	1a003090 <__udivmoddi4+0x130>
1a00307e:	2e00      	cmp	r6, #0
1a003080:	d078      	beq.n	1a003174 <__udivmoddi4+0x214>
1a003082:	2700      	movs	r7, #0
1a003084:	e9c6 0100 	strd	r0, r1, [r6]
1a003088:	4638      	mov	r0, r7
1a00308a:	4639      	mov	r1, r7
1a00308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003090:	fab3 f783 	clz	r7, r3
1a003094:	b97f      	cbnz	r7, 1a0030b6 <__udivmoddi4+0x156>
1a003096:	428b      	cmp	r3, r1
1a003098:	d302      	bcc.n	1a0030a0 <__udivmoddi4+0x140>
1a00309a:	4282      	cmp	r2, r0
1a00309c:	f200 80bd 	bhi.w	1a00321a <__udivmoddi4+0x2ba>
1a0030a0:	1a84      	subs	r4, r0, r2
1a0030a2:	eb61 0303 	sbc.w	r3, r1, r3
1a0030a6:	2001      	movs	r0, #1
1a0030a8:	4698      	mov	r8, r3
1a0030aa:	2e00      	cmp	r6, #0
1a0030ac:	d0a9      	beq.n	1a003002 <__udivmoddi4+0xa2>
1a0030ae:	e9c6 4800 	strd	r4, r8, [r6]
1a0030b2:	e7a6      	b.n	1a003002 <__udivmoddi4+0xa2>
1a0030b4:	deff      	udf	#255	; 0xff
1a0030b6:	f1c7 0520 	rsb	r5, r7, #32
1a0030ba:	40bb      	lsls	r3, r7
1a0030bc:	fa22 fc05 	lsr.w	ip, r2, r5
1a0030c0:	ea4c 0c03 	orr.w	ip, ip, r3
1a0030c4:	fa01 f407 	lsl.w	r4, r1, r7
1a0030c8:	fa20 f805 	lsr.w	r8, r0, r5
1a0030cc:	fa21 f305 	lsr.w	r3, r1, r5
1a0030d0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0030d4:	ea48 0404 	orr.w	r4, r8, r4
1a0030d8:	fbb3 f9fe 	udiv	r9, r3, lr
1a0030dc:	0c21      	lsrs	r1, r4, #16
1a0030de:	fb0e 3319 	mls	r3, lr, r9, r3
1a0030e2:	fa1f f88c 	uxth.w	r8, ip
1a0030e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0030ea:	fb09 fa08 	mul.w	sl, r9, r8
1a0030ee:	459a      	cmp	sl, r3
1a0030f0:	fa02 f207 	lsl.w	r2, r2, r7
1a0030f4:	fa00 f107 	lsl.w	r1, r0, r7
1a0030f8:	d90b      	bls.n	1a003112 <__udivmoddi4+0x1b2>
1a0030fa:	eb1c 0303 	adds.w	r3, ip, r3
1a0030fe:	f109 30ff 	add.w	r0, r9, #4294967295
1a003102:	f080 8088 	bcs.w	1a003216 <__udivmoddi4+0x2b6>
1a003106:	459a      	cmp	sl, r3
1a003108:	f240 8085 	bls.w	1a003216 <__udivmoddi4+0x2b6>
1a00310c:	f1a9 0902 	sub.w	r9, r9, #2
1a003110:	4463      	add	r3, ip
1a003112:	eba3 030a 	sub.w	r3, r3, sl
1a003116:	b2a4      	uxth	r4, r4
1a003118:	fbb3 f0fe 	udiv	r0, r3, lr
1a00311c:	fb0e 3310 	mls	r3, lr, r0, r3
1a003120:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003124:	fb00 f808 	mul.w	r8, r0, r8
1a003128:	45a0      	cmp	r8, r4
1a00312a:	d908      	bls.n	1a00313e <__udivmoddi4+0x1de>
1a00312c:	eb1c 0404 	adds.w	r4, ip, r4
1a003130:	f100 33ff 	add.w	r3, r0, #4294967295
1a003134:	d26b      	bcs.n	1a00320e <__udivmoddi4+0x2ae>
1a003136:	45a0      	cmp	r8, r4
1a003138:	d969      	bls.n	1a00320e <__udivmoddi4+0x2ae>
1a00313a:	3802      	subs	r0, #2
1a00313c:	4464      	add	r4, ip
1a00313e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003142:	eba4 0408 	sub.w	r4, r4, r8
1a003146:	fba0 8902 	umull	r8, r9, r0, r2
1a00314a:	454c      	cmp	r4, r9
1a00314c:	46c6      	mov	lr, r8
1a00314e:	464b      	mov	r3, r9
1a003150:	d354      	bcc.n	1a0031fc <__udivmoddi4+0x29c>
1a003152:	d051      	beq.n	1a0031f8 <__udivmoddi4+0x298>
1a003154:	2e00      	cmp	r6, #0
1a003156:	d069      	beq.n	1a00322c <__udivmoddi4+0x2cc>
1a003158:	ebb1 020e 	subs.w	r2, r1, lr
1a00315c:	eb64 0403 	sbc.w	r4, r4, r3
1a003160:	fa04 f505 	lsl.w	r5, r4, r5
1a003164:	fa22 f307 	lsr.w	r3, r2, r7
1a003168:	40fc      	lsrs	r4, r7
1a00316a:	431d      	orrs	r5, r3
1a00316c:	e9c6 5400 	strd	r5, r4, [r6]
1a003170:	2700      	movs	r7, #0
1a003172:	e746      	b.n	1a003002 <__udivmoddi4+0xa2>
1a003174:	4637      	mov	r7, r6
1a003176:	4630      	mov	r0, r6
1a003178:	e743      	b.n	1a003002 <__udivmoddi4+0xa2>
1a00317a:	4618      	mov	r0, r3
1a00317c:	e737      	b.n	1a002fee <__udivmoddi4+0x8e>
1a00317e:	4607      	mov	r7, r0
1a003180:	e71f      	b.n	1a002fc2 <__udivmoddi4+0x62>
1a003182:	f1c2 0320 	rsb	r3, r2, #32
1a003186:	fa20 f703 	lsr.w	r7, r0, r3
1a00318a:	4095      	lsls	r5, r2
1a00318c:	fa01 f002 	lsl.w	r0, r1, r2
1a003190:	fa21 f303 	lsr.w	r3, r1, r3
1a003194:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003198:	4338      	orrs	r0, r7
1a00319a:	0c01      	lsrs	r1, r0, #16
1a00319c:	fbb3 f7fe 	udiv	r7, r3, lr
1a0031a0:	fa1f f885 	uxth.w	r8, r5
1a0031a4:	fb0e 3317 	mls	r3, lr, r7, r3
1a0031a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0031ac:	fb07 f308 	mul.w	r3, r7, r8
1a0031b0:	428b      	cmp	r3, r1
1a0031b2:	fa04 f402 	lsl.w	r4, r4, r2
1a0031b6:	d907      	bls.n	1a0031c8 <__udivmoddi4+0x268>
1a0031b8:	1869      	adds	r1, r5, r1
1a0031ba:	f107 3cff 	add.w	ip, r7, #4294967295
1a0031be:	d228      	bcs.n	1a003212 <__udivmoddi4+0x2b2>
1a0031c0:	428b      	cmp	r3, r1
1a0031c2:	d926      	bls.n	1a003212 <__udivmoddi4+0x2b2>
1a0031c4:	3f02      	subs	r7, #2
1a0031c6:	4429      	add	r1, r5
1a0031c8:	1acb      	subs	r3, r1, r3
1a0031ca:	b281      	uxth	r1, r0
1a0031cc:	fbb3 f0fe 	udiv	r0, r3, lr
1a0031d0:	fb0e 3310 	mls	r3, lr, r0, r3
1a0031d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0031d8:	fb00 f308 	mul.w	r3, r0, r8
1a0031dc:	428b      	cmp	r3, r1
1a0031de:	d907      	bls.n	1a0031f0 <__udivmoddi4+0x290>
1a0031e0:	1869      	adds	r1, r5, r1
1a0031e2:	f100 3cff 	add.w	ip, r0, #4294967295
1a0031e6:	d210      	bcs.n	1a00320a <__udivmoddi4+0x2aa>
1a0031e8:	428b      	cmp	r3, r1
1a0031ea:	d90e      	bls.n	1a00320a <__udivmoddi4+0x2aa>
1a0031ec:	3802      	subs	r0, #2
1a0031ee:	4429      	add	r1, r5
1a0031f0:	1ac9      	subs	r1, r1, r3
1a0031f2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0031f6:	e714      	b.n	1a003022 <__udivmoddi4+0xc2>
1a0031f8:	4541      	cmp	r1, r8
1a0031fa:	d2ab      	bcs.n	1a003154 <__udivmoddi4+0x1f4>
1a0031fc:	ebb8 0e02 	subs.w	lr, r8, r2
1a003200:	eb69 020c 	sbc.w	r2, r9, ip
1a003204:	3801      	subs	r0, #1
1a003206:	4613      	mov	r3, r2
1a003208:	e7a4      	b.n	1a003154 <__udivmoddi4+0x1f4>
1a00320a:	4660      	mov	r0, ip
1a00320c:	e7f0      	b.n	1a0031f0 <__udivmoddi4+0x290>
1a00320e:	4618      	mov	r0, r3
1a003210:	e795      	b.n	1a00313e <__udivmoddi4+0x1de>
1a003212:	4667      	mov	r7, ip
1a003214:	e7d8      	b.n	1a0031c8 <__udivmoddi4+0x268>
1a003216:	4681      	mov	r9, r0
1a003218:	e77b      	b.n	1a003112 <__udivmoddi4+0x1b2>
1a00321a:	4638      	mov	r0, r7
1a00321c:	e745      	b.n	1a0030aa <__udivmoddi4+0x14a>
1a00321e:	f1ac 0c02 	sub.w	ip, ip, #2
1a003222:	442b      	add	r3, r5
1a003224:	e710      	b.n	1a003048 <__udivmoddi4+0xe8>
1a003226:	3802      	subs	r0, #2
1a003228:	442c      	add	r4, r5
1a00322a:	e721      	b.n	1a003070 <__udivmoddi4+0x110>
1a00322c:	4637      	mov	r7, r6
1a00322e:	e6e8      	b.n	1a003002 <__udivmoddi4+0xa2>

1a003230 <__aeabi_idiv0>:
1a003230:	4770      	bx	lr
1a003232:	bf00      	nop

1a003234 <atoi>:
1a003234:	220a      	movs	r2, #10
1a003236:	2100      	movs	r1, #0
1a003238:	f001 b83e 	b.w	1a0042b8 <strtol>

1a00323c <_fclose_r>:
1a00323c:	b570      	push	{r4, r5, r6, lr}
1a00323e:	4605      	mov	r5, r0
1a003240:	460c      	mov	r4, r1
1a003242:	b911      	cbnz	r1, 1a00324a <_fclose_r+0xe>
1a003244:	2600      	movs	r6, #0
1a003246:	4630      	mov	r0, r6
1a003248:	bd70      	pop	{r4, r5, r6, pc}
1a00324a:	b118      	cbz	r0, 1a003254 <_fclose_r+0x18>
1a00324c:	6983      	ldr	r3, [r0, #24]
1a00324e:	b90b      	cbnz	r3, 1a003254 <_fclose_r+0x18>
1a003250:	f000 f982 	bl	1a003558 <__sinit>
1a003254:	4b2c      	ldr	r3, [pc, #176]	; (1a003308 <_fclose_r+0xcc>)
1a003256:	429c      	cmp	r4, r3
1a003258:	d114      	bne.n	1a003284 <_fclose_r+0x48>
1a00325a:	686c      	ldr	r4, [r5, #4]
1a00325c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00325e:	07d8      	lsls	r0, r3, #31
1a003260:	d405      	bmi.n	1a00326e <_fclose_r+0x32>
1a003262:	89a3      	ldrh	r3, [r4, #12]
1a003264:	0599      	lsls	r1, r3, #22
1a003266:	d402      	bmi.n	1a00326e <_fclose_r+0x32>
1a003268:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00326a:	f000 fb39 	bl	1a0038e0 <__retarget_lock_acquire_recursive>
1a00326e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003272:	b98b      	cbnz	r3, 1a003298 <_fclose_r+0x5c>
1a003274:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a003276:	f016 0601 	ands.w	r6, r6, #1
1a00327a:	d1e3      	bne.n	1a003244 <_fclose_r+0x8>
1a00327c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00327e:	f000 fb30 	bl	1a0038e2 <__retarget_lock_release_recursive>
1a003282:	e7e0      	b.n	1a003246 <_fclose_r+0xa>
1a003284:	4b21      	ldr	r3, [pc, #132]	; (1a00330c <_fclose_r+0xd0>)
1a003286:	429c      	cmp	r4, r3
1a003288:	d101      	bne.n	1a00328e <_fclose_r+0x52>
1a00328a:	68ac      	ldr	r4, [r5, #8]
1a00328c:	e7e6      	b.n	1a00325c <_fclose_r+0x20>
1a00328e:	4b20      	ldr	r3, [pc, #128]	; (1a003310 <_fclose_r+0xd4>)
1a003290:	429c      	cmp	r4, r3
1a003292:	bf08      	it	eq
1a003294:	68ec      	ldreq	r4, [r5, #12]
1a003296:	e7e1      	b.n	1a00325c <_fclose_r+0x20>
1a003298:	4621      	mov	r1, r4
1a00329a:	4628      	mov	r0, r5
1a00329c:	f000 f842 	bl	1a003324 <__sflush_r>
1a0032a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0032a2:	4606      	mov	r6, r0
1a0032a4:	b133      	cbz	r3, 1a0032b4 <_fclose_r+0x78>
1a0032a6:	6a21      	ldr	r1, [r4, #32]
1a0032a8:	4628      	mov	r0, r5
1a0032aa:	4798      	blx	r3
1a0032ac:	2800      	cmp	r0, #0
1a0032ae:	bfb8      	it	lt
1a0032b0:	f04f 36ff 	movlt.w	r6, #4294967295
1a0032b4:	89a3      	ldrh	r3, [r4, #12]
1a0032b6:	061a      	lsls	r2, r3, #24
1a0032b8:	d503      	bpl.n	1a0032c2 <_fclose_r+0x86>
1a0032ba:	6921      	ldr	r1, [r4, #16]
1a0032bc:	4628      	mov	r0, r5
1a0032be:	f000 fb19 	bl	1a0038f4 <_free_r>
1a0032c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0032c4:	b141      	cbz	r1, 1a0032d8 <_fclose_r+0x9c>
1a0032c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0032ca:	4299      	cmp	r1, r3
1a0032cc:	d002      	beq.n	1a0032d4 <_fclose_r+0x98>
1a0032ce:	4628      	mov	r0, r5
1a0032d0:	f000 fb10 	bl	1a0038f4 <_free_r>
1a0032d4:	2300      	movs	r3, #0
1a0032d6:	6363      	str	r3, [r4, #52]	; 0x34
1a0032d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1a0032da:	b121      	cbz	r1, 1a0032e6 <_fclose_r+0xaa>
1a0032dc:	4628      	mov	r0, r5
1a0032de:	f000 fb09 	bl	1a0038f4 <_free_r>
1a0032e2:	2300      	movs	r3, #0
1a0032e4:	64a3      	str	r3, [r4, #72]	; 0x48
1a0032e6:	f000 f91f 	bl	1a003528 <__sfp_lock_acquire>
1a0032ea:	2300      	movs	r3, #0
1a0032ec:	81a3      	strh	r3, [r4, #12]
1a0032ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0032f0:	07db      	lsls	r3, r3, #31
1a0032f2:	d402      	bmi.n	1a0032fa <_fclose_r+0xbe>
1a0032f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0032f6:	f000 faf4 	bl	1a0038e2 <__retarget_lock_release_recursive>
1a0032fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0032fc:	f000 faef 	bl	1a0038de <__retarget_lock_close_recursive>
1a003300:	f000 f918 	bl	1a003534 <__sfp_lock_release>
1a003304:	e79f      	b.n	1a003246 <_fclose_r+0xa>
1a003306:	bf00      	nop
1a003308:	1a004d0c 	.word	0x1a004d0c
1a00330c:	1a004d2c 	.word	0x1a004d2c
1a003310:	1a004cec 	.word	0x1a004cec

1a003314 <fclose>:
1a003314:	4b02      	ldr	r3, [pc, #8]	; (1a003320 <fclose+0xc>)
1a003316:	4601      	mov	r1, r0
1a003318:	6818      	ldr	r0, [r3, #0]
1a00331a:	f7ff bf8f 	b.w	1a00323c <_fclose_r>
1a00331e:	bf00      	nop
1a003320:	100000dc 	.word	0x100000dc

1a003324 <__sflush_r>:
1a003324:	898a      	ldrh	r2, [r1, #12]
1a003326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00332a:	4605      	mov	r5, r0
1a00332c:	0710      	lsls	r0, r2, #28
1a00332e:	460c      	mov	r4, r1
1a003330:	d458      	bmi.n	1a0033e4 <__sflush_r+0xc0>
1a003332:	684b      	ldr	r3, [r1, #4]
1a003334:	2b00      	cmp	r3, #0
1a003336:	dc05      	bgt.n	1a003344 <__sflush_r+0x20>
1a003338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a00333a:	2b00      	cmp	r3, #0
1a00333c:	dc02      	bgt.n	1a003344 <__sflush_r+0x20>
1a00333e:	2000      	movs	r0, #0
1a003340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003346:	2e00      	cmp	r6, #0
1a003348:	d0f9      	beq.n	1a00333e <__sflush_r+0x1a>
1a00334a:	2300      	movs	r3, #0
1a00334c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003350:	682f      	ldr	r7, [r5, #0]
1a003352:	602b      	str	r3, [r5, #0]
1a003354:	d032      	beq.n	1a0033bc <__sflush_r+0x98>
1a003356:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003358:	89a3      	ldrh	r3, [r4, #12]
1a00335a:	075a      	lsls	r2, r3, #29
1a00335c:	d505      	bpl.n	1a00336a <__sflush_r+0x46>
1a00335e:	6863      	ldr	r3, [r4, #4]
1a003360:	1ac0      	subs	r0, r0, r3
1a003362:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003364:	b10b      	cbz	r3, 1a00336a <__sflush_r+0x46>
1a003366:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003368:	1ac0      	subs	r0, r0, r3
1a00336a:	2300      	movs	r3, #0
1a00336c:	4602      	mov	r2, r0
1a00336e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003370:	6a21      	ldr	r1, [r4, #32]
1a003372:	4628      	mov	r0, r5
1a003374:	47b0      	blx	r6
1a003376:	1c43      	adds	r3, r0, #1
1a003378:	89a3      	ldrh	r3, [r4, #12]
1a00337a:	d106      	bne.n	1a00338a <__sflush_r+0x66>
1a00337c:	6829      	ldr	r1, [r5, #0]
1a00337e:	291d      	cmp	r1, #29
1a003380:	d849      	bhi.n	1a003416 <__sflush_r+0xf2>
1a003382:	4a2a      	ldr	r2, [pc, #168]	; (1a00342c <__sflush_r+0x108>)
1a003384:	40ca      	lsrs	r2, r1
1a003386:	07d6      	lsls	r6, r2, #31
1a003388:	d545      	bpl.n	1a003416 <__sflush_r+0xf2>
1a00338a:	2200      	movs	r2, #0
1a00338c:	6062      	str	r2, [r4, #4]
1a00338e:	04d9      	lsls	r1, r3, #19
1a003390:	6922      	ldr	r2, [r4, #16]
1a003392:	6022      	str	r2, [r4, #0]
1a003394:	d504      	bpl.n	1a0033a0 <__sflush_r+0x7c>
1a003396:	1c42      	adds	r2, r0, #1
1a003398:	d101      	bne.n	1a00339e <__sflush_r+0x7a>
1a00339a:	682b      	ldr	r3, [r5, #0]
1a00339c:	b903      	cbnz	r3, 1a0033a0 <__sflush_r+0x7c>
1a00339e:	6560      	str	r0, [r4, #84]	; 0x54
1a0033a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0033a2:	602f      	str	r7, [r5, #0]
1a0033a4:	2900      	cmp	r1, #0
1a0033a6:	d0ca      	beq.n	1a00333e <__sflush_r+0x1a>
1a0033a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0033ac:	4299      	cmp	r1, r3
1a0033ae:	d002      	beq.n	1a0033b6 <__sflush_r+0x92>
1a0033b0:	4628      	mov	r0, r5
1a0033b2:	f000 fa9f 	bl	1a0038f4 <_free_r>
1a0033b6:	2000      	movs	r0, #0
1a0033b8:	6360      	str	r0, [r4, #52]	; 0x34
1a0033ba:	e7c1      	b.n	1a003340 <__sflush_r+0x1c>
1a0033bc:	6a21      	ldr	r1, [r4, #32]
1a0033be:	2301      	movs	r3, #1
1a0033c0:	4628      	mov	r0, r5
1a0033c2:	47b0      	blx	r6
1a0033c4:	1c41      	adds	r1, r0, #1
1a0033c6:	d1c7      	bne.n	1a003358 <__sflush_r+0x34>
1a0033c8:	682b      	ldr	r3, [r5, #0]
1a0033ca:	2b00      	cmp	r3, #0
1a0033cc:	d0c4      	beq.n	1a003358 <__sflush_r+0x34>
1a0033ce:	2b1d      	cmp	r3, #29
1a0033d0:	d001      	beq.n	1a0033d6 <__sflush_r+0xb2>
1a0033d2:	2b16      	cmp	r3, #22
1a0033d4:	d101      	bne.n	1a0033da <__sflush_r+0xb6>
1a0033d6:	602f      	str	r7, [r5, #0]
1a0033d8:	e7b1      	b.n	1a00333e <__sflush_r+0x1a>
1a0033da:	89a3      	ldrh	r3, [r4, #12]
1a0033dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0033e0:	81a3      	strh	r3, [r4, #12]
1a0033e2:	e7ad      	b.n	1a003340 <__sflush_r+0x1c>
1a0033e4:	690f      	ldr	r7, [r1, #16]
1a0033e6:	2f00      	cmp	r7, #0
1a0033e8:	d0a9      	beq.n	1a00333e <__sflush_r+0x1a>
1a0033ea:	0793      	lsls	r3, r2, #30
1a0033ec:	680e      	ldr	r6, [r1, #0]
1a0033ee:	bf08      	it	eq
1a0033f0:	694b      	ldreq	r3, [r1, #20]
1a0033f2:	600f      	str	r7, [r1, #0]
1a0033f4:	bf18      	it	ne
1a0033f6:	2300      	movne	r3, #0
1a0033f8:	eba6 0807 	sub.w	r8, r6, r7
1a0033fc:	608b      	str	r3, [r1, #8]
1a0033fe:	f1b8 0f00 	cmp.w	r8, #0
1a003402:	dd9c      	ble.n	1a00333e <__sflush_r+0x1a>
1a003404:	4643      	mov	r3, r8
1a003406:	463a      	mov	r2, r7
1a003408:	6a21      	ldr	r1, [r4, #32]
1a00340a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a00340c:	4628      	mov	r0, r5
1a00340e:	47b0      	blx	r6
1a003410:	2800      	cmp	r0, #0
1a003412:	dc06      	bgt.n	1a003422 <__sflush_r+0xfe>
1a003414:	89a3      	ldrh	r3, [r4, #12]
1a003416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00341a:	81a3      	strh	r3, [r4, #12]
1a00341c:	f04f 30ff 	mov.w	r0, #4294967295
1a003420:	e78e      	b.n	1a003340 <__sflush_r+0x1c>
1a003422:	4407      	add	r7, r0
1a003424:	eba8 0800 	sub.w	r8, r8, r0
1a003428:	e7e9      	b.n	1a0033fe <__sflush_r+0xda>
1a00342a:	bf00      	nop
1a00342c:	20400001 	.word	0x20400001

1a003430 <_fflush_r>:
1a003430:	b538      	push	{r3, r4, r5, lr}
1a003432:	690b      	ldr	r3, [r1, #16]
1a003434:	4605      	mov	r5, r0
1a003436:	460c      	mov	r4, r1
1a003438:	b913      	cbnz	r3, 1a003440 <_fflush_r+0x10>
1a00343a:	2500      	movs	r5, #0
1a00343c:	4628      	mov	r0, r5
1a00343e:	bd38      	pop	{r3, r4, r5, pc}
1a003440:	b118      	cbz	r0, 1a00344a <_fflush_r+0x1a>
1a003442:	6983      	ldr	r3, [r0, #24]
1a003444:	b90b      	cbnz	r3, 1a00344a <_fflush_r+0x1a>
1a003446:	f000 f887 	bl	1a003558 <__sinit>
1a00344a:	4b14      	ldr	r3, [pc, #80]	; (1a00349c <_fflush_r+0x6c>)
1a00344c:	429c      	cmp	r4, r3
1a00344e:	d11b      	bne.n	1a003488 <_fflush_r+0x58>
1a003450:	686c      	ldr	r4, [r5, #4]
1a003452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003456:	2b00      	cmp	r3, #0
1a003458:	d0ef      	beq.n	1a00343a <_fflush_r+0xa>
1a00345a:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00345c:	07d0      	lsls	r0, r2, #31
1a00345e:	d404      	bmi.n	1a00346a <_fflush_r+0x3a>
1a003460:	0599      	lsls	r1, r3, #22
1a003462:	d402      	bmi.n	1a00346a <_fflush_r+0x3a>
1a003464:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003466:	f000 fa3b 	bl	1a0038e0 <__retarget_lock_acquire_recursive>
1a00346a:	4628      	mov	r0, r5
1a00346c:	4621      	mov	r1, r4
1a00346e:	f7ff ff59 	bl	1a003324 <__sflush_r>
1a003472:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003474:	07da      	lsls	r2, r3, #31
1a003476:	4605      	mov	r5, r0
1a003478:	d4e0      	bmi.n	1a00343c <_fflush_r+0xc>
1a00347a:	89a3      	ldrh	r3, [r4, #12]
1a00347c:	059b      	lsls	r3, r3, #22
1a00347e:	d4dd      	bmi.n	1a00343c <_fflush_r+0xc>
1a003480:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003482:	f000 fa2e 	bl	1a0038e2 <__retarget_lock_release_recursive>
1a003486:	e7d9      	b.n	1a00343c <_fflush_r+0xc>
1a003488:	4b05      	ldr	r3, [pc, #20]	; (1a0034a0 <_fflush_r+0x70>)
1a00348a:	429c      	cmp	r4, r3
1a00348c:	d101      	bne.n	1a003492 <_fflush_r+0x62>
1a00348e:	68ac      	ldr	r4, [r5, #8]
1a003490:	e7df      	b.n	1a003452 <_fflush_r+0x22>
1a003492:	4b04      	ldr	r3, [pc, #16]	; (1a0034a4 <_fflush_r+0x74>)
1a003494:	429c      	cmp	r4, r3
1a003496:	bf08      	it	eq
1a003498:	68ec      	ldreq	r4, [r5, #12]
1a00349a:	e7da      	b.n	1a003452 <_fflush_r+0x22>
1a00349c:	1a004d0c 	.word	0x1a004d0c
1a0034a0:	1a004d2c 	.word	0x1a004d2c
1a0034a4:	1a004cec 	.word	0x1a004cec

1a0034a8 <std>:
1a0034a8:	2300      	movs	r3, #0
1a0034aa:	b510      	push	{r4, lr}
1a0034ac:	4604      	mov	r4, r0
1a0034ae:	e9c0 3300 	strd	r3, r3, [r0]
1a0034b2:	6083      	str	r3, [r0, #8]
1a0034b4:	8181      	strh	r1, [r0, #12]
1a0034b6:	6643      	str	r3, [r0, #100]	; 0x64
1a0034b8:	81c2      	strh	r2, [r0, #14]
1a0034ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0034be:	6183      	str	r3, [r0, #24]
1a0034c0:	4619      	mov	r1, r3
1a0034c2:	2208      	movs	r2, #8
1a0034c4:	305c      	adds	r0, #92	; 0x5c
1a0034c6:	f000 fa0d 	bl	1a0038e4 <memset>
1a0034ca:	4b05      	ldr	r3, [pc, #20]	; (1a0034e0 <std+0x38>)
1a0034cc:	6263      	str	r3, [r4, #36]	; 0x24
1a0034ce:	4b05      	ldr	r3, [pc, #20]	; (1a0034e4 <std+0x3c>)
1a0034d0:	62a3      	str	r3, [r4, #40]	; 0x28
1a0034d2:	4b05      	ldr	r3, [pc, #20]	; (1a0034e8 <std+0x40>)
1a0034d4:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0034d6:	4b05      	ldr	r3, [pc, #20]	; (1a0034ec <std+0x44>)
1a0034d8:	6224      	str	r4, [r4, #32]
1a0034da:	6323      	str	r3, [r4, #48]	; 0x30
1a0034dc:	bd10      	pop	{r4, pc}
1a0034de:	bf00      	nop
1a0034e0:	1a00412d 	.word	0x1a00412d
1a0034e4:	1a00414f 	.word	0x1a00414f
1a0034e8:	1a004187 	.word	0x1a004187
1a0034ec:	1a0041ab 	.word	0x1a0041ab

1a0034f0 <_cleanup_r>:
1a0034f0:	4901      	ldr	r1, [pc, #4]	; (1a0034f8 <_cleanup_r+0x8>)
1a0034f2:	f000 b9b1 	b.w	1a003858 <_fwalk_reent>
1a0034f6:	bf00      	nop
1a0034f8:	1a003431 	.word	0x1a003431

1a0034fc <__sfmoreglue>:
1a0034fc:	b570      	push	{r4, r5, r6, lr}
1a0034fe:	1e4a      	subs	r2, r1, #1
1a003500:	2568      	movs	r5, #104	; 0x68
1a003502:	4355      	muls	r5, r2
1a003504:	460e      	mov	r6, r1
1a003506:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00350a:	f000 fa41 	bl	1a003990 <_malloc_r>
1a00350e:	4604      	mov	r4, r0
1a003510:	b140      	cbz	r0, 1a003524 <__sfmoreglue+0x28>
1a003512:	2100      	movs	r1, #0
1a003514:	e9c0 1600 	strd	r1, r6, [r0]
1a003518:	300c      	adds	r0, #12
1a00351a:	60a0      	str	r0, [r4, #8]
1a00351c:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003520:	f000 f9e0 	bl	1a0038e4 <memset>
1a003524:	4620      	mov	r0, r4
1a003526:	bd70      	pop	{r4, r5, r6, pc}

1a003528 <__sfp_lock_acquire>:
1a003528:	4801      	ldr	r0, [pc, #4]	; (1a003530 <__sfp_lock_acquire+0x8>)
1a00352a:	f000 b9d9 	b.w	1a0038e0 <__retarget_lock_acquire_recursive>
1a00352e:	bf00      	nop
1a003530:	100001b8 	.word	0x100001b8

1a003534 <__sfp_lock_release>:
1a003534:	4801      	ldr	r0, [pc, #4]	; (1a00353c <__sfp_lock_release+0x8>)
1a003536:	f000 b9d4 	b.w	1a0038e2 <__retarget_lock_release_recursive>
1a00353a:	bf00      	nop
1a00353c:	100001b8 	.word	0x100001b8

1a003540 <__sinit_lock_acquire>:
1a003540:	4801      	ldr	r0, [pc, #4]	; (1a003548 <__sinit_lock_acquire+0x8>)
1a003542:	f000 b9cd 	b.w	1a0038e0 <__retarget_lock_acquire_recursive>
1a003546:	bf00      	nop
1a003548:	100001b3 	.word	0x100001b3

1a00354c <__sinit_lock_release>:
1a00354c:	4801      	ldr	r0, [pc, #4]	; (1a003554 <__sinit_lock_release+0x8>)
1a00354e:	f000 b9c8 	b.w	1a0038e2 <__retarget_lock_release_recursive>
1a003552:	bf00      	nop
1a003554:	100001b3 	.word	0x100001b3

1a003558 <__sinit>:
1a003558:	b510      	push	{r4, lr}
1a00355a:	4604      	mov	r4, r0
1a00355c:	f7ff fff0 	bl	1a003540 <__sinit_lock_acquire>
1a003560:	69a3      	ldr	r3, [r4, #24]
1a003562:	b11b      	cbz	r3, 1a00356c <__sinit+0x14>
1a003564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003568:	f7ff bff0 	b.w	1a00354c <__sinit_lock_release>
1a00356c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a003570:	6523      	str	r3, [r4, #80]	; 0x50
1a003572:	4b13      	ldr	r3, [pc, #76]	; (1a0035c0 <__sinit+0x68>)
1a003574:	4a13      	ldr	r2, [pc, #76]	; (1a0035c4 <__sinit+0x6c>)
1a003576:	681b      	ldr	r3, [r3, #0]
1a003578:	62a2      	str	r2, [r4, #40]	; 0x28
1a00357a:	42a3      	cmp	r3, r4
1a00357c:	bf04      	itt	eq
1a00357e:	2301      	moveq	r3, #1
1a003580:	61a3      	streq	r3, [r4, #24]
1a003582:	4620      	mov	r0, r4
1a003584:	f000 f820 	bl	1a0035c8 <__sfp>
1a003588:	6060      	str	r0, [r4, #4]
1a00358a:	4620      	mov	r0, r4
1a00358c:	f000 f81c 	bl	1a0035c8 <__sfp>
1a003590:	60a0      	str	r0, [r4, #8]
1a003592:	4620      	mov	r0, r4
1a003594:	f000 f818 	bl	1a0035c8 <__sfp>
1a003598:	2200      	movs	r2, #0
1a00359a:	60e0      	str	r0, [r4, #12]
1a00359c:	2104      	movs	r1, #4
1a00359e:	6860      	ldr	r0, [r4, #4]
1a0035a0:	f7ff ff82 	bl	1a0034a8 <std>
1a0035a4:	2201      	movs	r2, #1
1a0035a6:	2109      	movs	r1, #9
1a0035a8:	68a0      	ldr	r0, [r4, #8]
1a0035aa:	f7ff ff7d 	bl	1a0034a8 <std>
1a0035ae:	2202      	movs	r2, #2
1a0035b0:	2112      	movs	r1, #18
1a0035b2:	68e0      	ldr	r0, [r4, #12]
1a0035b4:	f7ff ff78 	bl	1a0034a8 <std>
1a0035b8:	2301      	movs	r3, #1
1a0035ba:	61a3      	str	r3, [r4, #24]
1a0035bc:	e7d2      	b.n	1a003564 <__sinit+0xc>
1a0035be:	bf00      	nop
1a0035c0:	1a004d4c 	.word	0x1a004d4c
1a0035c4:	1a0034f1 	.word	0x1a0034f1

1a0035c8 <__sfp>:
1a0035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0035ca:	4607      	mov	r7, r0
1a0035cc:	f7ff ffac 	bl	1a003528 <__sfp_lock_acquire>
1a0035d0:	4b1e      	ldr	r3, [pc, #120]	; (1a00364c <__sfp+0x84>)
1a0035d2:	681e      	ldr	r6, [r3, #0]
1a0035d4:	69b3      	ldr	r3, [r6, #24]
1a0035d6:	b913      	cbnz	r3, 1a0035de <__sfp+0x16>
1a0035d8:	4630      	mov	r0, r6
1a0035da:	f7ff ffbd 	bl	1a003558 <__sinit>
1a0035de:	3648      	adds	r6, #72	; 0x48
1a0035e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0035e4:	3b01      	subs	r3, #1
1a0035e6:	d503      	bpl.n	1a0035f0 <__sfp+0x28>
1a0035e8:	6833      	ldr	r3, [r6, #0]
1a0035ea:	b30b      	cbz	r3, 1a003630 <__sfp+0x68>
1a0035ec:	6836      	ldr	r6, [r6, #0]
1a0035ee:	e7f7      	b.n	1a0035e0 <__sfp+0x18>
1a0035f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0035f4:	b9d5      	cbnz	r5, 1a00362c <__sfp+0x64>
1a0035f6:	4b16      	ldr	r3, [pc, #88]	; (1a003650 <__sfp+0x88>)
1a0035f8:	60e3      	str	r3, [r4, #12]
1a0035fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0035fe:	6665      	str	r5, [r4, #100]	; 0x64
1a003600:	f000 f96c 	bl	1a0038dc <__retarget_lock_init_recursive>
1a003604:	f7ff ff96 	bl	1a003534 <__sfp_lock_release>
1a003608:	6025      	str	r5, [r4, #0]
1a00360a:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a00360e:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a003612:	61a5      	str	r5, [r4, #24]
1a003614:	2208      	movs	r2, #8
1a003616:	4629      	mov	r1, r5
1a003618:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a00361c:	f000 f962 	bl	1a0038e4 <memset>
1a003620:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003624:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003628:	4620      	mov	r0, r4
1a00362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00362c:	3468      	adds	r4, #104	; 0x68
1a00362e:	e7d9      	b.n	1a0035e4 <__sfp+0x1c>
1a003630:	2104      	movs	r1, #4
1a003632:	4638      	mov	r0, r7
1a003634:	f7ff ff62 	bl	1a0034fc <__sfmoreglue>
1a003638:	4604      	mov	r4, r0
1a00363a:	6030      	str	r0, [r6, #0]
1a00363c:	2800      	cmp	r0, #0
1a00363e:	d1d5      	bne.n	1a0035ec <__sfp+0x24>
1a003640:	f7ff ff78 	bl	1a003534 <__sfp_lock_release>
1a003644:	230c      	movs	r3, #12
1a003646:	603b      	str	r3, [r7, #0]
1a003648:	e7ee      	b.n	1a003628 <__sfp+0x60>
1a00364a:	bf00      	nop
1a00364c:	1a004d4c 	.word	0x1a004d4c
1a003650:	ffff0001 	.word	0xffff0001

1a003654 <fccloser>:
1a003654:	b570      	push	{r4, r5, r6, lr}
1a003656:	694c      	ldr	r4, [r1, #20]
1a003658:	4606      	mov	r6, r0
1a00365a:	460d      	mov	r5, r1
1a00365c:	b184      	cbz	r4, 1a003680 <fccloser+0x2c>
1a00365e:	f000 fef5 	bl	1a00444c <__errno>
1a003662:	2300      	movs	r3, #0
1a003664:	6003      	str	r3, [r0, #0]
1a003666:	696b      	ldr	r3, [r5, #20]
1a003668:	6828      	ldr	r0, [r5, #0]
1a00366a:	4798      	blx	r3
1a00366c:	1e04      	subs	r4, r0, #0
1a00366e:	da07      	bge.n	1a003680 <fccloser+0x2c>
1a003670:	f000 feec 	bl	1a00444c <__errno>
1a003674:	6803      	ldr	r3, [r0, #0]
1a003676:	b11b      	cbz	r3, 1a003680 <fccloser+0x2c>
1a003678:	f000 fee8 	bl	1a00444c <__errno>
1a00367c:	6803      	ldr	r3, [r0, #0]
1a00367e:	6033      	str	r3, [r6, #0]
1a003680:	4630      	mov	r0, r6
1a003682:	4629      	mov	r1, r5
1a003684:	f000 f936 	bl	1a0038f4 <_free_r>
1a003688:	4620      	mov	r0, r4
1a00368a:	bd70      	pop	{r4, r5, r6, pc}

1a00368c <fcwriter>:
1a00368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003690:	4698      	mov	r8, r3
1a003692:	684b      	ldr	r3, [r1, #4]
1a003694:	4617      	mov	r7, r2
1a003696:	899a      	ldrh	r2, [r3, #12]
1a003698:	05d2      	lsls	r2, r2, #23
1a00369a:	4606      	mov	r6, r0
1a00369c:	460c      	mov	r4, r1
1a00369e:	d504      	bpl.n	1a0036aa <fcwriter+0x1e>
1a0036a0:	6add      	ldr	r5, [r3, #44]	; 0x2c
1a0036a2:	b115      	cbz	r5, 1a0036aa <fcwriter+0x1e>
1a0036a4:	2302      	movs	r3, #2
1a0036a6:	2200      	movs	r2, #0
1a0036a8:	47a8      	blx	r5
1a0036aa:	f000 fecf 	bl	1a00444c <__errno>
1a0036ae:	2300      	movs	r3, #0
1a0036b0:	6003      	str	r3, [r0, #0]
1a0036b2:	4642      	mov	r2, r8
1a0036b4:	68e3      	ldr	r3, [r4, #12]
1a0036b6:	6820      	ldr	r0, [r4, #0]
1a0036b8:	4639      	mov	r1, r7
1a0036ba:	4798      	blx	r3
1a0036bc:	1e04      	subs	r4, r0, #0
1a0036be:	da07      	bge.n	1a0036d0 <fcwriter+0x44>
1a0036c0:	f000 fec4 	bl	1a00444c <__errno>
1a0036c4:	6803      	ldr	r3, [r0, #0]
1a0036c6:	b11b      	cbz	r3, 1a0036d0 <fcwriter+0x44>
1a0036c8:	f000 fec0 	bl	1a00444c <__errno>
1a0036cc:	6803      	ldr	r3, [r0, #0]
1a0036ce:	6033      	str	r3, [r6, #0]
1a0036d0:	4620      	mov	r0, r4
1a0036d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0036d6 <fcreader>:
1a0036d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0036da:	460c      	mov	r4, r1
1a0036dc:	4617      	mov	r7, r2
1a0036de:	4698      	mov	r8, r3
1a0036e0:	4605      	mov	r5, r0
1a0036e2:	f000 feb3 	bl	1a00444c <__errno>
1a0036e6:	2300      	movs	r3, #0
1a0036e8:	6003      	str	r3, [r0, #0]
1a0036ea:	68a6      	ldr	r6, [r4, #8]
1a0036ec:	6820      	ldr	r0, [r4, #0]
1a0036ee:	4642      	mov	r2, r8
1a0036f0:	4639      	mov	r1, r7
1a0036f2:	47b0      	blx	r6
1a0036f4:	1e04      	subs	r4, r0, #0
1a0036f6:	da07      	bge.n	1a003708 <fcreader+0x32>
1a0036f8:	f000 fea8 	bl	1a00444c <__errno>
1a0036fc:	6803      	ldr	r3, [r0, #0]
1a0036fe:	b11b      	cbz	r3, 1a003708 <fcreader+0x32>
1a003700:	f000 fea4 	bl	1a00444c <__errno>
1a003704:	6803      	ldr	r3, [r0, #0]
1a003706:	602b      	str	r3, [r5, #0]
1a003708:	4620      	mov	r0, r4
1a00370a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a00370e <fcseeker>:
1a00370e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1a003710:	460c      	mov	r4, r1
1a003712:	461f      	mov	r7, r3
1a003714:	9201      	str	r2, [sp, #4]
1a003716:	4605      	mov	r5, r0
1a003718:	f000 fe98 	bl	1a00444c <__errno>
1a00371c:	2300      	movs	r3, #0
1a00371e:	6003      	str	r3, [r0, #0]
1a003720:	6926      	ldr	r6, [r4, #16]
1a003722:	6820      	ldr	r0, [r4, #0]
1a003724:	463a      	mov	r2, r7
1a003726:	a901      	add	r1, sp, #4
1a003728:	47b0      	blx	r6
1a00372a:	2800      	cmp	r0, #0
1a00372c:	da07      	bge.n	1a00373e <fcseeker+0x30>
1a00372e:	f000 fe8d 	bl	1a00444c <__errno>
1a003732:	6803      	ldr	r3, [r0, #0]
1a003734:	b11b      	cbz	r3, 1a00373e <fcseeker+0x30>
1a003736:	f000 fe89 	bl	1a00444c <__errno>
1a00373a:	6803      	ldr	r3, [r0, #0]
1a00373c:	602b      	str	r3, [r5, #0]
1a00373e:	9801      	ldr	r0, [sp, #4]
1a003740:	b003      	add	sp, #12
1a003742:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a003744 <_fopencookie_r>:
1a003744:	b082      	sub	sp, #8
1a003746:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
1a00374a:	468a      	mov	sl, r1
1a00374c:	4611      	mov	r1, r2
1a00374e:	aa01      	add	r2, sp, #4
1a003750:	4605      	mov	r5, r0
1a003752:	930b      	str	r3, [sp, #44]	; 0x2c
1a003754:	4699      	mov	r9, r3
1a003756:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
1a00375a:	f000 fe7d 	bl	1a004458 <__sflags>
1a00375e:	4606      	mov	r6, r0
1a003760:	b930      	cbnz	r0, 1a003770 <_fopencookie_r+0x2c>
1a003762:	2400      	movs	r4, #0
1a003764:	4620      	mov	r0, r4
1a003766:	b002      	add	sp, #8
1a003768:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00376c:	b002      	add	sp, #8
1a00376e:	4770      	bx	lr
1a003770:	f010 0f14 	tst.w	r0, #20
1a003774:	d002      	beq.n	1a00377c <_fopencookie_r+0x38>
1a003776:	f1b9 0f00 	cmp.w	r9, #0
1a00377a:	d005      	beq.n	1a003788 <_fopencookie_r+0x44>
1a00377c:	f016 0f18 	tst.w	r6, #24
1a003780:	d005      	beq.n	1a00378e <_fopencookie_r+0x4a>
1a003782:	f1b8 0f00 	cmp.w	r8, #0
1a003786:	d102      	bne.n	1a00378e <_fopencookie_r+0x4a>
1a003788:	2316      	movs	r3, #22
1a00378a:	602b      	str	r3, [r5, #0]
1a00378c:	e7e9      	b.n	1a003762 <_fopencookie_r+0x1e>
1a00378e:	4628      	mov	r0, r5
1a003790:	f7ff ff1a 	bl	1a0035c8 <__sfp>
1a003794:	4604      	mov	r4, r0
1a003796:	2800      	cmp	r0, #0
1a003798:	d0e3      	beq.n	1a003762 <_fopencookie_r+0x1e>
1a00379a:	4628      	mov	r0, r5
1a00379c:	2118      	movs	r1, #24
1a00379e:	f000 f8f7 	bl	1a003990 <_malloc_r>
1a0037a2:	4605      	mov	r5, r0
1a0037a4:	b940      	cbnz	r0, 1a0037b8 <_fopencookie_r+0x74>
1a0037a6:	f7ff febf 	bl	1a003528 <__sfp_lock_acquire>
1a0037aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0037ac:	81a5      	strh	r5, [r4, #12]
1a0037ae:	f000 f896 	bl	1a0038de <__retarget_lock_close_recursive>
1a0037b2:	f7ff febf 	bl	1a003534 <__sfp_lock_release>
1a0037b6:	e7d4      	b.n	1a003762 <_fopencookie_r+0x1e>
1a0037b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0037ba:	07d8      	lsls	r0, r3, #31
1a0037bc:	d405      	bmi.n	1a0037ca <_fopencookie_r+0x86>
1a0037be:	89a3      	ldrh	r3, [r4, #12]
1a0037c0:	0599      	lsls	r1, r3, #22
1a0037c2:	d402      	bmi.n	1a0037ca <_fopencookie_r+0x86>
1a0037c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0037c6:	f000 f88b 	bl	1a0038e0 <__retarget_lock_acquire_recursive>
1a0037ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0037ce:	81e3      	strh	r3, [r4, #14]
1a0037d0:	4b0f      	ldr	r3, [pc, #60]	; (1a003810 <_fopencookie_r+0xcc>)
1a0037d2:	81a6      	strh	r6, [r4, #12]
1a0037d4:	2f00      	cmp	r7, #0
1a0037d6:	e9c5 a400 	strd	sl, r4, [r5]
1a0037da:	6225      	str	r5, [r4, #32]
1a0037dc:	f8c5 9008 	str.w	r9, [r5, #8]
1a0037e0:	6263      	str	r3, [r4, #36]	; 0x24
1a0037e2:	4b0c      	ldr	r3, [pc, #48]	; (1a003814 <_fopencookie_r+0xd0>)
1a0037e4:	f8c5 800c 	str.w	r8, [r5, #12]
1a0037e8:	62a3      	str	r3, [r4, #40]	; 0x28
1a0037ea:	4b0b      	ldr	r3, [pc, #44]	; (1a003818 <_fopencookie_r+0xd4>)
1a0037ec:	612f      	str	r7, [r5, #16]
1a0037ee:	bf08      	it	eq
1a0037f0:	2300      	moveq	r3, #0
1a0037f2:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0037f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0037f6:	616b      	str	r3, [r5, #20]
1a0037f8:	4b08      	ldr	r3, [pc, #32]	; (1a00381c <_fopencookie_r+0xd8>)
1a0037fa:	6323      	str	r3, [r4, #48]	; 0x30
1a0037fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0037fe:	07da      	lsls	r2, r3, #31
1a003800:	d4b0      	bmi.n	1a003764 <_fopencookie_r+0x20>
1a003802:	05b3      	lsls	r3, r6, #22
1a003804:	d4ae      	bmi.n	1a003764 <_fopencookie_r+0x20>
1a003806:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003808:	f000 f86b 	bl	1a0038e2 <__retarget_lock_release_recursive>
1a00380c:	e7aa      	b.n	1a003764 <_fopencookie_r+0x20>
1a00380e:	bf00      	nop
1a003810:	1a0036d7 	.word	0x1a0036d7
1a003814:	1a00368d 	.word	0x1a00368d
1a003818:	1a00370f 	.word	0x1a00370f
1a00381c:	1a003655 	.word	0x1a003655

1a003820 <fopencookie>:
1a003820:	b082      	sub	sp, #8
1a003822:	b530      	push	{r4, r5, lr}
1a003824:	b085      	sub	sp, #20
1a003826:	460d      	mov	r5, r1
1a003828:	a908      	add	r1, sp, #32
1a00382a:	e881 000c 	stmia.w	r1, {r2, r3}
1a00382e:	ab09      	add	r3, sp, #36	; 0x24
1a003830:	4604      	mov	r4, r0
1a003832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a003836:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
1a00383a:	4806      	ldr	r0, [pc, #24]	; (1a003854 <fopencookie+0x34>)
1a00383c:	9b08      	ldr	r3, [sp, #32]
1a00383e:	6800      	ldr	r0, [r0, #0]
1a003840:	462a      	mov	r2, r5
1a003842:	4621      	mov	r1, r4
1a003844:	f7ff ff7e 	bl	1a003744 <_fopencookie_r>
1a003848:	b005      	add	sp, #20
1a00384a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a00384e:	b002      	add	sp, #8
1a003850:	4770      	bx	lr
1a003852:	bf00      	nop
1a003854:	100000dc 	.word	0x100000dc

1a003858 <_fwalk_reent>:
1a003858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00385c:	4680      	mov	r8, r0
1a00385e:	4689      	mov	r9, r1
1a003860:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003864:	2600      	movs	r6, #0
1a003866:	b914      	cbnz	r4, 1a00386e <_fwalk_reent+0x16>
1a003868:	4630      	mov	r0, r6
1a00386a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00386e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003872:	3f01      	subs	r7, #1
1a003874:	d501      	bpl.n	1a00387a <_fwalk_reent+0x22>
1a003876:	6824      	ldr	r4, [r4, #0]
1a003878:	e7f5      	b.n	1a003866 <_fwalk_reent+0xe>
1a00387a:	89ab      	ldrh	r3, [r5, #12]
1a00387c:	2b01      	cmp	r3, #1
1a00387e:	d907      	bls.n	1a003890 <_fwalk_reent+0x38>
1a003880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003884:	3301      	adds	r3, #1
1a003886:	d003      	beq.n	1a003890 <_fwalk_reent+0x38>
1a003888:	4629      	mov	r1, r5
1a00388a:	4640      	mov	r0, r8
1a00388c:	47c8      	blx	r9
1a00388e:	4306      	orrs	r6, r0
1a003890:	3568      	adds	r5, #104	; 0x68
1a003892:	e7ee      	b.n	1a003872 <_fwalk_reent+0x1a>

1a003894 <__libc_init_array>:
1a003894:	b570      	push	{r4, r5, r6, lr}
1a003896:	4d0d      	ldr	r5, [pc, #52]	; (1a0038cc <__libc_init_array+0x38>)
1a003898:	4c0d      	ldr	r4, [pc, #52]	; (1a0038d0 <__libc_init_array+0x3c>)
1a00389a:	1b64      	subs	r4, r4, r5
1a00389c:	10a4      	asrs	r4, r4, #2
1a00389e:	2600      	movs	r6, #0
1a0038a0:	42a6      	cmp	r6, r4
1a0038a2:	d109      	bne.n	1a0038b8 <__libc_init_array+0x24>
1a0038a4:	4d0b      	ldr	r5, [pc, #44]	; (1a0038d4 <__libc_init_array+0x40>)
1a0038a6:	4c0c      	ldr	r4, [pc, #48]	; (1a0038d8 <__libc_init_array+0x44>)
1a0038a8:	f7fd f863 	bl	1a000972 <_init>
1a0038ac:	1b64      	subs	r4, r4, r5
1a0038ae:	10a4      	asrs	r4, r4, #2
1a0038b0:	2600      	movs	r6, #0
1a0038b2:	42a6      	cmp	r6, r4
1a0038b4:	d105      	bne.n	1a0038c2 <__libc_init_array+0x2e>
1a0038b6:	bd70      	pop	{r4, r5, r6, pc}
1a0038b8:	f855 3b04 	ldr.w	r3, [r5], #4
1a0038bc:	4798      	blx	r3
1a0038be:	3601      	adds	r6, #1
1a0038c0:	e7ee      	b.n	1a0038a0 <__libc_init_array+0xc>
1a0038c2:	f855 3b04 	ldr.w	r3, [r5], #4
1a0038c6:	4798      	blx	r3
1a0038c8:	3601      	adds	r6, #1
1a0038ca:	e7f2      	b.n	1a0038b2 <__libc_init_array+0x1e>
1a0038cc:	1a004d84 	.word	0x1a004d84
1a0038d0:	1a004d84 	.word	0x1a004d84
1a0038d4:	1a004d84 	.word	0x1a004d84
1a0038d8:	1a004d88 	.word	0x1a004d88

1a0038dc <__retarget_lock_init_recursive>:
1a0038dc:	4770      	bx	lr

1a0038de <__retarget_lock_close_recursive>:
1a0038de:	4770      	bx	lr

1a0038e0 <__retarget_lock_acquire_recursive>:
1a0038e0:	4770      	bx	lr

1a0038e2 <__retarget_lock_release_recursive>:
1a0038e2:	4770      	bx	lr

1a0038e4 <memset>:
1a0038e4:	4402      	add	r2, r0
1a0038e6:	4603      	mov	r3, r0
1a0038e8:	4293      	cmp	r3, r2
1a0038ea:	d100      	bne.n	1a0038ee <memset+0xa>
1a0038ec:	4770      	bx	lr
1a0038ee:	f803 1b01 	strb.w	r1, [r3], #1
1a0038f2:	e7f9      	b.n	1a0038e8 <memset+0x4>

1a0038f4 <_free_r>:
1a0038f4:	b538      	push	{r3, r4, r5, lr}
1a0038f6:	4605      	mov	r5, r0
1a0038f8:	2900      	cmp	r1, #0
1a0038fa:	d045      	beq.n	1a003988 <_free_r+0x94>
1a0038fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003900:	1f0c      	subs	r4, r1, #4
1a003902:	2b00      	cmp	r3, #0
1a003904:	bfb8      	it	lt
1a003906:	18e4      	addlt	r4, r4, r3
1a003908:	f000 fe92 	bl	1a004630 <__malloc_lock>
1a00390c:	4a1f      	ldr	r2, [pc, #124]	; (1a00398c <_free_r+0x98>)
1a00390e:	6813      	ldr	r3, [r2, #0]
1a003910:	4610      	mov	r0, r2
1a003912:	b933      	cbnz	r3, 1a003922 <_free_r+0x2e>
1a003914:	6063      	str	r3, [r4, #4]
1a003916:	6014      	str	r4, [r2, #0]
1a003918:	4628      	mov	r0, r5
1a00391a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00391e:	f000 be8d 	b.w	1a00463c <__malloc_unlock>
1a003922:	42a3      	cmp	r3, r4
1a003924:	d90c      	bls.n	1a003940 <_free_r+0x4c>
1a003926:	6821      	ldr	r1, [r4, #0]
1a003928:	1862      	adds	r2, r4, r1
1a00392a:	4293      	cmp	r3, r2
1a00392c:	bf04      	itt	eq
1a00392e:	681a      	ldreq	r2, [r3, #0]
1a003930:	685b      	ldreq	r3, [r3, #4]
1a003932:	6063      	str	r3, [r4, #4]
1a003934:	bf04      	itt	eq
1a003936:	1852      	addeq	r2, r2, r1
1a003938:	6022      	streq	r2, [r4, #0]
1a00393a:	6004      	str	r4, [r0, #0]
1a00393c:	e7ec      	b.n	1a003918 <_free_r+0x24>
1a00393e:	4613      	mov	r3, r2
1a003940:	685a      	ldr	r2, [r3, #4]
1a003942:	b10a      	cbz	r2, 1a003948 <_free_r+0x54>
1a003944:	42a2      	cmp	r2, r4
1a003946:	d9fa      	bls.n	1a00393e <_free_r+0x4a>
1a003948:	6819      	ldr	r1, [r3, #0]
1a00394a:	1858      	adds	r0, r3, r1
1a00394c:	42a0      	cmp	r0, r4
1a00394e:	d10b      	bne.n	1a003968 <_free_r+0x74>
1a003950:	6820      	ldr	r0, [r4, #0]
1a003952:	4401      	add	r1, r0
1a003954:	1858      	adds	r0, r3, r1
1a003956:	4282      	cmp	r2, r0
1a003958:	6019      	str	r1, [r3, #0]
1a00395a:	d1dd      	bne.n	1a003918 <_free_r+0x24>
1a00395c:	6810      	ldr	r0, [r2, #0]
1a00395e:	6852      	ldr	r2, [r2, #4]
1a003960:	605a      	str	r2, [r3, #4]
1a003962:	4401      	add	r1, r0
1a003964:	6019      	str	r1, [r3, #0]
1a003966:	e7d7      	b.n	1a003918 <_free_r+0x24>
1a003968:	d902      	bls.n	1a003970 <_free_r+0x7c>
1a00396a:	230c      	movs	r3, #12
1a00396c:	602b      	str	r3, [r5, #0]
1a00396e:	e7d3      	b.n	1a003918 <_free_r+0x24>
1a003970:	6820      	ldr	r0, [r4, #0]
1a003972:	1821      	adds	r1, r4, r0
1a003974:	428a      	cmp	r2, r1
1a003976:	bf04      	itt	eq
1a003978:	6811      	ldreq	r1, [r2, #0]
1a00397a:	6852      	ldreq	r2, [r2, #4]
1a00397c:	6062      	str	r2, [r4, #4]
1a00397e:	bf04      	itt	eq
1a003980:	1809      	addeq	r1, r1, r0
1a003982:	6021      	streq	r1, [r4, #0]
1a003984:	605c      	str	r4, [r3, #4]
1a003986:	e7c7      	b.n	1a003918 <_free_r+0x24>
1a003988:	bd38      	pop	{r3, r4, r5, pc}
1a00398a:	bf00      	nop
1a00398c:	10000188 	.word	0x10000188

1a003990 <_malloc_r>:
1a003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003992:	1ccd      	adds	r5, r1, #3
1a003994:	f025 0503 	bic.w	r5, r5, #3
1a003998:	3508      	adds	r5, #8
1a00399a:	2d0c      	cmp	r5, #12
1a00399c:	bf38      	it	cc
1a00399e:	250c      	movcc	r5, #12
1a0039a0:	2d00      	cmp	r5, #0
1a0039a2:	4606      	mov	r6, r0
1a0039a4:	db01      	blt.n	1a0039aa <_malloc_r+0x1a>
1a0039a6:	42a9      	cmp	r1, r5
1a0039a8:	d903      	bls.n	1a0039b2 <_malloc_r+0x22>
1a0039aa:	230c      	movs	r3, #12
1a0039ac:	6033      	str	r3, [r6, #0]
1a0039ae:	2000      	movs	r0, #0
1a0039b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0039b2:	f000 fe3d 	bl	1a004630 <__malloc_lock>
1a0039b6:	4921      	ldr	r1, [pc, #132]	; (1a003a3c <_malloc_r+0xac>)
1a0039b8:	680a      	ldr	r2, [r1, #0]
1a0039ba:	4614      	mov	r4, r2
1a0039bc:	b99c      	cbnz	r4, 1a0039e6 <_malloc_r+0x56>
1a0039be:	4f20      	ldr	r7, [pc, #128]	; (1a003a40 <_malloc_r+0xb0>)
1a0039c0:	683b      	ldr	r3, [r7, #0]
1a0039c2:	b923      	cbnz	r3, 1a0039ce <_malloc_r+0x3e>
1a0039c4:	4621      	mov	r1, r4
1a0039c6:	4630      	mov	r0, r6
1a0039c8:	f7fd f828 	bl	1a000a1c <_sbrk_r>
1a0039cc:	6038      	str	r0, [r7, #0]
1a0039ce:	4629      	mov	r1, r5
1a0039d0:	4630      	mov	r0, r6
1a0039d2:	f7fd f823 	bl	1a000a1c <_sbrk_r>
1a0039d6:	1c43      	adds	r3, r0, #1
1a0039d8:	d123      	bne.n	1a003a22 <_malloc_r+0x92>
1a0039da:	230c      	movs	r3, #12
1a0039dc:	6033      	str	r3, [r6, #0]
1a0039de:	4630      	mov	r0, r6
1a0039e0:	f000 fe2c 	bl	1a00463c <__malloc_unlock>
1a0039e4:	e7e3      	b.n	1a0039ae <_malloc_r+0x1e>
1a0039e6:	6823      	ldr	r3, [r4, #0]
1a0039e8:	1b5b      	subs	r3, r3, r5
1a0039ea:	d417      	bmi.n	1a003a1c <_malloc_r+0x8c>
1a0039ec:	2b0b      	cmp	r3, #11
1a0039ee:	d903      	bls.n	1a0039f8 <_malloc_r+0x68>
1a0039f0:	6023      	str	r3, [r4, #0]
1a0039f2:	441c      	add	r4, r3
1a0039f4:	6025      	str	r5, [r4, #0]
1a0039f6:	e004      	b.n	1a003a02 <_malloc_r+0x72>
1a0039f8:	6863      	ldr	r3, [r4, #4]
1a0039fa:	42a2      	cmp	r2, r4
1a0039fc:	bf0c      	ite	eq
1a0039fe:	600b      	streq	r3, [r1, #0]
1a003a00:	6053      	strne	r3, [r2, #4]
1a003a02:	4630      	mov	r0, r6
1a003a04:	f000 fe1a 	bl	1a00463c <__malloc_unlock>
1a003a08:	f104 000b 	add.w	r0, r4, #11
1a003a0c:	1d23      	adds	r3, r4, #4
1a003a0e:	f020 0007 	bic.w	r0, r0, #7
1a003a12:	1ac2      	subs	r2, r0, r3
1a003a14:	d0cc      	beq.n	1a0039b0 <_malloc_r+0x20>
1a003a16:	1a1b      	subs	r3, r3, r0
1a003a18:	50a3      	str	r3, [r4, r2]
1a003a1a:	e7c9      	b.n	1a0039b0 <_malloc_r+0x20>
1a003a1c:	4622      	mov	r2, r4
1a003a1e:	6864      	ldr	r4, [r4, #4]
1a003a20:	e7cc      	b.n	1a0039bc <_malloc_r+0x2c>
1a003a22:	1cc4      	adds	r4, r0, #3
1a003a24:	f024 0403 	bic.w	r4, r4, #3
1a003a28:	42a0      	cmp	r0, r4
1a003a2a:	d0e3      	beq.n	1a0039f4 <_malloc_r+0x64>
1a003a2c:	1a21      	subs	r1, r4, r0
1a003a2e:	4630      	mov	r0, r6
1a003a30:	f7fc fff4 	bl	1a000a1c <_sbrk_r>
1a003a34:	3001      	adds	r0, #1
1a003a36:	d1dd      	bne.n	1a0039f4 <_malloc_r+0x64>
1a003a38:	e7cf      	b.n	1a0039da <_malloc_r+0x4a>
1a003a3a:	bf00      	nop
1a003a3c:	10000188 	.word	0x10000188
1a003a40:	1000018c 	.word	0x1000018c

1a003a44 <__sfputc_r>:
1a003a44:	6893      	ldr	r3, [r2, #8]
1a003a46:	3b01      	subs	r3, #1
1a003a48:	2b00      	cmp	r3, #0
1a003a4a:	b410      	push	{r4}
1a003a4c:	6093      	str	r3, [r2, #8]
1a003a4e:	da08      	bge.n	1a003a62 <__sfputc_r+0x1e>
1a003a50:	6994      	ldr	r4, [r2, #24]
1a003a52:	42a3      	cmp	r3, r4
1a003a54:	db01      	blt.n	1a003a5a <__sfputc_r+0x16>
1a003a56:	290a      	cmp	r1, #10
1a003a58:	d103      	bne.n	1a003a62 <__sfputc_r+0x1e>
1a003a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003a5e:	f000 bc35 	b.w	1a0042cc <__swbuf_r>
1a003a62:	6813      	ldr	r3, [r2, #0]
1a003a64:	1c58      	adds	r0, r3, #1
1a003a66:	6010      	str	r0, [r2, #0]
1a003a68:	7019      	strb	r1, [r3, #0]
1a003a6a:	4608      	mov	r0, r1
1a003a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003a70:	4770      	bx	lr

1a003a72 <__sfputs_r>:
1a003a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003a74:	4606      	mov	r6, r0
1a003a76:	460f      	mov	r7, r1
1a003a78:	4614      	mov	r4, r2
1a003a7a:	18d5      	adds	r5, r2, r3
1a003a7c:	42ac      	cmp	r4, r5
1a003a7e:	d101      	bne.n	1a003a84 <__sfputs_r+0x12>
1a003a80:	2000      	movs	r0, #0
1a003a82:	e007      	b.n	1a003a94 <__sfputs_r+0x22>
1a003a84:	463a      	mov	r2, r7
1a003a86:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003a8a:	4630      	mov	r0, r6
1a003a8c:	f7ff ffda 	bl	1a003a44 <__sfputc_r>
1a003a90:	1c43      	adds	r3, r0, #1
1a003a92:	d1f3      	bne.n	1a003a7c <__sfputs_r+0xa>
1a003a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003a96:	Address 0x1a003a96 is out of bounds.


1a003a98 <_vfiprintf_r>:
1a003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003a9c:	460d      	mov	r5, r1
1a003a9e:	b09d      	sub	sp, #116	; 0x74
1a003aa0:	4614      	mov	r4, r2
1a003aa2:	461e      	mov	r6, r3
1a003aa4:	4607      	mov	r7, r0
1a003aa6:	b118      	cbz	r0, 1a003ab0 <_vfiprintf_r+0x18>
1a003aa8:	6983      	ldr	r3, [r0, #24]
1a003aaa:	b90b      	cbnz	r3, 1a003ab0 <_vfiprintf_r+0x18>
1a003aac:	f7ff fd54 	bl	1a003558 <__sinit>
1a003ab0:	4b85      	ldr	r3, [pc, #532]	; (1a003cc8 <_vfiprintf_r+0x230>)
1a003ab2:	429d      	cmp	r5, r3
1a003ab4:	d11b      	bne.n	1a003aee <_vfiprintf_r+0x56>
1a003ab6:	687d      	ldr	r5, [r7, #4]
1a003ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003aba:	07d9      	lsls	r1, r3, #31
1a003abc:	d405      	bmi.n	1a003aca <_vfiprintf_r+0x32>
1a003abe:	89ab      	ldrh	r3, [r5, #12]
1a003ac0:	059a      	lsls	r2, r3, #22
1a003ac2:	d402      	bmi.n	1a003aca <_vfiprintf_r+0x32>
1a003ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003ac6:	f7ff ff0b 	bl	1a0038e0 <__retarget_lock_acquire_recursive>
1a003aca:	89ab      	ldrh	r3, [r5, #12]
1a003acc:	071b      	lsls	r3, r3, #28
1a003ace:	d501      	bpl.n	1a003ad4 <_vfiprintf_r+0x3c>
1a003ad0:	692b      	ldr	r3, [r5, #16]
1a003ad2:	b9eb      	cbnz	r3, 1a003b10 <_vfiprintf_r+0x78>
1a003ad4:	4629      	mov	r1, r5
1a003ad6:	4638      	mov	r0, r7
1a003ad8:	f000 fc4a 	bl	1a004370 <__swsetup_r>
1a003adc:	b1c0      	cbz	r0, 1a003b10 <_vfiprintf_r+0x78>
1a003ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003ae0:	07d8      	lsls	r0, r3, #31
1a003ae2:	d50e      	bpl.n	1a003b02 <_vfiprintf_r+0x6a>
1a003ae4:	f04f 30ff 	mov.w	r0, #4294967295
1a003ae8:	b01d      	add	sp, #116	; 0x74
1a003aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003aee:	4b77      	ldr	r3, [pc, #476]	; (1a003ccc <_vfiprintf_r+0x234>)
1a003af0:	429d      	cmp	r5, r3
1a003af2:	d101      	bne.n	1a003af8 <_vfiprintf_r+0x60>
1a003af4:	68bd      	ldr	r5, [r7, #8]
1a003af6:	e7df      	b.n	1a003ab8 <_vfiprintf_r+0x20>
1a003af8:	4b75      	ldr	r3, [pc, #468]	; (1a003cd0 <_vfiprintf_r+0x238>)
1a003afa:	429d      	cmp	r5, r3
1a003afc:	bf08      	it	eq
1a003afe:	68fd      	ldreq	r5, [r7, #12]
1a003b00:	e7da      	b.n	1a003ab8 <_vfiprintf_r+0x20>
1a003b02:	89ab      	ldrh	r3, [r5, #12]
1a003b04:	0599      	lsls	r1, r3, #22
1a003b06:	d4ed      	bmi.n	1a003ae4 <_vfiprintf_r+0x4c>
1a003b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003b0a:	f7ff feea 	bl	1a0038e2 <__retarget_lock_release_recursive>
1a003b0e:	e7e9      	b.n	1a003ae4 <_vfiprintf_r+0x4c>
1a003b10:	2300      	movs	r3, #0
1a003b12:	9309      	str	r3, [sp, #36]	; 0x24
1a003b14:	2320      	movs	r3, #32
1a003b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a003b1a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a003cd4 <_vfiprintf_r+0x23c>
1a003b1e:	9603      	str	r6, [sp, #12]
1a003b20:	2330      	movs	r3, #48	; 0x30
1a003b22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a003b26:	f04f 0a01 	mov.w	sl, #1
1a003b2a:	4623      	mov	r3, r4
1a003b2c:	461e      	mov	r6, r3
1a003b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
1a003b32:	b10a      	cbz	r2, 1a003b38 <_vfiprintf_r+0xa0>
1a003b34:	2a25      	cmp	r2, #37	; 0x25
1a003b36:	d1f9      	bne.n	1a003b2c <_vfiprintf_r+0x94>
1a003b38:	ebb6 0b04 	subs.w	fp, r6, r4
1a003b3c:	d00b      	beq.n	1a003b56 <_vfiprintf_r+0xbe>
1a003b3e:	465b      	mov	r3, fp
1a003b40:	4622      	mov	r2, r4
1a003b42:	4629      	mov	r1, r5
1a003b44:	4638      	mov	r0, r7
1a003b46:	f7ff ff94 	bl	1a003a72 <__sfputs_r>
1a003b4a:	3001      	adds	r0, #1
1a003b4c:	f000 80a3 	beq.w	1a003c96 <_vfiprintf_r+0x1fe>
1a003b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003b52:	445b      	add	r3, fp
1a003b54:	9309      	str	r3, [sp, #36]	; 0x24
1a003b56:	7833      	ldrb	r3, [r6, #0]
1a003b58:	2b00      	cmp	r3, #0
1a003b5a:	f000 809c 	beq.w	1a003c96 <_vfiprintf_r+0x1fe>
1a003b5e:	2300      	movs	r3, #0
1a003b60:	f04f 32ff 	mov.w	r2, #4294967295
1a003b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a003b68:	3601      	adds	r6, #1
1a003b6a:	9304      	str	r3, [sp, #16]
1a003b6c:	9307      	str	r3, [sp, #28]
1a003b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a003b72:	931a      	str	r3, [sp, #104]	; 0x68
1a003b74:	4634      	mov	r4, r6
1a003b76:	2205      	movs	r2, #5
1a003b78:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003b7c:	4855      	ldr	r0, [pc, #340]	; (1a003cd4 <_vfiprintf_r+0x23c>)
1a003b7e:	f000 fd07 	bl	1a004590 <memchr>
1a003b82:	9b04      	ldr	r3, [sp, #16]
1a003b84:	b9c0      	cbnz	r0, 1a003bb8 <_vfiprintf_r+0x120>
1a003b86:	06da      	lsls	r2, r3, #27
1a003b88:	bf44      	itt	mi
1a003b8a:	2220      	movmi	r2, #32
1a003b8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003b90:	0718      	lsls	r0, r3, #28
1a003b92:	bf44      	itt	mi
1a003b94:	222b      	movmi	r2, #43	; 0x2b
1a003b96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003b9a:	7832      	ldrb	r2, [r6, #0]
1a003b9c:	2a2a      	cmp	r2, #42	; 0x2a
1a003b9e:	d013      	beq.n	1a003bc8 <_vfiprintf_r+0x130>
1a003ba0:	9a07      	ldr	r2, [sp, #28]
1a003ba2:	4634      	mov	r4, r6
1a003ba4:	2000      	movs	r0, #0
1a003ba6:	260a      	movs	r6, #10
1a003ba8:	4621      	mov	r1, r4
1a003baa:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003bae:	3b30      	subs	r3, #48	; 0x30
1a003bb0:	2b09      	cmp	r3, #9
1a003bb2:	d94b      	bls.n	1a003c4c <_vfiprintf_r+0x1b4>
1a003bb4:	b970      	cbnz	r0, 1a003bd4 <_vfiprintf_r+0x13c>
1a003bb6:	e014      	b.n	1a003be2 <_vfiprintf_r+0x14a>
1a003bb8:	eba0 0009 	sub.w	r0, r0, r9
1a003bbc:	fa0a f000 	lsl.w	r0, sl, r0
1a003bc0:	4318      	orrs	r0, r3
1a003bc2:	9004      	str	r0, [sp, #16]
1a003bc4:	4626      	mov	r6, r4
1a003bc6:	e7d5      	b.n	1a003b74 <_vfiprintf_r+0xdc>
1a003bc8:	9a03      	ldr	r2, [sp, #12]
1a003bca:	1d11      	adds	r1, r2, #4
1a003bcc:	6812      	ldr	r2, [r2, #0]
1a003bce:	9103      	str	r1, [sp, #12]
1a003bd0:	2a00      	cmp	r2, #0
1a003bd2:	db01      	blt.n	1a003bd8 <_vfiprintf_r+0x140>
1a003bd4:	9207      	str	r2, [sp, #28]
1a003bd6:	e004      	b.n	1a003be2 <_vfiprintf_r+0x14a>
1a003bd8:	4252      	negs	r2, r2
1a003bda:	f043 0302 	orr.w	r3, r3, #2
1a003bde:	9207      	str	r2, [sp, #28]
1a003be0:	9304      	str	r3, [sp, #16]
1a003be2:	7823      	ldrb	r3, [r4, #0]
1a003be4:	2b2e      	cmp	r3, #46	; 0x2e
1a003be6:	d10c      	bne.n	1a003c02 <_vfiprintf_r+0x16a>
1a003be8:	7863      	ldrb	r3, [r4, #1]
1a003bea:	2b2a      	cmp	r3, #42	; 0x2a
1a003bec:	d133      	bne.n	1a003c56 <_vfiprintf_r+0x1be>
1a003bee:	9b03      	ldr	r3, [sp, #12]
1a003bf0:	1d1a      	adds	r2, r3, #4
1a003bf2:	681b      	ldr	r3, [r3, #0]
1a003bf4:	9203      	str	r2, [sp, #12]
1a003bf6:	2b00      	cmp	r3, #0
1a003bf8:	bfb8      	it	lt
1a003bfa:	f04f 33ff 	movlt.w	r3, #4294967295
1a003bfe:	3402      	adds	r4, #2
1a003c00:	9305      	str	r3, [sp, #20]
1a003c02:	4e35      	ldr	r6, [pc, #212]	; (1a003cd8 <_vfiprintf_r+0x240>)
1a003c04:	7821      	ldrb	r1, [r4, #0]
1a003c06:	2203      	movs	r2, #3
1a003c08:	4630      	mov	r0, r6
1a003c0a:	f000 fcc1 	bl	1a004590 <memchr>
1a003c0e:	b138      	cbz	r0, 1a003c20 <_vfiprintf_r+0x188>
1a003c10:	2340      	movs	r3, #64	; 0x40
1a003c12:	1b80      	subs	r0, r0, r6
1a003c14:	fa03 f000 	lsl.w	r0, r3, r0
1a003c18:	9b04      	ldr	r3, [sp, #16]
1a003c1a:	4303      	orrs	r3, r0
1a003c1c:	3401      	adds	r4, #1
1a003c1e:	9304      	str	r3, [sp, #16]
1a003c20:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003c24:	482d      	ldr	r0, [pc, #180]	; (1a003cdc <_vfiprintf_r+0x244>)
1a003c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a003c2a:	2206      	movs	r2, #6
1a003c2c:	f000 fcb0 	bl	1a004590 <memchr>
1a003c30:	2800      	cmp	r0, #0
1a003c32:	d03f      	beq.n	1a003cb4 <_vfiprintf_r+0x21c>
1a003c34:	4b2a      	ldr	r3, [pc, #168]	; (1a003ce0 <_vfiprintf_r+0x248>)
1a003c36:	bb13      	cbnz	r3, 1a003c7e <_vfiprintf_r+0x1e6>
1a003c38:	9b03      	ldr	r3, [sp, #12]
1a003c3a:	3307      	adds	r3, #7
1a003c3c:	f023 0307 	bic.w	r3, r3, #7
1a003c40:	3308      	adds	r3, #8
1a003c42:	9303      	str	r3, [sp, #12]
1a003c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003c46:	4443      	add	r3, r8
1a003c48:	9309      	str	r3, [sp, #36]	; 0x24
1a003c4a:	e76e      	b.n	1a003b2a <_vfiprintf_r+0x92>
1a003c4c:	fb06 3202 	mla	r2, r6, r2, r3
1a003c50:	2001      	movs	r0, #1
1a003c52:	460c      	mov	r4, r1
1a003c54:	e7a8      	b.n	1a003ba8 <_vfiprintf_r+0x110>
1a003c56:	2300      	movs	r3, #0
1a003c58:	3401      	adds	r4, #1
1a003c5a:	9305      	str	r3, [sp, #20]
1a003c5c:	4619      	mov	r1, r3
1a003c5e:	260a      	movs	r6, #10
1a003c60:	4620      	mov	r0, r4
1a003c62:	f810 2b01 	ldrb.w	r2, [r0], #1
1a003c66:	3a30      	subs	r2, #48	; 0x30
1a003c68:	2a09      	cmp	r2, #9
1a003c6a:	d903      	bls.n	1a003c74 <_vfiprintf_r+0x1dc>
1a003c6c:	2b00      	cmp	r3, #0
1a003c6e:	d0c8      	beq.n	1a003c02 <_vfiprintf_r+0x16a>
1a003c70:	9105      	str	r1, [sp, #20]
1a003c72:	e7c6      	b.n	1a003c02 <_vfiprintf_r+0x16a>
1a003c74:	fb06 2101 	mla	r1, r6, r1, r2
1a003c78:	2301      	movs	r3, #1
1a003c7a:	4604      	mov	r4, r0
1a003c7c:	e7f0      	b.n	1a003c60 <_vfiprintf_r+0x1c8>
1a003c7e:	ab03      	add	r3, sp, #12
1a003c80:	9300      	str	r3, [sp, #0]
1a003c82:	462a      	mov	r2, r5
1a003c84:	4b17      	ldr	r3, [pc, #92]	; (1a003ce4 <_vfiprintf_r+0x24c>)
1a003c86:	a904      	add	r1, sp, #16
1a003c88:	4638      	mov	r0, r7
1a003c8a:	f3af 8000 	nop.w
1a003c8e:	f1b0 3fff 	cmp.w	r0, #4294967295
1a003c92:	4680      	mov	r8, r0
1a003c94:	d1d6      	bne.n	1a003c44 <_vfiprintf_r+0x1ac>
1a003c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003c98:	07d9      	lsls	r1, r3, #31
1a003c9a:	d405      	bmi.n	1a003ca8 <_vfiprintf_r+0x210>
1a003c9c:	89ab      	ldrh	r3, [r5, #12]
1a003c9e:	059a      	lsls	r2, r3, #22
1a003ca0:	d402      	bmi.n	1a003ca8 <_vfiprintf_r+0x210>
1a003ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003ca4:	f7ff fe1d 	bl	1a0038e2 <__retarget_lock_release_recursive>
1a003ca8:	89ab      	ldrh	r3, [r5, #12]
1a003caa:	065b      	lsls	r3, r3, #25
1a003cac:	f53f af1a 	bmi.w	1a003ae4 <_vfiprintf_r+0x4c>
1a003cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
1a003cb2:	e719      	b.n	1a003ae8 <_vfiprintf_r+0x50>
1a003cb4:	ab03      	add	r3, sp, #12
1a003cb6:	9300      	str	r3, [sp, #0]
1a003cb8:	462a      	mov	r2, r5
1a003cba:	4b0a      	ldr	r3, [pc, #40]	; (1a003ce4 <_vfiprintf_r+0x24c>)
1a003cbc:	a904      	add	r1, sp, #16
1a003cbe:	4638      	mov	r0, r7
1a003cc0:	f000 f892 	bl	1a003de8 <_printf_i>
1a003cc4:	e7e3      	b.n	1a003c8e <_vfiprintf_r+0x1f6>
1a003cc6:	bf00      	nop
1a003cc8:	1a004d0c 	.word	0x1a004d0c
1a003ccc:	1a004d2c 	.word	0x1a004d2c
1a003cd0:	1a004cec 	.word	0x1a004cec
1a003cd4:	1a004d50 	.word	0x1a004d50
1a003cd8:	1a004d56 	.word	0x1a004d56
1a003cdc:	1a004d5a 	.word	0x1a004d5a
1a003ce0:	00000000 	.word	0x00000000
1a003ce4:	1a003a73 	.word	0x1a003a73

1a003ce8 <vfiprintf>:
1a003ce8:	4613      	mov	r3, r2
1a003cea:	460a      	mov	r2, r1
1a003cec:	4601      	mov	r1, r0
1a003cee:	4802      	ldr	r0, [pc, #8]	; (1a003cf8 <vfiprintf+0x10>)
1a003cf0:	6800      	ldr	r0, [r0, #0]
1a003cf2:	f7ff bed1 	b.w	1a003a98 <_vfiprintf_r>
1a003cf6:	bf00      	nop
1a003cf8:	100000dc 	.word	0x100000dc

1a003cfc <_printf_common>:
1a003cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003d00:	4691      	mov	r9, r2
1a003d02:	461f      	mov	r7, r3
1a003d04:	688a      	ldr	r2, [r1, #8]
1a003d06:	690b      	ldr	r3, [r1, #16]
1a003d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a003d0c:	4293      	cmp	r3, r2
1a003d0e:	bfb8      	it	lt
1a003d10:	4613      	movlt	r3, r2
1a003d12:	f8c9 3000 	str.w	r3, [r9]
1a003d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a003d1a:	4606      	mov	r6, r0
1a003d1c:	460c      	mov	r4, r1
1a003d1e:	b112      	cbz	r2, 1a003d26 <_printf_common+0x2a>
1a003d20:	3301      	adds	r3, #1
1a003d22:	f8c9 3000 	str.w	r3, [r9]
1a003d26:	6823      	ldr	r3, [r4, #0]
1a003d28:	0699      	lsls	r1, r3, #26
1a003d2a:	bf42      	ittt	mi
1a003d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a003d30:	3302      	addmi	r3, #2
1a003d32:	f8c9 3000 	strmi.w	r3, [r9]
1a003d36:	6825      	ldr	r5, [r4, #0]
1a003d38:	f015 0506 	ands.w	r5, r5, #6
1a003d3c:	d107      	bne.n	1a003d4e <_printf_common+0x52>
1a003d3e:	f104 0a19 	add.w	sl, r4, #25
1a003d42:	68e3      	ldr	r3, [r4, #12]
1a003d44:	f8d9 2000 	ldr.w	r2, [r9]
1a003d48:	1a9b      	subs	r3, r3, r2
1a003d4a:	42ab      	cmp	r3, r5
1a003d4c:	dc28      	bgt.n	1a003da0 <_printf_common+0xa4>
1a003d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a003d52:	6822      	ldr	r2, [r4, #0]
1a003d54:	3300      	adds	r3, #0
1a003d56:	bf18      	it	ne
1a003d58:	2301      	movne	r3, #1
1a003d5a:	0692      	lsls	r2, r2, #26
1a003d5c:	d42d      	bmi.n	1a003dba <_printf_common+0xbe>
1a003d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a003d62:	4639      	mov	r1, r7
1a003d64:	4630      	mov	r0, r6
1a003d66:	47c0      	blx	r8
1a003d68:	3001      	adds	r0, #1
1a003d6a:	d020      	beq.n	1a003dae <_printf_common+0xb2>
1a003d6c:	6823      	ldr	r3, [r4, #0]
1a003d6e:	68e5      	ldr	r5, [r4, #12]
1a003d70:	f8d9 2000 	ldr.w	r2, [r9]
1a003d74:	f003 0306 	and.w	r3, r3, #6
1a003d78:	2b04      	cmp	r3, #4
1a003d7a:	bf08      	it	eq
1a003d7c:	1aad      	subeq	r5, r5, r2
1a003d7e:	68a3      	ldr	r3, [r4, #8]
1a003d80:	6922      	ldr	r2, [r4, #16]
1a003d82:	bf0c      	ite	eq
1a003d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a003d88:	2500      	movne	r5, #0
1a003d8a:	4293      	cmp	r3, r2
1a003d8c:	bfc4      	itt	gt
1a003d8e:	1a9b      	subgt	r3, r3, r2
1a003d90:	18ed      	addgt	r5, r5, r3
1a003d92:	f04f 0900 	mov.w	r9, #0
1a003d96:	341a      	adds	r4, #26
1a003d98:	454d      	cmp	r5, r9
1a003d9a:	d11a      	bne.n	1a003dd2 <_printf_common+0xd6>
1a003d9c:	2000      	movs	r0, #0
1a003d9e:	e008      	b.n	1a003db2 <_printf_common+0xb6>
1a003da0:	2301      	movs	r3, #1
1a003da2:	4652      	mov	r2, sl
1a003da4:	4639      	mov	r1, r7
1a003da6:	4630      	mov	r0, r6
1a003da8:	47c0      	blx	r8
1a003daa:	3001      	adds	r0, #1
1a003dac:	d103      	bne.n	1a003db6 <_printf_common+0xba>
1a003dae:	f04f 30ff 	mov.w	r0, #4294967295
1a003db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003db6:	3501      	adds	r5, #1
1a003db8:	e7c3      	b.n	1a003d42 <_printf_common+0x46>
1a003dba:	18e1      	adds	r1, r4, r3
1a003dbc:	1c5a      	adds	r2, r3, #1
1a003dbe:	2030      	movs	r0, #48	; 0x30
1a003dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a003dc4:	4422      	add	r2, r4
1a003dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a003dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a003dce:	3302      	adds	r3, #2
1a003dd0:	e7c5      	b.n	1a003d5e <_printf_common+0x62>
1a003dd2:	2301      	movs	r3, #1
1a003dd4:	4622      	mov	r2, r4
1a003dd6:	4639      	mov	r1, r7
1a003dd8:	4630      	mov	r0, r6
1a003dda:	47c0      	blx	r8
1a003ddc:	3001      	adds	r0, #1
1a003dde:	d0e6      	beq.n	1a003dae <_printf_common+0xb2>
1a003de0:	f109 0901 	add.w	r9, r9, #1
1a003de4:	e7d8      	b.n	1a003d98 <_printf_common+0x9c>
1a003de6:	Address 0x1a003de6 is out of bounds.


1a003de8 <_printf_i>:
1a003de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003dec:	4606      	mov	r6, r0
1a003dee:	460c      	mov	r4, r1
1a003df0:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a003df4:	7e09      	ldrb	r1, [r1, #24]
1a003df6:	b085      	sub	sp, #20
1a003df8:	296e      	cmp	r1, #110	; 0x6e
1a003dfa:	4698      	mov	r8, r3
1a003dfc:	4617      	mov	r7, r2
1a003dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003e00:	f000 80ba 	beq.w	1a003f78 <_printf_i+0x190>
1a003e04:	d824      	bhi.n	1a003e50 <_printf_i+0x68>
1a003e06:	2963      	cmp	r1, #99	; 0x63
1a003e08:	d039      	beq.n	1a003e7e <_printf_i+0x96>
1a003e0a:	d80a      	bhi.n	1a003e22 <_printf_i+0x3a>
1a003e0c:	2900      	cmp	r1, #0
1a003e0e:	f000 80c3 	beq.w	1a003f98 <_printf_i+0x1b0>
1a003e12:	2958      	cmp	r1, #88	; 0x58
1a003e14:	f000 8091 	beq.w	1a003f3a <_printf_i+0x152>
1a003e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a003e20:	e035      	b.n	1a003e8e <_printf_i+0xa6>
1a003e22:	2964      	cmp	r1, #100	; 0x64
1a003e24:	d001      	beq.n	1a003e2a <_printf_i+0x42>
1a003e26:	2969      	cmp	r1, #105	; 0x69
1a003e28:	d1f6      	bne.n	1a003e18 <_printf_i+0x30>
1a003e2a:	6825      	ldr	r5, [r4, #0]
1a003e2c:	681a      	ldr	r2, [r3, #0]
1a003e2e:	f015 0f80 	tst.w	r5, #128	; 0x80
1a003e32:	f102 0104 	add.w	r1, r2, #4
1a003e36:	d02c      	beq.n	1a003e92 <_printf_i+0xaa>
1a003e38:	6812      	ldr	r2, [r2, #0]
1a003e3a:	6019      	str	r1, [r3, #0]
1a003e3c:	2a00      	cmp	r2, #0
1a003e3e:	da03      	bge.n	1a003e48 <_printf_i+0x60>
1a003e40:	232d      	movs	r3, #45	; 0x2d
1a003e42:	4252      	negs	r2, r2
1a003e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a003e48:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a004008 <_printf_i+0x220>
1a003e4c:	230a      	movs	r3, #10
1a003e4e:	e03f      	b.n	1a003ed0 <_printf_i+0xe8>
1a003e50:	2973      	cmp	r1, #115	; 0x73
1a003e52:	f000 80a5 	beq.w	1a003fa0 <_printf_i+0x1b8>
1a003e56:	d808      	bhi.n	1a003e6a <_printf_i+0x82>
1a003e58:	296f      	cmp	r1, #111	; 0x6f
1a003e5a:	d021      	beq.n	1a003ea0 <_printf_i+0xb8>
1a003e5c:	2970      	cmp	r1, #112	; 0x70
1a003e5e:	d1db      	bne.n	1a003e18 <_printf_i+0x30>
1a003e60:	6822      	ldr	r2, [r4, #0]
1a003e62:	f042 0220 	orr.w	r2, r2, #32
1a003e66:	6022      	str	r2, [r4, #0]
1a003e68:	e003      	b.n	1a003e72 <_printf_i+0x8a>
1a003e6a:	2975      	cmp	r1, #117	; 0x75
1a003e6c:	d018      	beq.n	1a003ea0 <_printf_i+0xb8>
1a003e6e:	2978      	cmp	r1, #120	; 0x78
1a003e70:	d1d2      	bne.n	1a003e18 <_printf_i+0x30>
1a003e72:	2278      	movs	r2, #120	; 0x78
1a003e74:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a003e78:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a00400c <_printf_i+0x224>
1a003e7c:	e061      	b.n	1a003f42 <_printf_i+0x15a>
1a003e7e:	681a      	ldr	r2, [r3, #0]
1a003e80:	1d11      	adds	r1, r2, #4
1a003e82:	6019      	str	r1, [r3, #0]
1a003e84:	6813      	ldr	r3, [r2, #0]
1a003e86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a003e8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003e8e:	2301      	movs	r3, #1
1a003e90:	e093      	b.n	1a003fba <_printf_i+0x1d2>
1a003e92:	6812      	ldr	r2, [r2, #0]
1a003e94:	6019      	str	r1, [r3, #0]
1a003e96:	f015 0f40 	tst.w	r5, #64	; 0x40
1a003e9a:	bf18      	it	ne
1a003e9c:	b212      	sxthne	r2, r2
1a003e9e:	e7cd      	b.n	1a003e3c <_printf_i+0x54>
1a003ea0:	f8d4 c000 	ldr.w	ip, [r4]
1a003ea4:	681a      	ldr	r2, [r3, #0]
1a003ea6:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a003eaa:	f102 0504 	add.w	r5, r2, #4
1a003eae:	601d      	str	r5, [r3, #0]
1a003eb0:	d001      	beq.n	1a003eb6 <_printf_i+0xce>
1a003eb2:	6812      	ldr	r2, [r2, #0]
1a003eb4:	e003      	b.n	1a003ebe <_printf_i+0xd6>
1a003eb6:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a003eba:	d0fa      	beq.n	1a003eb2 <_printf_i+0xca>
1a003ebc:	8812      	ldrh	r2, [r2, #0]
1a003ebe:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a004008 <_printf_i+0x220>
1a003ec2:	296f      	cmp	r1, #111	; 0x6f
1a003ec4:	bf0c      	ite	eq
1a003ec6:	2308      	moveq	r3, #8
1a003ec8:	230a      	movne	r3, #10
1a003eca:	2100      	movs	r1, #0
1a003ecc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a003ed0:	6865      	ldr	r5, [r4, #4]
1a003ed2:	60a5      	str	r5, [r4, #8]
1a003ed4:	2d00      	cmp	r5, #0
1a003ed6:	bfa2      	ittt	ge
1a003ed8:	6821      	ldrge	r1, [r4, #0]
1a003eda:	f021 0104 	bicge.w	r1, r1, #4
1a003ede:	6021      	strge	r1, [r4, #0]
1a003ee0:	b90a      	cbnz	r2, 1a003ee6 <_printf_i+0xfe>
1a003ee2:	2d00      	cmp	r5, #0
1a003ee4:	d046      	beq.n	1a003f74 <_printf_i+0x18c>
1a003ee6:	4605      	mov	r5, r0
1a003ee8:	fbb2 f1f3 	udiv	r1, r2, r3
1a003eec:	fb03 2e11 	mls	lr, r3, r1, r2
1a003ef0:	4293      	cmp	r3, r2
1a003ef2:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a003ef6:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a003efa:	d939      	bls.n	1a003f70 <_printf_i+0x188>
1a003efc:	2b08      	cmp	r3, #8
1a003efe:	d10b      	bne.n	1a003f18 <_printf_i+0x130>
1a003f00:	6823      	ldr	r3, [r4, #0]
1a003f02:	07da      	lsls	r2, r3, #31
1a003f04:	d508      	bpl.n	1a003f18 <_printf_i+0x130>
1a003f06:	6923      	ldr	r3, [r4, #16]
1a003f08:	6862      	ldr	r2, [r4, #4]
1a003f0a:	429a      	cmp	r2, r3
1a003f0c:	bfde      	ittt	le
1a003f0e:	2330      	movle	r3, #48	; 0x30
1a003f10:	f805 3c01 	strble.w	r3, [r5, #-1]
1a003f14:	f105 35ff 	addle.w	r5, r5, #4294967295
1a003f18:	1b40      	subs	r0, r0, r5
1a003f1a:	6120      	str	r0, [r4, #16]
1a003f1c:	f8cd 8000 	str.w	r8, [sp]
1a003f20:	463b      	mov	r3, r7
1a003f22:	aa03      	add	r2, sp, #12
1a003f24:	4621      	mov	r1, r4
1a003f26:	4630      	mov	r0, r6
1a003f28:	f7ff fee8 	bl	1a003cfc <_printf_common>
1a003f2c:	3001      	adds	r0, #1
1a003f2e:	d149      	bne.n	1a003fc4 <_printf_i+0x1dc>
1a003f30:	f04f 30ff 	mov.w	r0, #4294967295
1a003f34:	b005      	add	sp, #20
1a003f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a003f3a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a004008 <_printf_i+0x220>
1a003f3e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a003f42:	681d      	ldr	r5, [r3, #0]
1a003f44:	6821      	ldr	r1, [r4, #0]
1a003f46:	f855 2b04 	ldr.w	r2, [r5], #4
1a003f4a:	601d      	str	r5, [r3, #0]
1a003f4c:	060d      	lsls	r5, r1, #24
1a003f4e:	d50b      	bpl.n	1a003f68 <_printf_i+0x180>
1a003f50:	07cd      	lsls	r5, r1, #31
1a003f52:	bf44      	itt	mi
1a003f54:	f041 0120 	orrmi.w	r1, r1, #32
1a003f58:	6021      	strmi	r1, [r4, #0]
1a003f5a:	b91a      	cbnz	r2, 1a003f64 <_printf_i+0x17c>
1a003f5c:	6823      	ldr	r3, [r4, #0]
1a003f5e:	f023 0320 	bic.w	r3, r3, #32
1a003f62:	6023      	str	r3, [r4, #0]
1a003f64:	2310      	movs	r3, #16
1a003f66:	e7b0      	b.n	1a003eca <_printf_i+0xe2>
1a003f68:	064b      	lsls	r3, r1, #25
1a003f6a:	bf48      	it	mi
1a003f6c:	b292      	uxthmi	r2, r2
1a003f6e:	e7ef      	b.n	1a003f50 <_printf_i+0x168>
1a003f70:	460a      	mov	r2, r1
1a003f72:	e7b9      	b.n	1a003ee8 <_printf_i+0x100>
1a003f74:	4605      	mov	r5, r0
1a003f76:	e7c1      	b.n	1a003efc <_printf_i+0x114>
1a003f78:	681a      	ldr	r2, [r3, #0]
1a003f7a:	f8d4 c000 	ldr.w	ip, [r4]
1a003f7e:	6961      	ldr	r1, [r4, #20]
1a003f80:	1d15      	adds	r5, r2, #4
1a003f82:	601d      	str	r5, [r3, #0]
1a003f84:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a003f88:	6813      	ldr	r3, [r2, #0]
1a003f8a:	d001      	beq.n	1a003f90 <_printf_i+0x1a8>
1a003f8c:	6019      	str	r1, [r3, #0]
1a003f8e:	e003      	b.n	1a003f98 <_printf_i+0x1b0>
1a003f90:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a003f94:	d0fa      	beq.n	1a003f8c <_printf_i+0x1a4>
1a003f96:	8019      	strh	r1, [r3, #0]
1a003f98:	2300      	movs	r3, #0
1a003f9a:	6123      	str	r3, [r4, #16]
1a003f9c:	4605      	mov	r5, r0
1a003f9e:	e7bd      	b.n	1a003f1c <_printf_i+0x134>
1a003fa0:	681a      	ldr	r2, [r3, #0]
1a003fa2:	1d11      	adds	r1, r2, #4
1a003fa4:	6019      	str	r1, [r3, #0]
1a003fa6:	6815      	ldr	r5, [r2, #0]
1a003fa8:	6862      	ldr	r2, [r4, #4]
1a003faa:	2100      	movs	r1, #0
1a003fac:	4628      	mov	r0, r5
1a003fae:	f000 faef 	bl	1a004590 <memchr>
1a003fb2:	b108      	cbz	r0, 1a003fb8 <_printf_i+0x1d0>
1a003fb4:	1b40      	subs	r0, r0, r5
1a003fb6:	6060      	str	r0, [r4, #4]
1a003fb8:	6863      	ldr	r3, [r4, #4]
1a003fba:	6123      	str	r3, [r4, #16]
1a003fbc:	2300      	movs	r3, #0
1a003fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a003fc2:	e7ab      	b.n	1a003f1c <_printf_i+0x134>
1a003fc4:	6923      	ldr	r3, [r4, #16]
1a003fc6:	462a      	mov	r2, r5
1a003fc8:	4639      	mov	r1, r7
1a003fca:	4630      	mov	r0, r6
1a003fcc:	47c0      	blx	r8
1a003fce:	3001      	adds	r0, #1
1a003fd0:	d0ae      	beq.n	1a003f30 <_printf_i+0x148>
1a003fd2:	6823      	ldr	r3, [r4, #0]
1a003fd4:	079b      	lsls	r3, r3, #30
1a003fd6:	d413      	bmi.n	1a004000 <_printf_i+0x218>
1a003fd8:	68e0      	ldr	r0, [r4, #12]
1a003fda:	9b03      	ldr	r3, [sp, #12]
1a003fdc:	4298      	cmp	r0, r3
1a003fde:	bfb8      	it	lt
1a003fe0:	4618      	movlt	r0, r3
1a003fe2:	e7a7      	b.n	1a003f34 <_printf_i+0x14c>
1a003fe4:	2301      	movs	r3, #1
1a003fe6:	464a      	mov	r2, r9
1a003fe8:	4639      	mov	r1, r7
1a003fea:	4630      	mov	r0, r6
1a003fec:	47c0      	blx	r8
1a003fee:	3001      	adds	r0, #1
1a003ff0:	d09e      	beq.n	1a003f30 <_printf_i+0x148>
1a003ff2:	3501      	adds	r5, #1
1a003ff4:	68e3      	ldr	r3, [r4, #12]
1a003ff6:	9a03      	ldr	r2, [sp, #12]
1a003ff8:	1a9b      	subs	r3, r3, r2
1a003ffa:	42ab      	cmp	r3, r5
1a003ffc:	dcf2      	bgt.n	1a003fe4 <_printf_i+0x1fc>
1a003ffe:	e7eb      	b.n	1a003fd8 <_printf_i+0x1f0>
1a004000:	2500      	movs	r5, #0
1a004002:	f104 0919 	add.w	r9, r4, #25
1a004006:	e7f5      	b.n	1a003ff4 <_printf_i+0x20c>
1a004008:	1a004d61 	.word	0x1a004d61
1a00400c:	1a004d72 	.word	0x1a004d72

1a004010 <iprintf>:
1a004010:	b40f      	push	{r0, r1, r2, r3}
1a004012:	4b0a      	ldr	r3, [pc, #40]	; (1a00403c <iprintf+0x2c>)
1a004014:	b513      	push	{r0, r1, r4, lr}
1a004016:	681c      	ldr	r4, [r3, #0]
1a004018:	b124      	cbz	r4, 1a004024 <iprintf+0x14>
1a00401a:	69a3      	ldr	r3, [r4, #24]
1a00401c:	b913      	cbnz	r3, 1a004024 <iprintf+0x14>
1a00401e:	4620      	mov	r0, r4
1a004020:	f7ff fa9a 	bl	1a003558 <__sinit>
1a004024:	ab05      	add	r3, sp, #20
1a004026:	9a04      	ldr	r2, [sp, #16]
1a004028:	68a1      	ldr	r1, [r4, #8]
1a00402a:	9301      	str	r3, [sp, #4]
1a00402c:	4620      	mov	r0, r4
1a00402e:	f7ff fd33 	bl	1a003a98 <_vfiprintf_r>
1a004032:	b002      	add	sp, #8
1a004034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004038:	b004      	add	sp, #16
1a00403a:	4770      	bx	lr
1a00403c:	100000dc 	.word	0x100000dc

1a004040 <_puts_r>:
1a004040:	b570      	push	{r4, r5, r6, lr}
1a004042:	460e      	mov	r6, r1
1a004044:	4605      	mov	r5, r0
1a004046:	b118      	cbz	r0, 1a004050 <_puts_r+0x10>
1a004048:	6983      	ldr	r3, [r0, #24]
1a00404a:	b90b      	cbnz	r3, 1a004050 <_puts_r+0x10>
1a00404c:	f7ff fa84 	bl	1a003558 <__sinit>
1a004050:	69ab      	ldr	r3, [r5, #24]
1a004052:	68ac      	ldr	r4, [r5, #8]
1a004054:	b913      	cbnz	r3, 1a00405c <_puts_r+0x1c>
1a004056:	4628      	mov	r0, r5
1a004058:	f7ff fa7e 	bl	1a003558 <__sinit>
1a00405c:	4b2c      	ldr	r3, [pc, #176]	; (1a004110 <_puts_r+0xd0>)
1a00405e:	429c      	cmp	r4, r3
1a004060:	d120      	bne.n	1a0040a4 <_puts_r+0x64>
1a004062:	686c      	ldr	r4, [r5, #4]
1a004064:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004066:	07db      	lsls	r3, r3, #31
1a004068:	d405      	bmi.n	1a004076 <_puts_r+0x36>
1a00406a:	89a3      	ldrh	r3, [r4, #12]
1a00406c:	0598      	lsls	r0, r3, #22
1a00406e:	d402      	bmi.n	1a004076 <_puts_r+0x36>
1a004070:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004072:	f7ff fc35 	bl	1a0038e0 <__retarget_lock_acquire_recursive>
1a004076:	89a3      	ldrh	r3, [r4, #12]
1a004078:	0719      	lsls	r1, r3, #28
1a00407a:	d51d      	bpl.n	1a0040b8 <_puts_r+0x78>
1a00407c:	6923      	ldr	r3, [r4, #16]
1a00407e:	b1db      	cbz	r3, 1a0040b8 <_puts_r+0x78>
1a004080:	3e01      	subs	r6, #1
1a004082:	68a3      	ldr	r3, [r4, #8]
1a004084:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a004088:	3b01      	subs	r3, #1
1a00408a:	60a3      	str	r3, [r4, #8]
1a00408c:	bb39      	cbnz	r1, 1a0040de <_puts_r+0x9e>
1a00408e:	2b00      	cmp	r3, #0
1a004090:	da38      	bge.n	1a004104 <_puts_r+0xc4>
1a004092:	4622      	mov	r2, r4
1a004094:	210a      	movs	r1, #10
1a004096:	4628      	mov	r0, r5
1a004098:	f000 f918 	bl	1a0042cc <__swbuf_r>
1a00409c:	3001      	adds	r0, #1
1a00409e:	d011      	beq.n	1a0040c4 <_puts_r+0x84>
1a0040a0:	250a      	movs	r5, #10
1a0040a2:	e011      	b.n	1a0040c8 <_puts_r+0x88>
1a0040a4:	4b1b      	ldr	r3, [pc, #108]	; (1a004114 <_puts_r+0xd4>)
1a0040a6:	429c      	cmp	r4, r3
1a0040a8:	d101      	bne.n	1a0040ae <_puts_r+0x6e>
1a0040aa:	68ac      	ldr	r4, [r5, #8]
1a0040ac:	e7da      	b.n	1a004064 <_puts_r+0x24>
1a0040ae:	4b1a      	ldr	r3, [pc, #104]	; (1a004118 <_puts_r+0xd8>)
1a0040b0:	429c      	cmp	r4, r3
1a0040b2:	bf08      	it	eq
1a0040b4:	68ec      	ldreq	r4, [r5, #12]
1a0040b6:	e7d5      	b.n	1a004064 <_puts_r+0x24>
1a0040b8:	4621      	mov	r1, r4
1a0040ba:	4628      	mov	r0, r5
1a0040bc:	f000 f958 	bl	1a004370 <__swsetup_r>
1a0040c0:	2800      	cmp	r0, #0
1a0040c2:	d0dd      	beq.n	1a004080 <_puts_r+0x40>
1a0040c4:	f04f 35ff 	mov.w	r5, #4294967295
1a0040c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0040ca:	07da      	lsls	r2, r3, #31
1a0040cc:	d405      	bmi.n	1a0040da <_puts_r+0x9a>
1a0040ce:	89a3      	ldrh	r3, [r4, #12]
1a0040d0:	059b      	lsls	r3, r3, #22
1a0040d2:	d402      	bmi.n	1a0040da <_puts_r+0x9a>
1a0040d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0040d6:	f7ff fc04 	bl	1a0038e2 <__retarget_lock_release_recursive>
1a0040da:	4628      	mov	r0, r5
1a0040dc:	bd70      	pop	{r4, r5, r6, pc}
1a0040de:	2b00      	cmp	r3, #0
1a0040e0:	da04      	bge.n	1a0040ec <_puts_r+0xac>
1a0040e2:	69a2      	ldr	r2, [r4, #24]
1a0040e4:	429a      	cmp	r2, r3
1a0040e6:	dc06      	bgt.n	1a0040f6 <_puts_r+0xb6>
1a0040e8:	290a      	cmp	r1, #10
1a0040ea:	d004      	beq.n	1a0040f6 <_puts_r+0xb6>
1a0040ec:	6823      	ldr	r3, [r4, #0]
1a0040ee:	1c5a      	adds	r2, r3, #1
1a0040f0:	6022      	str	r2, [r4, #0]
1a0040f2:	7019      	strb	r1, [r3, #0]
1a0040f4:	e7c5      	b.n	1a004082 <_puts_r+0x42>
1a0040f6:	4622      	mov	r2, r4
1a0040f8:	4628      	mov	r0, r5
1a0040fa:	f000 f8e7 	bl	1a0042cc <__swbuf_r>
1a0040fe:	3001      	adds	r0, #1
1a004100:	d1bf      	bne.n	1a004082 <_puts_r+0x42>
1a004102:	e7df      	b.n	1a0040c4 <_puts_r+0x84>
1a004104:	6823      	ldr	r3, [r4, #0]
1a004106:	250a      	movs	r5, #10
1a004108:	1c5a      	adds	r2, r3, #1
1a00410a:	6022      	str	r2, [r4, #0]
1a00410c:	701d      	strb	r5, [r3, #0]
1a00410e:	e7db      	b.n	1a0040c8 <_puts_r+0x88>
1a004110:	1a004d0c 	.word	0x1a004d0c
1a004114:	1a004d2c 	.word	0x1a004d2c
1a004118:	1a004cec 	.word	0x1a004cec

1a00411c <puts>:
1a00411c:	4b02      	ldr	r3, [pc, #8]	; (1a004128 <puts+0xc>)
1a00411e:	4601      	mov	r1, r0
1a004120:	6818      	ldr	r0, [r3, #0]
1a004122:	f7ff bf8d 	b.w	1a004040 <_puts_r>
1a004126:	bf00      	nop
1a004128:	100000dc 	.word	0x100000dc

1a00412c <__sread>:
1a00412c:	b510      	push	{r4, lr}
1a00412e:	460c      	mov	r4, r1
1a004130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004134:	f7fc fc36 	bl	1a0009a4 <_read_r>
1a004138:	2800      	cmp	r0, #0
1a00413a:	bfab      	itete	ge
1a00413c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00413e:	89a3      	ldrhlt	r3, [r4, #12]
1a004140:	181b      	addge	r3, r3, r0
1a004142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004146:	bfac      	ite	ge
1a004148:	6563      	strge	r3, [r4, #84]	; 0x54
1a00414a:	81a3      	strhlt	r3, [r4, #12]
1a00414c:	bd10      	pop	{r4, pc}

1a00414e <__swrite>:
1a00414e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004152:	461f      	mov	r7, r3
1a004154:	898b      	ldrh	r3, [r1, #12]
1a004156:	05db      	lsls	r3, r3, #23
1a004158:	4605      	mov	r5, r0
1a00415a:	460c      	mov	r4, r1
1a00415c:	4616      	mov	r6, r2
1a00415e:	d505      	bpl.n	1a00416c <__swrite+0x1e>
1a004160:	2302      	movs	r3, #2
1a004162:	2200      	movs	r2, #0
1a004164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004168:	f7fc fc17 	bl	1a00099a <_lseek_r>
1a00416c:	89a3      	ldrh	r3, [r4, #12]
1a00416e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004176:	81a3      	strh	r3, [r4, #12]
1a004178:	4632      	mov	r2, r6
1a00417a:	463b      	mov	r3, r7
1a00417c:	4628      	mov	r0, r5
1a00417e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004182:	f7fc bc36 	b.w	1a0009f2 <_write_r>

1a004186 <__sseek>:
1a004186:	b510      	push	{r4, lr}
1a004188:	460c      	mov	r4, r1
1a00418a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00418e:	f7fc fc04 	bl	1a00099a <_lseek_r>
1a004192:	1c43      	adds	r3, r0, #1
1a004194:	89a3      	ldrh	r3, [r4, #12]
1a004196:	bf15      	itete	ne
1a004198:	6560      	strne	r0, [r4, #84]	; 0x54
1a00419a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00419e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0041a2:	81a3      	strheq	r3, [r4, #12]
1a0041a4:	bf18      	it	ne
1a0041a6:	81a3      	strhne	r3, [r4, #12]
1a0041a8:	bd10      	pop	{r4, pc}

1a0041aa <__sclose>:
1a0041aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0041ae:	f7fc bbe1 	b.w	1a000974 <_close_r>

1a0041b2 <strcmp>:
1a0041b2:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0041b6:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0041ba:	2a01      	cmp	r2, #1
1a0041bc:	bf28      	it	cs
1a0041be:	429a      	cmpcs	r2, r3
1a0041c0:	d0f7      	beq.n	1a0041b2 <strcmp>
1a0041c2:	1ad0      	subs	r0, r2, r3
1a0041c4:	4770      	bx	lr
1a0041c6:	Address 0x1a0041c6 is out of bounds.


1a0041c8 <_strtol_l.isra.0>:
1a0041c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0041cc:	4f39      	ldr	r7, [pc, #228]	; (1a0042b4 <_strtol_l.isra.0+0xec>)
1a0041ce:	4686      	mov	lr, r0
1a0041d0:	4608      	mov	r0, r1
1a0041d2:	4605      	mov	r5, r0
1a0041d4:	f815 4b01 	ldrb.w	r4, [r5], #1
1a0041d8:	5de6      	ldrb	r6, [r4, r7]
1a0041da:	f016 0608 	ands.w	r6, r6, #8
1a0041de:	d134      	bne.n	1a00424a <_strtol_l.isra.0+0x82>
1a0041e0:	2c2d      	cmp	r4, #45	; 0x2d
1a0041e2:	d134      	bne.n	1a00424e <_strtol_l.isra.0+0x86>
1a0041e4:	782c      	ldrb	r4, [r5, #0]
1a0041e6:	f04f 0801 	mov.w	r8, #1
1a0041ea:	1c85      	adds	r5, r0, #2
1a0041ec:	2b00      	cmp	r3, #0
1a0041ee:	d05c      	beq.n	1a0042aa <_strtol_l.isra.0+0xe2>
1a0041f0:	2b10      	cmp	r3, #16
1a0041f2:	d109      	bne.n	1a004208 <_strtol_l.isra.0+0x40>
1a0041f4:	2c30      	cmp	r4, #48	; 0x30
1a0041f6:	d107      	bne.n	1a004208 <_strtol_l.isra.0+0x40>
1a0041f8:	7828      	ldrb	r0, [r5, #0]
1a0041fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
1a0041fe:	2858      	cmp	r0, #88	; 0x58
1a004200:	d14e      	bne.n	1a0042a0 <_strtol_l.isra.0+0xd8>
1a004202:	786c      	ldrb	r4, [r5, #1]
1a004204:	2310      	movs	r3, #16
1a004206:	3502      	adds	r5, #2
1a004208:	f1b8 0f00 	cmp.w	r8, #0
1a00420c:	bf14      	ite	ne
1a00420e:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
1a004212:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
1a004216:	2700      	movs	r7, #0
1a004218:	fbbc f9f3 	udiv	r9, ip, r3
1a00421c:	4638      	mov	r0, r7
1a00421e:	fb03 ca19 	mls	sl, r3, r9, ip
1a004222:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
1a004226:	2e09      	cmp	r6, #9
1a004228:	d818      	bhi.n	1a00425c <_strtol_l.isra.0+0x94>
1a00422a:	4634      	mov	r4, r6
1a00422c:	42a3      	cmp	r3, r4
1a00422e:	dd24      	ble.n	1a00427a <_strtol_l.isra.0+0xb2>
1a004230:	1c7e      	adds	r6, r7, #1
1a004232:	d007      	beq.n	1a004244 <_strtol_l.isra.0+0x7c>
1a004234:	4581      	cmp	r9, r0
1a004236:	d31d      	bcc.n	1a004274 <_strtol_l.isra.0+0xac>
1a004238:	d101      	bne.n	1a00423e <_strtol_l.isra.0+0x76>
1a00423a:	45a2      	cmp	sl, r4
1a00423c:	db1a      	blt.n	1a004274 <_strtol_l.isra.0+0xac>
1a00423e:	fb00 4003 	mla	r0, r0, r3, r4
1a004242:	2701      	movs	r7, #1
1a004244:	f815 4b01 	ldrb.w	r4, [r5], #1
1a004248:	e7eb      	b.n	1a004222 <_strtol_l.isra.0+0x5a>
1a00424a:	4628      	mov	r0, r5
1a00424c:	e7c1      	b.n	1a0041d2 <_strtol_l.isra.0+0xa>
1a00424e:	2c2b      	cmp	r4, #43	; 0x2b
1a004250:	bf08      	it	eq
1a004252:	782c      	ldrbeq	r4, [r5, #0]
1a004254:	46b0      	mov	r8, r6
1a004256:	bf08      	it	eq
1a004258:	1c85      	addeq	r5, r0, #2
1a00425a:	e7c7      	b.n	1a0041ec <_strtol_l.isra.0+0x24>
1a00425c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
1a004260:	2e19      	cmp	r6, #25
1a004262:	d801      	bhi.n	1a004268 <_strtol_l.isra.0+0xa0>
1a004264:	3c37      	subs	r4, #55	; 0x37
1a004266:	e7e1      	b.n	1a00422c <_strtol_l.isra.0+0x64>
1a004268:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
1a00426c:	2e19      	cmp	r6, #25
1a00426e:	d804      	bhi.n	1a00427a <_strtol_l.isra.0+0xb2>
1a004270:	3c57      	subs	r4, #87	; 0x57
1a004272:	e7db      	b.n	1a00422c <_strtol_l.isra.0+0x64>
1a004274:	f04f 37ff 	mov.w	r7, #4294967295
1a004278:	e7e4      	b.n	1a004244 <_strtol_l.isra.0+0x7c>
1a00427a:	1c7b      	adds	r3, r7, #1
1a00427c:	d106      	bne.n	1a00428c <_strtol_l.isra.0+0xc4>
1a00427e:	2322      	movs	r3, #34	; 0x22
1a004280:	f8ce 3000 	str.w	r3, [lr]
1a004284:	4660      	mov	r0, ip
1a004286:	b942      	cbnz	r2, 1a00429a <_strtol_l.isra.0+0xd2>
1a004288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00428c:	f1b8 0f00 	cmp.w	r8, #0
1a004290:	d000      	beq.n	1a004294 <_strtol_l.isra.0+0xcc>
1a004292:	4240      	negs	r0, r0
1a004294:	2a00      	cmp	r2, #0
1a004296:	d0f7      	beq.n	1a004288 <_strtol_l.isra.0+0xc0>
1a004298:	b107      	cbz	r7, 1a00429c <_strtol_l.isra.0+0xd4>
1a00429a:	1e69      	subs	r1, r5, #1
1a00429c:	6011      	str	r1, [r2, #0]
1a00429e:	e7f3      	b.n	1a004288 <_strtol_l.isra.0+0xc0>
1a0042a0:	2430      	movs	r4, #48	; 0x30
1a0042a2:	2b00      	cmp	r3, #0
1a0042a4:	d1b0      	bne.n	1a004208 <_strtol_l.isra.0+0x40>
1a0042a6:	2308      	movs	r3, #8
1a0042a8:	e7ae      	b.n	1a004208 <_strtol_l.isra.0+0x40>
1a0042aa:	2c30      	cmp	r4, #48	; 0x30
1a0042ac:	d0a4      	beq.n	1a0041f8 <_strtol_l.isra.0+0x30>
1a0042ae:	230a      	movs	r3, #10
1a0042b0:	e7aa      	b.n	1a004208 <_strtol_l.isra.0+0x40>
1a0042b2:	bf00      	nop
1a0042b4:	1a004bec 	.word	0x1a004bec

1a0042b8 <strtol>:
1a0042b8:	4613      	mov	r3, r2
1a0042ba:	460a      	mov	r2, r1
1a0042bc:	4601      	mov	r1, r0
1a0042be:	4802      	ldr	r0, [pc, #8]	; (1a0042c8 <strtol+0x10>)
1a0042c0:	6800      	ldr	r0, [r0, #0]
1a0042c2:	f7ff bf81 	b.w	1a0041c8 <_strtol_l.isra.0>
1a0042c6:	bf00      	nop
1a0042c8:	100000dc 	.word	0x100000dc

1a0042cc <__swbuf_r>:
1a0042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0042ce:	460e      	mov	r6, r1
1a0042d0:	4614      	mov	r4, r2
1a0042d2:	4605      	mov	r5, r0
1a0042d4:	b118      	cbz	r0, 1a0042de <__swbuf_r+0x12>
1a0042d6:	6983      	ldr	r3, [r0, #24]
1a0042d8:	b90b      	cbnz	r3, 1a0042de <__swbuf_r+0x12>
1a0042da:	f7ff f93d 	bl	1a003558 <__sinit>
1a0042de:	4b21      	ldr	r3, [pc, #132]	; (1a004364 <__swbuf_r+0x98>)
1a0042e0:	429c      	cmp	r4, r3
1a0042e2:	d12b      	bne.n	1a00433c <__swbuf_r+0x70>
1a0042e4:	686c      	ldr	r4, [r5, #4]
1a0042e6:	69a3      	ldr	r3, [r4, #24]
1a0042e8:	60a3      	str	r3, [r4, #8]
1a0042ea:	89a3      	ldrh	r3, [r4, #12]
1a0042ec:	071a      	lsls	r2, r3, #28
1a0042ee:	d52f      	bpl.n	1a004350 <__swbuf_r+0x84>
1a0042f0:	6923      	ldr	r3, [r4, #16]
1a0042f2:	b36b      	cbz	r3, 1a004350 <__swbuf_r+0x84>
1a0042f4:	6923      	ldr	r3, [r4, #16]
1a0042f6:	6820      	ldr	r0, [r4, #0]
1a0042f8:	1ac0      	subs	r0, r0, r3
1a0042fa:	6963      	ldr	r3, [r4, #20]
1a0042fc:	b2f6      	uxtb	r6, r6
1a0042fe:	4283      	cmp	r3, r0
1a004300:	4637      	mov	r7, r6
1a004302:	dc04      	bgt.n	1a00430e <__swbuf_r+0x42>
1a004304:	4621      	mov	r1, r4
1a004306:	4628      	mov	r0, r5
1a004308:	f7ff f892 	bl	1a003430 <_fflush_r>
1a00430c:	bb30      	cbnz	r0, 1a00435c <__swbuf_r+0x90>
1a00430e:	68a3      	ldr	r3, [r4, #8]
1a004310:	3b01      	subs	r3, #1
1a004312:	60a3      	str	r3, [r4, #8]
1a004314:	6823      	ldr	r3, [r4, #0]
1a004316:	1c5a      	adds	r2, r3, #1
1a004318:	6022      	str	r2, [r4, #0]
1a00431a:	701e      	strb	r6, [r3, #0]
1a00431c:	6963      	ldr	r3, [r4, #20]
1a00431e:	3001      	adds	r0, #1
1a004320:	4283      	cmp	r3, r0
1a004322:	d004      	beq.n	1a00432e <__swbuf_r+0x62>
1a004324:	89a3      	ldrh	r3, [r4, #12]
1a004326:	07db      	lsls	r3, r3, #31
1a004328:	d506      	bpl.n	1a004338 <__swbuf_r+0x6c>
1a00432a:	2e0a      	cmp	r6, #10
1a00432c:	d104      	bne.n	1a004338 <__swbuf_r+0x6c>
1a00432e:	4621      	mov	r1, r4
1a004330:	4628      	mov	r0, r5
1a004332:	f7ff f87d 	bl	1a003430 <_fflush_r>
1a004336:	b988      	cbnz	r0, 1a00435c <__swbuf_r+0x90>
1a004338:	4638      	mov	r0, r7
1a00433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00433c:	4b0a      	ldr	r3, [pc, #40]	; (1a004368 <__swbuf_r+0x9c>)
1a00433e:	429c      	cmp	r4, r3
1a004340:	d101      	bne.n	1a004346 <__swbuf_r+0x7a>
1a004342:	68ac      	ldr	r4, [r5, #8]
1a004344:	e7cf      	b.n	1a0042e6 <__swbuf_r+0x1a>
1a004346:	4b09      	ldr	r3, [pc, #36]	; (1a00436c <__swbuf_r+0xa0>)
1a004348:	429c      	cmp	r4, r3
1a00434a:	bf08      	it	eq
1a00434c:	68ec      	ldreq	r4, [r5, #12]
1a00434e:	e7ca      	b.n	1a0042e6 <__swbuf_r+0x1a>
1a004350:	4621      	mov	r1, r4
1a004352:	4628      	mov	r0, r5
1a004354:	f000 f80c 	bl	1a004370 <__swsetup_r>
1a004358:	2800      	cmp	r0, #0
1a00435a:	d0cb      	beq.n	1a0042f4 <__swbuf_r+0x28>
1a00435c:	f04f 37ff 	mov.w	r7, #4294967295
1a004360:	e7ea      	b.n	1a004338 <__swbuf_r+0x6c>
1a004362:	bf00      	nop
1a004364:	1a004d0c 	.word	0x1a004d0c
1a004368:	1a004d2c 	.word	0x1a004d2c
1a00436c:	1a004cec 	.word	0x1a004cec

1a004370 <__swsetup_r>:
1a004370:	4b32      	ldr	r3, [pc, #200]	; (1a00443c <__swsetup_r+0xcc>)
1a004372:	b570      	push	{r4, r5, r6, lr}
1a004374:	681d      	ldr	r5, [r3, #0]
1a004376:	4606      	mov	r6, r0
1a004378:	460c      	mov	r4, r1
1a00437a:	b125      	cbz	r5, 1a004386 <__swsetup_r+0x16>
1a00437c:	69ab      	ldr	r3, [r5, #24]
1a00437e:	b913      	cbnz	r3, 1a004386 <__swsetup_r+0x16>
1a004380:	4628      	mov	r0, r5
1a004382:	f7ff f8e9 	bl	1a003558 <__sinit>
1a004386:	4b2e      	ldr	r3, [pc, #184]	; (1a004440 <__swsetup_r+0xd0>)
1a004388:	429c      	cmp	r4, r3
1a00438a:	d10f      	bne.n	1a0043ac <__swsetup_r+0x3c>
1a00438c:	686c      	ldr	r4, [r5, #4]
1a00438e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004392:	b29a      	uxth	r2, r3
1a004394:	0715      	lsls	r5, r2, #28
1a004396:	d42c      	bmi.n	1a0043f2 <__swsetup_r+0x82>
1a004398:	06d0      	lsls	r0, r2, #27
1a00439a:	d411      	bmi.n	1a0043c0 <__swsetup_r+0x50>
1a00439c:	2209      	movs	r2, #9
1a00439e:	6032      	str	r2, [r6, #0]
1a0043a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0043a4:	81a3      	strh	r3, [r4, #12]
1a0043a6:	f04f 30ff 	mov.w	r0, #4294967295
1a0043aa:	e03e      	b.n	1a00442a <__swsetup_r+0xba>
1a0043ac:	4b25      	ldr	r3, [pc, #148]	; (1a004444 <__swsetup_r+0xd4>)
1a0043ae:	429c      	cmp	r4, r3
1a0043b0:	d101      	bne.n	1a0043b6 <__swsetup_r+0x46>
1a0043b2:	68ac      	ldr	r4, [r5, #8]
1a0043b4:	e7eb      	b.n	1a00438e <__swsetup_r+0x1e>
1a0043b6:	4b24      	ldr	r3, [pc, #144]	; (1a004448 <__swsetup_r+0xd8>)
1a0043b8:	429c      	cmp	r4, r3
1a0043ba:	bf08      	it	eq
1a0043bc:	68ec      	ldreq	r4, [r5, #12]
1a0043be:	e7e6      	b.n	1a00438e <__swsetup_r+0x1e>
1a0043c0:	0751      	lsls	r1, r2, #29
1a0043c2:	d512      	bpl.n	1a0043ea <__swsetup_r+0x7a>
1a0043c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0043c6:	b141      	cbz	r1, 1a0043da <__swsetup_r+0x6a>
1a0043c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0043cc:	4299      	cmp	r1, r3
1a0043ce:	d002      	beq.n	1a0043d6 <__swsetup_r+0x66>
1a0043d0:	4630      	mov	r0, r6
1a0043d2:	f7ff fa8f 	bl	1a0038f4 <_free_r>
1a0043d6:	2300      	movs	r3, #0
1a0043d8:	6363      	str	r3, [r4, #52]	; 0x34
1a0043da:	89a3      	ldrh	r3, [r4, #12]
1a0043dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0043e0:	81a3      	strh	r3, [r4, #12]
1a0043e2:	2300      	movs	r3, #0
1a0043e4:	6063      	str	r3, [r4, #4]
1a0043e6:	6923      	ldr	r3, [r4, #16]
1a0043e8:	6023      	str	r3, [r4, #0]
1a0043ea:	89a3      	ldrh	r3, [r4, #12]
1a0043ec:	f043 0308 	orr.w	r3, r3, #8
1a0043f0:	81a3      	strh	r3, [r4, #12]
1a0043f2:	6923      	ldr	r3, [r4, #16]
1a0043f4:	b94b      	cbnz	r3, 1a00440a <__swsetup_r+0x9a>
1a0043f6:	89a3      	ldrh	r3, [r4, #12]
1a0043f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0043fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004400:	d003      	beq.n	1a00440a <__swsetup_r+0x9a>
1a004402:	4621      	mov	r1, r4
1a004404:	4630      	mov	r0, r6
1a004406:	f000 f881 	bl	1a00450c <__smakebuf_r>
1a00440a:	89a2      	ldrh	r2, [r4, #12]
1a00440c:	f012 0301 	ands.w	r3, r2, #1
1a004410:	d00c      	beq.n	1a00442c <__swsetup_r+0xbc>
1a004412:	2300      	movs	r3, #0
1a004414:	60a3      	str	r3, [r4, #8]
1a004416:	6963      	ldr	r3, [r4, #20]
1a004418:	425b      	negs	r3, r3
1a00441a:	61a3      	str	r3, [r4, #24]
1a00441c:	6923      	ldr	r3, [r4, #16]
1a00441e:	b953      	cbnz	r3, 1a004436 <__swsetup_r+0xc6>
1a004420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004424:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004428:	d1ba      	bne.n	1a0043a0 <__swsetup_r+0x30>
1a00442a:	bd70      	pop	{r4, r5, r6, pc}
1a00442c:	0792      	lsls	r2, r2, #30
1a00442e:	bf58      	it	pl
1a004430:	6963      	ldrpl	r3, [r4, #20]
1a004432:	60a3      	str	r3, [r4, #8]
1a004434:	e7f2      	b.n	1a00441c <__swsetup_r+0xac>
1a004436:	2000      	movs	r0, #0
1a004438:	e7f7      	b.n	1a00442a <__swsetup_r+0xba>
1a00443a:	bf00      	nop
1a00443c:	100000dc 	.word	0x100000dc
1a004440:	1a004d0c 	.word	0x1a004d0c
1a004444:	1a004d2c 	.word	0x1a004d2c
1a004448:	1a004cec 	.word	0x1a004cec

1a00444c <__errno>:
1a00444c:	4b01      	ldr	r3, [pc, #4]	; (1a004454 <__errno+0x8>)
1a00444e:	6818      	ldr	r0, [r3, #0]
1a004450:	4770      	bx	lr
1a004452:	bf00      	nop
1a004454:	100000dc 	.word	0x100000dc

1a004458 <__sflags>:
1a004458:	780b      	ldrb	r3, [r1, #0]
1a00445a:	2b72      	cmp	r3, #114	; 0x72
1a00445c:	b530      	push	{r4, r5, lr}
1a00445e:	d022      	beq.n	1a0044a6 <__sflags+0x4e>
1a004460:	2b77      	cmp	r3, #119	; 0x77
1a004462:	d024      	beq.n	1a0044ae <__sflags+0x56>
1a004464:	2b61      	cmp	r3, #97	; 0x61
1a004466:	d027      	beq.n	1a0044b8 <__sflags+0x60>
1a004468:	2316      	movs	r3, #22
1a00446a:	6003      	str	r3, [r0, #0]
1a00446c:	2000      	movs	r0, #0
1a00446e:	bd30      	pop	{r4, r5, pc}
1a004470:	2d62      	cmp	r5, #98	; 0x62
1a004472:	d012      	beq.n	1a00449a <__sflags+0x42>
1a004474:	2d78      	cmp	r5, #120	; 0x78
1a004476:	d013      	beq.n	1a0044a0 <__sflags+0x48>
1a004478:	2d2b      	cmp	r5, #43	; 0x2b
1a00447a:	d107      	bne.n	1a00448c <__sflags+0x34>
1a00447c:	f020 001c 	bic.w	r0, r0, #28
1a004480:	f023 0303 	bic.w	r3, r3, #3
1a004484:	f040 0010 	orr.w	r0, r0, #16
1a004488:	f043 0302 	orr.w	r3, r3, #2
1a00448c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
1a004490:	2d00      	cmp	r5, #0
1a004492:	d1ed      	bne.n	1a004470 <__sflags+0x18>
1a004494:	4323      	orrs	r3, r4
1a004496:	6013      	str	r3, [r2, #0]
1a004498:	e7e9      	b.n	1a00446e <__sflags+0x16>
1a00449a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a00449e:	e7f5      	b.n	1a00448c <__sflags+0x34>
1a0044a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0044a4:	e7f2      	b.n	1a00448c <__sflags+0x34>
1a0044a6:	2400      	movs	r4, #0
1a0044a8:	4623      	mov	r3, r4
1a0044aa:	2004      	movs	r0, #4
1a0044ac:	e7ee      	b.n	1a00448c <__sflags+0x34>
1a0044ae:	f44f 64c0 	mov.w	r4, #1536	; 0x600
1a0044b2:	2301      	movs	r3, #1
1a0044b4:	2008      	movs	r0, #8
1a0044b6:	e7e9      	b.n	1a00448c <__sflags+0x34>
1a0044b8:	f44f 7402 	mov.w	r4, #520	; 0x208
1a0044bc:	2301      	movs	r3, #1
1a0044be:	f44f 7084 	mov.w	r0, #264	; 0x108
1a0044c2:	e7e3      	b.n	1a00448c <__sflags+0x34>

1a0044c4 <__swhatbuf_r>:
1a0044c4:	b570      	push	{r4, r5, r6, lr}
1a0044c6:	460e      	mov	r6, r1
1a0044c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0044cc:	2900      	cmp	r1, #0
1a0044ce:	b096      	sub	sp, #88	; 0x58
1a0044d0:	4614      	mov	r4, r2
1a0044d2:	461d      	mov	r5, r3
1a0044d4:	da07      	bge.n	1a0044e6 <__swhatbuf_r+0x22>
1a0044d6:	2300      	movs	r3, #0
1a0044d8:	602b      	str	r3, [r5, #0]
1a0044da:	89b3      	ldrh	r3, [r6, #12]
1a0044dc:	061a      	lsls	r2, r3, #24
1a0044de:	d410      	bmi.n	1a004502 <__swhatbuf_r+0x3e>
1a0044e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0044e4:	e00e      	b.n	1a004504 <__swhatbuf_r+0x40>
1a0044e6:	466a      	mov	r2, sp
1a0044e8:	f7fc fa49 	bl	1a00097e <_fstat_r>
1a0044ec:	2800      	cmp	r0, #0
1a0044ee:	dbf2      	blt.n	1a0044d6 <__swhatbuf_r+0x12>
1a0044f0:	9a01      	ldr	r2, [sp, #4]
1a0044f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0044f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0044fa:	425a      	negs	r2, r3
1a0044fc:	415a      	adcs	r2, r3
1a0044fe:	602a      	str	r2, [r5, #0]
1a004500:	e7ee      	b.n	1a0044e0 <__swhatbuf_r+0x1c>
1a004502:	2340      	movs	r3, #64	; 0x40
1a004504:	2000      	movs	r0, #0
1a004506:	6023      	str	r3, [r4, #0]
1a004508:	b016      	add	sp, #88	; 0x58
1a00450a:	bd70      	pop	{r4, r5, r6, pc}

1a00450c <__smakebuf_r>:
1a00450c:	898b      	ldrh	r3, [r1, #12]
1a00450e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004510:	079d      	lsls	r5, r3, #30
1a004512:	4606      	mov	r6, r0
1a004514:	460c      	mov	r4, r1
1a004516:	d507      	bpl.n	1a004528 <__smakebuf_r+0x1c>
1a004518:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00451c:	6023      	str	r3, [r4, #0]
1a00451e:	6123      	str	r3, [r4, #16]
1a004520:	2301      	movs	r3, #1
1a004522:	6163      	str	r3, [r4, #20]
1a004524:	b002      	add	sp, #8
1a004526:	bd70      	pop	{r4, r5, r6, pc}
1a004528:	ab01      	add	r3, sp, #4
1a00452a:	466a      	mov	r2, sp
1a00452c:	f7ff ffca 	bl	1a0044c4 <__swhatbuf_r>
1a004530:	9900      	ldr	r1, [sp, #0]
1a004532:	4605      	mov	r5, r0
1a004534:	4630      	mov	r0, r6
1a004536:	f7ff fa2b 	bl	1a003990 <_malloc_r>
1a00453a:	b948      	cbnz	r0, 1a004550 <__smakebuf_r+0x44>
1a00453c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004540:	059a      	lsls	r2, r3, #22
1a004542:	d4ef      	bmi.n	1a004524 <__smakebuf_r+0x18>
1a004544:	f023 0303 	bic.w	r3, r3, #3
1a004548:	f043 0302 	orr.w	r3, r3, #2
1a00454c:	81a3      	strh	r3, [r4, #12]
1a00454e:	e7e3      	b.n	1a004518 <__smakebuf_r+0xc>
1a004550:	4b0d      	ldr	r3, [pc, #52]	; (1a004588 <__smakebuf_r+0x7c>)
1a004552:	62b3      	str	r3, [r6, #40]	; 0x28
1a004554:	89a3      	ldrh	r3, [r4, #12]
1a004556:	6020      	str	r0, [r4, #0]
1a004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00455c:	81a3      	strh	r3, [r4, #12]
1a00455e:	9b00      	ldr	r3, [sp, #0]
1a004560:	6163      	str	r3, [r4, #20]
1a004562:	9b01      	ldr	r3, [sp, #4]
1a004564:	6120      	str	r0, [r4, #16]
1a004566:	b15b      	cbz	r3, 1a004580 <__smakebuf_r+0x74>
1a004568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00456c:	4630      	mov	r0, r6
1a00456e:	f7fc fa0b 	bl	1a000988 <_isatty_r>
1a004572:	b128      	cbz	r0, 1a004580 <__smakebuf_r+0x74>
1a004574:	89a3      	ldrh	r3, [r4, #12]
1a004576:	f023 0303 	bic.w	r3, r3, #3
1a00457a:	f043 0301 	orr.w	r3, r3, #1
1a00457e:	81a3      	strh	r3, [r4, #12]
1a004580:	89a3      	ldrh	r3, [r4, #12]
1a004582:	431d      	orrs	r5, r3
1a004584:	81a5      	strh	r5, [r4, #12]
1a004586:	e7cd      	b.n	1a004524 <__smakebuf_r+0x18>
1a004588:	1a0034f1 	.word	0x1a0034f1
1a00458c:	ffffffff 	.word	0xffffffff

1a004590 <memchr>:
1a004590:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004594:	2a10      	cmp	r2, #16
1a004596:	db2b      	blt.n	1a0045f0 <memchr+0x60>
1a004598:	f010 0f07 	tst.w	r0, #7
1a00459c:	d008      	beq.n	1a0045b0 <memchr+0x20>
1a00459e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0045a2:	3a01      	subs	r2, #1
1a0045a4:	428b      	cmp	r3, r1
1a0045a6:	d02d      	beq.n	1a004604 <memchr+0x74>
1a0045a8:	f010 0f07 	tst.w	r0, #7
1a0045ac:	b342      	cbz	r2, 1a004600 <memchr+0x70>
1a0045ae:	d1f6      	bne.n	1a00459e <memchr+0xe>
1a0045b0:	b4f0      	push	{r4, r5, r6, r7}
1a0045b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0045b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0045ba:	f022 0407 	bic.w	r4, r2, #7
1a0045be:	f07f 0700 	mvns.w	r7, #0
1a0045c2:	2300      	movs	r3, #0
1a0045c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0045c8:	3c08      	subs	r4, #8
1a0045ca:	ea85 0501 	eor.w	r5, r5, r1
1a0045ce:	ea86 0601 	eor.w	r6, r6, r1
1a0045d2:	fa85 f547 	uadd8	r5, r5, r7
1a0045d6:	faa3 f587 	sel	r5, r3, r7
1a0045da:	fa86 f647 	uadd8	r6, r6, r7
1a0045de:	faa5 f687 	sel	r6, r5, r7
1a0045e2:	b98e      	cbnz	r6, 1a004608 <memchr+0x78>
1a0045e4:	d1ee      	bne.n	1a0045c4 <memchr+0x34>
1a0045e6:	bcf0      	pop	{r4, r5, r6, r7}
1a0045e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0045ec:	f002 0207 	and.w	r2, r2, #7
1a0045f0:	b132      	cbz	r2, 1a004600 <memchr+0x70>
1a0045f2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0045f6:	3a01      	subs	r2, #1
1a0045f8:	ea83 0301 	eor.w	r3, r3, r1
1a0045fc:	b113      	cbz	r3, 1a004604 <memchr+0x74>
1a0045fe:	d1f8      	bne.n	1a0045f2 <memchr+0x62>
1a004600:	2000      	movs	r0, #0
1a004602:	4770      	bx	lr
1a004604:	3801      	subs	r0, #1
1a004606:	4770      	bx	lr
1a004608:	2d00      	cmp	r5, #0
1a00460a:	bf06      	itte	eq
1a00460c:	4635      	moveq	r5, r6
1a00460e:	3803      	subeq	r0, #3
1a004610:	3807      	subne	r0, #7
1a004612:	f015 0f01 	tst.w	r5, #1
1a004616:	d107      	bne.n	1a004628 <memchr+0x98>
1a004618:	3001      	adds	r0, #1
1a00461a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00461e:	bf02      	ittt	eq
1a004620:	3001      	addeq	r0, #1
1a004622:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004626:	3001      	addeq	r0, #1
1a004628:	bcf0      	pop	{r4, r5, r6, r7}
1a00462a:	3801      	subs	r0, #1
1a00462c:	4770      	bx	lr
1a00462e:	bf00      	nop

1a004630 <__malloc_lock>:
1a004630:	4801      	ldr	r0, [pc, #4]	; (1a004638 <__malloc_lock+0x8>)
1a004632:	f7ff b955 	b.w	1a0038e0 <__retarget_lock_acquire_recursive>
1a004636:	bf00      	nop
1a004638:	100001b4 	.word	0x100001b4

1a00463c <__malloc_unlock>:
1a00463c:	4801      	ldr	r0, [pc, #4]	; (1a004644 <__malloc_unlock+0x8>)
1a00463e:	f7ff b950 	b.w	1a0038e2 <__retarget_lock_release_recursive>
1a004642:	bf00      	nop
1a004644:	100001b4 	.word	0x100001b4
1a004648:	0a0d5441 	.word	0x0a0d5441
1a00464c:	00000000 	.word	0x00000000
1a004650:	0a0d4b4f 	.word	0x0a0d4b4f
1a004654:	ffffff00 	.word	0xffffff00
1a004658:	7778797a 	.word	0x7778797a
1a00465c:	73747576 	.word	0x73747576
1a004660:	6f707172 	.word	0x6f707172
1a004664:	6b6c6d6e 	.word	0x6b6c6d6e
1a004668:	6768696a 	.word	0x6768696a
1a00466c:	63646566 	.word	0x63646566
1a004670:	38396162 	.word	0x38396162
1a004674:	34353637 	.word	0x34353637
1a004678:	30313233 	.word	0x30313233
1a00467c:	34333231 	.word	0x34333231
1a004680:	38373635 	.word	0x38373635
1a004684:	63626139 	.word	0x63626139
1a004688:	67666564 	.word	0x67666564
1a00468c:	6b6a6968 	.word	0x6b6a6968
1a004690:	6f6e6d6c 	.word	0x6f6e6d6c
1a004694:	73727170 	.word	0x73727170
1a004698:	77767574 	.word	0x77767574
1a00469c:	007a7978 	.word	0x007a7978
1a0046a0:	54524155 	.word	0x54524155
1a0046a4:	2043505f 	.word	0x2043505f
1a0046a8:	666e6f63 	.word	0x666e6f63
1a0046ac:	72756769 	.word	0x72756769
1a0046b0:	2e616461 	.word	0x2e616461
1a0046b4:	00000a0d 	.word	0x00000a0d
1a0046b8:	54524155 	.word	0x54524155
1a0046bc:	554c425f 	.word	0x554c425f
1a0046c0:	4f4f5445 	.word	0x4f4f5445
1a0046c4:	70204854 	.word	0x70204854
1a0046c8:	20617261 	.word	0x20617261
1a0046cc:	75646f6d 	.word	0x75646f6d
1a0046d0:	42206f6c 	.word	0x42206f6c
1a0046d4:	7465756c 	.word	0x7465756c
1a0046d8:	68746f6f 	.word	0x68746f6f
1a0046dc:	6e6f6320 	.word	0x6e6f6320
1a0046e0:	75676966 	.word	0x75676966
1a0046e4:	61646172 	.word	0x61646172
1a0046e8:	000a0d2e 	.word	0x000a0d2e
1a0046ec:	74736554 	.word	0x74736554
1a0046f0:	206f7465 	.word	0x206f7465
1a0046f4:	65206973 	.word	0x65206973
1a0046f8:	6f6d206c 	.word	0x6f6d206c
1a0046fc:	6f6c7564 	.word	0x6f6c7564
1a004700:	74736520 	.word	0x74736520
1a004704:	6f632061 	.word	0x6f632061
1a004708:	7463656e 	.word	0x7463656e
1a00470c:	206f6461 	.word	0x206f6461
1a004710:	69766e65 	.word	0x69766e65
1a004714:	6f646e61 	.word	0x6f646e61
1a004718:	5441203a 	.word	0x5441203a
1a00471c:	00000a0d 	.word	0x00000a0d
1a004720:	75646f4d 	.word	0x75646f4d
1a004724:	63206f6c 	.word	0x63206f6c
1a004728:	63656e6f 	.word	0x63656e6f
1a00472c:	6f646174 	.word	0x6f646174
1a004730:	726f6320 	.word	0x726f6320
1a004734:	74636572 	.word	0x74636572
1a004738:	6e656d61 	.word	0x6e656d61
1a00473c:	0d2e6574 	.word	0x0d2e6574
1a004740:	0000000a 	.word	0x0000000a
1a004744:	66206f4e 	.word	0x66206f4e
1a004748:	69636e75 	.word	0x69636e75
1a00474c:	2e616e6f 	.word	0x2e616e6f
1a004750:	00000a0d 	.word	0x00000a0d
1a004754:	65636552 	.word	0x65636552
1a004758:	64657669 	.word	0x64657669
1a00475c:	6d6f6320 	.word	0x6d6f6320
1a004760:	646e616d 	.word	0x646e616d
1a004764:	7325203a 	.word	0x7325203a
1a004768:	00000a0d 	.word	0x00000a0d
1a00476c:	4e525554 	.word	0x4e525554
1a004770:	004e4f5f 	.word	0x004e4f5f
1a004774:	6e656441 	.word	0x6e656441
1a004778:	206f7274 	.word	0x206f7274
1a00477c:	54206564 	.word	0x54206564
1a004780:	204e5255 	.word	0x204e5255
1a004784:	0d204e4f 	.word	0x0d204e4f
1a004788:	00000000 	.word	0x00000000
1a00478c:	4e525554 	.word	0x4e525554
1a004790:	46464f5f 	.word	0x46464f5f
1a004794:	00000000 	.word	0x00000000
1a004798:	6e656441 	.word	0x6e656441
1a00479c:	206f7274 	.word	0x206f7274
1a0047a0:	54206564 	.word	0x54206564
1a0047a4:	204e5255 	.word	0x204e5255
1a0047a8:	2046464f 	.word	0x2046464f
1a0047ac:	0000000d 	.word	0x0000000d
1a0047b0:	545f4843 	.word	0x545f4843
1a0047b4:	00000000 	.word	0x00000000
1a0047b8:	626d6143 	.word	0x626d6143
1a0047bc:	65206169 	.word	0x65206169
1a0047c0:	6176206c 	.word	0x6176206c
1a0047c4:	20726f6c 	.word	0x20726f6c
1a0047c8:	73206564 	.word	0x73206564
1a0047cc:	5f6e6163 	.word	0x5f6e6163
1a0047d0:	69726570 	.word	0x69726570
1a0047d4:	6120646f 	.word	0x6120646f
1a0047d8:	6425203a 	.word	0x6425203a
1a0047dc:	000a0d20 	.word	0x000a0d20
1a0047e0:	485f4843 	.word	0x485f4843
1a0047e4:	00000000 	.word	0x00000000
1a0047e8:	626d6143 	.word	0x626d6143
1a0047ec:	65206169 	.word	0x65206169
1a0047f0:	6176206c 	.word	0x6176206c
1a0047f4:	20726f6c 	.word	0x20726f6c
1a0047f8:	6d206564 	.word	0x6d206564
1a0047fc:	685f6e69 	.word	0x685f6e69
1a004800:	64696d75 	.word	0x64696d75
1a004804:	20797469 	.word	0x20797469
1a004808:	25203a61 	.word	0x25203a61
1a00480c:	0d202064 	.word	0x0d202064
1a004810:	0000000a 	.word	0x0000000a
1a004814:	445f4843 	.word	0x445f4843
1a004818:	00000000 	.word	0x00000000
1a00481c:	626d6143 	.word	0x626d6143
1a004820:	65206169 	.word	0x65206169
1a004824:	6176206c 	.word	0x6176206c
1a004828:	20726f6c 	.word	0x20726f6c
1a00482c:	72206564 	.word	0x72206564
1a004830:	70696365 	.word	0x70696365
1a004834:	746e6569 	.word	0x746e6569
1a004838:	6965685f 	.word	0x6965685f
1a00483c:	20746867 	.word	0x20746867
1a004840:	25203a61 	.word	0x25203a61
1a004844:	0a0d2064 	.word	0x0a0d2064
1a004848:	00000000 	.word	0x00000000
1a00484c:	65636552 	.word	0x65636552
1a004850:	64657669 	.word	0x64657669
1a004854:	6b6e7520 	.word	0x6b6e7520
1a004858:	6e776f6e 	.word	0x6e776f6e
1a00485c:	6d6f6320 	.word	0x6d6f6320
1a004860:	646e616d 	.word	0x646e616d
1a004864:	7325203a 	.word	0x7325203a
1a004868:	ff000a0d 	.word	0xff000a0d
1a00486c:	736c6166 	.word	0x736c6166
1a004870:	00000065 	.word	0x00000065
1a004874:	65757274 	.word	0x65757274
1a004878:	ffffff00 	.word	0xffffff00
1a00487c:	6177227b 	.word	0x6177227b
1a004880:	5f726574 	.word	0x5f726574
1a004884:	6576656c 	.word	0x6576656c
1a004888:	203a226c 	.word	0x203a226c
1a00488c:	202c6425 	.word	0x202c6425
1a004890:	6d756822 	.word	0x6d756822
1a004894:	74696469 	.word	0x74696469
1a004898:	203a2279 	.word	0x203a2279
1a00489c:	202c6425 	.word	0x202c6425
1a0048a0:	74617722 	.word	0x74617722
1a0048a4:	705f7265 	.word	0x705f7265
1a0048a8:	22706d75 	.word	0x22706d75
1a0048ac:	7325203a 	.word	0x7325203a
1a0048b0:	6d22202c 	.word	0x6d22202c
1a0048b4:	685f6e69 	.word	0x685f6e69
1a0048b8:	64696d75 	.word	0x64696d75
1a0048bc:	22797469 	.word	0x22797469
1a0048c0:	6425203a 	.word	0x6425203a
1a0048c4:	7222202c 	.word	0x7222202c
1a0048c8:	70696365 	.word	0x70696365
1a0048cc:	746e6569 	.word	0x746e6569
1a0048d0:	6965685f 	.word	0x6965685f
1a0048d4:	22746867 	.word	0x22746867
1a0048d8:	6425203a 	.word	0x6425203a
1a0048dc:	7322202c 	.word	0x7322202c
1a0048e0:	5f6e6163 	.word	0x5f6e6163
1a0048e4:	69726570 	.word	0x69726570
1a0048e8:	3a22646f 	.word	0x3a22646f
1a0048ec:	20642520 	.word	0x20642520
1a0048f0:	ffff007d 	.word	0xffff007d

1a0048f4 <InitClkStates>:
1a0048f4:	01010f01                                ....

1a0048f8 <pinmuxing>:
1a0048f8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004908:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004918:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004928:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004938:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004948:	00d50301 00d50401 00160107 00560207     ..............V.
1a004958:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004968:	00570206                                ..W.

1a00496c <ExtRateIn>:
1a00496c:	00000000                                ....

1a004970 <GpioButtons>:
1a004970:	08000400 09010900                       ........

1a004978 <GpioLeds>:
1a004978:	01050005 0e000205 0c010b01              ............

1a004984 <GpioPorts>:
1a004984:	03030003 0f050403 05031005 07030603     ................
1a004994:	ffff0802                                ....

1a004998 <OscRateIn>:
1a004998:	00b71b00                                ....

1a00499c <InitClkStates>:
1a00499c:	00010100 00010909 0001090a 01010701     ................
1a0049ac:	00010902 00010906 0101090c 0001090d     ................
1a0049bc:	0001090e 0001090f 00010910 00010911     ................
1a0049cc:	00010912 00010913 00011114 00011119     ................
1a0049dc:	0001111a 0001111b 08040201 0f0f0f03     ................
1a0049ec:	ffff00ff                                ....

1a0049f0 <periph_to_base>:
1a0049f0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004a00:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004a10:	000100e0 01000100 01200003 00060120     .......... . ...
1a004a20:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004a30:	01820013 00120182 01a201a2 01c20011     ................
1a004a40:	001001c2 01e201e2 0202000f 000e0202     ................
1a004a50:	02220222 0223000d 001c0223              "."...#.#...

1a004a5c <UART_BClock>:
1a004a5c:	01a201c2 01620182                       ......b.

1a004a64 <UART_PClock>:
1a004a64:	00820081 00a200a1                       ........

1a004a6c <gpioPinsInit>:
1a004a6c:	02000104 00050701 05010d03 04080100     ................
1a004a7c:	02020002 02000304 00000403 04070002     ................
1a004a8c:	030c0300 09050402 05040103 04030208     ................
1a004a9c:	04020305 06040504 0802000c 03000b06     ................
1a004aac:	00090607 07060503 060f0504 03030004     ................
1a004abc:	02000404 00050404 06040502 04060200     ................
1a004acc:	0c050408 05040a04 0003010e 14010a00     ................
1a004adc:	010f0000 0d000012 00001101 0010010c     ................
1a004aec:	07070300 000f0300 01000001 00000000     ................
1a004afc:	000a0600 08060603 06100504 04030005     ................
1a004b0c:	03000106 04090400 04010d05 010b0000     ................
1a004b1c:	0200000f 00000001 00010104 02010800     ................
1a004b2c:	01090000 09010006 05040002 04010200     ................
1a004b3c:	02020105 02020504 0e00000a 01000b02     ................
1a004b4c:	000c020b ffff0c01 00061a80 0000000a     ................

1a004b5c <timer_sd>:
1a004b5c:	40084000 00000020 0000000c 40085000     .@.@ ........P.@
1a004b6c:	00000021 0000000d 400c3000 00000022     !........0.@"...
1a004b7c:	0000000e 400c4000 00000023 0000000f     .....@.@#.......

1a004b8c <lpcUarts>:
1a004b8c:	40081000 06020406 00180205 40081000     ...@...........@
1a004b9c:	09070509 00180706 40082000 00000000     ......... .@....
1a004bac:	00190000 400c1000 07060107 001a0602     .......@........
1a004bbc:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004bcc:	02020302 001b0204 00002b77              ........w+..

1a004bd8 <uartfd_vtable>:
1a004bd8:	1a00234b 1a00233d 00000000 00000000     K#..=#..........

1a004be8 <ultrasonicSensorsIrqMap>:
1a004be8:	                                         ...

1a004beb <_ctype_>:
1a004beb:	20202000 20202020 28282020 20282828     .         ((((( 
1a004bfb:	20202020 20202020 20202020 20202020                     
1a004c0b:	10108820 10101010 10101010 10101010      ...............
1a004c1b:	04040410 04040404 10040404 10101010     ................
1a004c2b:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a004c3b:	01010101 01010101 01010101 10101010     ................
1a004c4b:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a004c5b:	02020202 02020202 02020202 10101010     ................
1a004c6b:	00000020 00000000 00000000 00000000      ...............
	...

1a004cec <__sf_fake_stderr>:
	...

1a004d0c <__sf_fake_stdin>:
	...

1a004d2c <__sf_fake_stdout>:
	...

1a004d4c <_global_impure_ptr>:
1a004d4c:	100000e0 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a004d5c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004d6c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a004d7c:	64636261 ff006665                       abcdef..
